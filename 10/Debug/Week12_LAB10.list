
Week12_LAB10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  08009948  08009948  00019948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e90  08009e90  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009e90  08009e90  00019e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e98  08009e98  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e98  08009e98  00019e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e9c  08009e9c  00019e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000078  08009f14  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08009f14  000203b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115a2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b9  00000000  00000000  00031646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00033800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  00034750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c63  00000000  00000000  000355d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001076c  00000000  00000000  0004d23b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b3c3  00000000  00000000  0005d9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8d6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004910  00000000  00000000  000f8dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800992c 	.word	0x0800992c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800992c 	.word	0x0800992c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b96e 	b.w	8000f60 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8083 	bne.w	8000db2 <__udivmoddi4+0x116>
 8000cac:	428a      	cmp	r2, r1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	d947      	bls.n	8000d42 <__udivmoddi4+0xa6>
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	b142      	cbz	r2, 8000cca <__udivmoddi4+0x2e>
 8000cb8:	f1c2 0020 	rsb	r0, r2, #32
 8000cbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc0:	4091      	lsls	r1, r2
 8000cc2:	4097      	lsls	r7, r2
 8000cc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cce:	0c23      	lsrs	r3, r4, #16
 8000cd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd4:	fa1f fe87 	uxth.w	lr, r7
 8000cd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x60>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 8119 	bcs.w	8000f24 <__udivmoddi4+0x288>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 8116 	bls.w	8000f24 <__udivmoddi4+0x288>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	443b      	add	r3, r7
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x8c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	f080 8105 	bcs.w	8000f28 <__udivmoddi4+0x28c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8102 	bls.w	8000f28 <__udivmoddi4+0x28c>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2c:	eba4 040e 	sub.w	r4, r4, lr
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa0>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	b902      	cbnz	r2, 8000d46 <__udivmoddi4+0xaa>
 8000d44:	deff      	udf	#255	; 0xff
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d150      	bne.n	8000df0 <__udivmoddi4+0x154>
 8000d4e:	1bcb      	subs	r3, r1, r7
 8000d50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	2601      	movs	r6, #1
 8000d5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5e:	0c21      	lsrs	r1, r4, #16
 8000d60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb08 f30c 	mul.w	r3, r8, ip
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0xe4>
 8000d70:	1879      	adds	r1, r7, r1
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0xe2>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	f200 80e9 	bhi.w	8000f50 <__udivmoddi4+0x2b4>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1ac9      	subs	r1, r1, r3
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x10c>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x10a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80d9 	bhi.w	8000f58 <__udivmoddi4+0x2bc>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e7bf      	b.n	8000d32 <__udivmoddi4+0x96>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x12e>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80b1 	beq.w	8000f1e <__udivmoddi4+0x282>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x1cc>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x140>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80b8 	bhi.w	8000f4c <__udivmoddi4+0x2b0>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0103 	sbc.w	r1, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	468c      	mov	ip, r1
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0a8      	beq.n	8000d3c <__udivmoddi4+0xa0>
 8000dea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dee:	e7a5      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f603 	lsr.w	r6, r0, r3
 8000df8:	4097      	lsls	r7, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	4330      	orrs	r0, r6
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb06 f108 	mul.w	r1, r6, r8
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x19c>
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e2a:	f080 808d 	bcs.w	8000f48 <__udivmoddi4+0x2ac>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 808a 	bls.w	8000f48 <__udivmoddi4+0x2ac>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	443b      	add	r3, r7
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b281      	uxth	r1, r0
 8000e3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb00 f308 	mul.w	r3, r0, r8
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x1c4>
 8000e50:	1879      	adds	r1, r7, r1
 8000e52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e56:	d273      	bcs.n	8000f40 <__udivmoddi4+0x2a4>
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d971      	bls.n	8000f40 <__udivmoddi4+0x2a4>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4439      	add	r1, r7
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e66:	e778      	b.n	8000d5a <__udivmoddi4+0xbe>
 8000e68:	f1c6 0c20 	rsb	ip, r6, #32
 8000e6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e74:	431c      	orrs	r4, r3
 8000e76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e86:	431f      	orrs	r7, r3
 8000e88:	0c3b      	lsrs	r3, r7, #16
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fa1f f884 	uxth.w	r8, r4
 8000e92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x220>
 8000eaa:	1861      	adds	r1, r4, r1
 8000eac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb0:	d248      	bcs.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb2:	458a      	cmp	sl, r1
 8000eb4:	d946      	bls.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eba:	4421      	add	r1, r4
 8000ebc:	eba1 010a 	sub.w	r1, r1, sl
 8000ec0:	b2bf      	uxth	r7, r7
 8000ec2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ece:	fb00 f808 	mul.w	r8, r0, r8
 8000ed2:	45b8      	cmp	r8, r7
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x24a>
 8000ed6:	19e7      	adds	r7, r4, r7
 8000ed8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000edc:	d22e      	bcs.n	8000f3c <__udivmoddi4+0x2a0>
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d92c      	bls.n	8000f3c <__udivmoddi4+0x2a0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4427      	add	r7, r4
 8000ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eea:	eba7 0708 	sub.w	r7, r7, r8
 8000eee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef2:	454f      	cmp	r7, r9
 8000ef4:	46c6      	mov	lr, r8
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	d31a      	bcc.n	8000f30 <__udivmoddi4+0x294>
 8000efa:	d017      	beq.n	8000f2c <__udivmoddi4+0x290>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x27a>
 8000efe:	ebb3 020e 	subs.w	r2, r3, lr
 8000f02:	eb67 0701 	sbc.w	r7, r7, r1
 8000f06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f0a:	40f2      	lsrs	r2, r6
 8000f0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f10:	40f7      	lsrs	r7, r6
 8000f12:	e9c5 2700 	strd	r2, r7, [r5]
 8000f16:	2600      	movs	r6, #0
 8000f18:	4631      	mov	r1, r6
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e70b      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fd      	b.n	8000d28 <__udivmoddi4+0x8c>
 8000f2c:	4543      	cmp	r3, r8
 8000f2e:	d2e5      	bcs.n	8000efc <__udivmoddi4+0x260>
 8000f30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f34:	eb69 0104 	sbc.w	r1, r9, r4
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7df      	b.n	8000efc <__udivmoddi4+0x260>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e7d2      	b.n	8000ee6 <__udivmoddi4+0x24a>
 8000f40:	4660      	mov	r0, ip
 8000f42:	e78d      	b.n	8000e60 <__udivmoddi4+0x1c4>
 8000f44:	4681      	mov	r9, r0
 8000f46:	e7b9      	b.n	8000ebc <__udivmoddi4+0x220>
 8000f48:	4666      	mov	r6, ip
 8000f4a:	e775      	b.n	8000e38 <__udivmoddi4+0x19c>
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	e74a      	b.n	8000de6 <__udivmoddi4+0x14a>
 8000f50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f54:	4439      	add	r1, r7
 8000f56:	e713      	b.n	8000d80 <__udivmoddi4+0xe4>
 8000f58:	3802      	subs	r0, #2
 8000f5a:	443c      	add	r4, r7
 8000f5c:	e724      	b.n	8000da8 <__udivmoddi4+0x10c>
 8000f5e:	bf00      	nop

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	0000      	movs	r0, r0
	...

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f6c:	f6ad 3d08 	subw	sp, sp, #2824	; 0xb08
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f72:	f003 f9df 	bl	8004334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f76:	f002 fc7f 	bl	8003878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7a:	f002 fe29 	bl	8003bd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7e:	f002 fe07 	bl	8003b90 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f82:	f002 fddb 	bl	8003b3c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000f86:	f002 fd31 	bl	80039ec <MX_SPI3_Init>
  MX_ADC1_Init();
 8000f8a:	f002 fcdd 	bl	8003948 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f8e:	f002 fd65 	bl	8003a5c <MX_TIM3_Init>
  MX_TIM11_Init();
 8000f92:	f002 fdaf 	bl	8003af4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000f96:	48c2      	ldr	r0, [pc, #776]	; (80012a0 <main+0x338>)
 8000f98:	f005 fd72 	bl	8006a80 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000f9c:	48c1      	ldr	r0, [pc, #772]	; (80012a4 <main+0x33c>)
 8000f9e:	f005 fdc9 	bl	8006b34 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	49c0      	ldr	r1, [pc, #768]	; (80012a8 <main+0x340>)
 8000fa6:	48c1      	ldr	r0, [pc, #772]	; (80012ac <main+0x344>)
 8000fa8:	f003 fa7a 	bl	80044a0 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb2:	48bf      	ldr	r0, [pc, #764]	; (80012b0 <main+0x348>)
 8000fb4:	f004 fce2 	bl	800597c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
	HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 45);
 8000fb8:	222d      	movs	r2, #45	; 0x2d
 8000fba:	49be      	ldr	r1, [pc, #760]	; (80012b4 <main+0x34c>)
 8000fbc:	48be      	ldr	r0, [pc, #760]	; (80012b8 <main+0x350>)
 8000fbe:	f006 fa8a 	bl	80074d6 <HAL_UART_Receive_IT>
	int16_t inputchar = UARTRecieveIT();
 8000fc2:	f002 fee1 	bl	8003d88 <UARTRecieveIT>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	f8a7 3b06 	strh.w	r3, [r7, #2822]	; 0xb06
	if(inputchar!=-1)
 8000fcc:	f9b7 3b06 	ldrsh.w	r3, [r7, #2822]	; 0xb06
 8000fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd4:	f002 823f 	beq.w	8003456 <main+0x24ee>
	{
		switch(State)
 8000fd8:	4bb8      	ldr	r3, [pc, #736]	; (80012bc <main+0x354>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	2b0a      	cmp	r3, #10
 8000fde:	f202 8254 	bhi.w	800348a <main+0x2522>
 8000fe2:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <main+0x80>)
 8000fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe8:	08001015 	.word	0x08001015
 8000fec:	0800101f 	.word	0x0800101f
 8000ff0:	0800116b 	.word	0x0800116b
 8000ff4:	08001469 	.word	0x08001469
 8000ff8:	0800193f 	.word	0x0800193f
 8000ffc:	08001d57 	.word	0x08001d57
 8001000:	0800216b 	.word	0x0800216b
 8001004:	08002517 	.word	0x08002517
 8001008:	08002911 	.word	0x08002911
 800100c:	08002d03 	.word	0x08002d03
 8001010:	080030ab 	.word	0x080030ab
		{
		case State_Start:
			State=State_menu;
 8001014:	4ba9      	ldr	r3, [pc, #676]	; (80012bc <main+0x354>)
 8001016:	2201      	movs	r2, #1
 8001018:	801a      	strh	r2, [r3, #0]
			break;
 800101a:	f002 ba36 	b.w	800348a <main+0x2522>
			case State_menu:
			{
				char temp[]="******************\r\n*******MENU*******\r\n";
 800101e:	463b      	mov	r3, r7
 8001020:	4aa7      	ldr	r2, [pc, #668]	; (80012c0 <main+0x358>)
 8001022:	461c      	mov	r4, r3
 8001024:	4615      	mov	r5, r2
 8001026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001032:	c403      	stmia	r4!, {r0, r1}
 8001034:	7022      	strb	r2, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001036:	463b      	mov	r3, r7
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f8d1 	bl	80001e0 <strlen>
 800103e:	4603      	mov	r3, r0
 8001040:	b29a      	uxth	r2, r3
 8001042:	4639      	mov	r1, r7
 8001044:	230a      	movs	r3, #10
 8001046:	489c      	ldr	r0, [pc, #624]	; (80012b8 <main+0x350>)
 8001048:	f006 f9b3 	bl	80073b2 <HAL_UART_Transmit>
			}
			{
				char temp[]="Pls press right\r\n";
 800104c:	4b9d      	ldr	r3, [pc, #628]	; (80012c4 <main+0x35c>)
 800104e:	f607 24f4 	addw	r4, r7, #2804	; 0xaf4
 8001052:	461d      	mov	r5, r3
 8001054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001058:	682b      	ldr	r3, [r5, #0]
 800105a:	8023      	strh	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800105c:	f607 23f4 	addw	r3, r7, #2804	; 0xaf4
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f8bd 	bl	80001e0 <strlen>
 8001066:	4603      	mov	r3, r0
 8001068:	b29a      	uxth	r2, r3
 800106a:	f607 21f4 	addw	r1, r7, #2804	; 0xaf4
 800106e:	230a      	movs	r3, #10
 8001070:	4891      	ldr	r0, [pc, #580]	; (80012b8 <main+0x350>)
 8001072:	f006 f99e 	bl	80073b2 <HAL_UART_Transmit>
			}
			{
				char temp[]="Press a : Frequency config\r\n";
 8001076:	4b94      	ldr	r3, [pc, #592]	; (80012c8 <main+0x360>)
 8001078:	f607 24d4 	addw	r4, r7, #2772	; 0xad4
 800107c:	461d      	mov	r5, r3
 800107e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001082:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001086:	c407      	stmia	r4!, {r0, r1, r2}
 8001088:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800108a:	f607 23d4 	addw	r3, r7, #2772	; 0xad4
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f8a6 	bl	80001e0 <strlen>
 8001094:	4603      	mov	r3, r0
 8001096:	b29a      	uxth	r2, r3
 8001098:	f607 21d4 	addw	r1, r7, #2772	; 0xad4
 800109c:	230a      	movs	r3, #10
 800109e:	4886      	ldr	r0, [pc, #536]	; (80012b8 <main+0x350>)
 80010a0:	f006 f987 	bl	80073b2 <HAL_UART_Transmit>
			}
			{
				char temp[]="Press s : voltage High  config\r\n";
 80010a4:	463b      	mov	r3, r7
 80010a6:	4a89      	ldr	r2, [pc, #548]	; (80012cc <main+0x364>)
 80010a8:	461c      	mov	r4, r3
 80010aa:	4615      	mov	r5, r2
 80010ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b4:	682b      	ldr	r3, [r5, #0]
 80010b6:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80010b8:	463b      	mov	r3, r7
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f890 	bl	80001e0 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	4639      	mov	r1, r7
 80010c6:	230a      	movs	r3, #10
 80010c8:	487b      	ldr	r0, [pc, #492]	; (80012b8 <main+0x350>)
 80010ca:	f006 f972 	bl	80073b2 <HAL_UART_Transmit>
			}
			{
				char temp[]="Press e : voltage low config\r\n";
 80010ce:	4b80      	ldr	r3, [pc, #512]	; (80012d0 <main+0x368>)
 80010d0:	f607 24b4 	addw	r4, r7, #2740	; 0xab4
 80010d4:	461d      	mov	r5, r3
 80010d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010de:	c407      	stmia	r4!, {r0, r1, r2}
 80010e0:	8023      	strh	r3, [r4, #0]
 80010e2:	3402      	adds	r4, #2
 80010e4:	0c1b      	lsrs	r3, r3, #16
 80010e6:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80010e8:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f877 	bl	80001e0 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f607 21b4 	addw	r1, r7, #2740	; 0xab4
 80010fa:	230a      	movs	r3, #10
 80010fc:	486e      	ldr	r0, [pc, #440]	; (80012b8 <main+0x350>)
 80010fe:	f006 f958 	bl	80073b2 <HAL_UART_Transmit>
			}

			{
				char temp[]="Press d : duty cycle config\r\n";
 8001102:	4b74      	ldr	r3, [pc, #464]	; (80012d4 <main+0x36c>)
 8001104:	f607 2494 	addw	r4, r7, #2708	; 0xa94
 8001108:	461d      	mov	r5, r3
 800110a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800110c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800110e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001112:	c407      	stmia	r4!, {r0, r1, r2}
 8001114:	8023      	strh	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001116:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f860 	bl	80001e0 <strlen>
 8001120:	4603      	mov	r3, r0
 8001122:	b29a      	uxth	r2, r3
 8001124:	f607 2194 	addw	r1, r7, #2708	; 0xa94
 8001128:	230a      	movs	r3, #10
 800112a:	4863      	ldr	r0, [pc, #396]	; (80012b8 <main+0x350>)
 800112c:	f006 f941 	bl	80073b2 <HAL_UART_Transmit>
			}
			{
				char temp[]="******************\r\n";
 8001130:	4b69      	ldr	r3, [pc, #420]	; (80012d8 <main+0x370>)
 8001132:	f607 247c 	addw	r4, r7, #2684	; 0xa7c
 8001136:	461d      	mov	r5, r3
 8001138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001140:	6020      	str	r0, [r4, #0]
 8001142:	3404      	adds	r4, #4
 8001144:	7021      	strb	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001146:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f848 	bl	80001e0 <strlen>
 8001150:	4603      	mov	r3, r0
 8001152:	b29a      	uxth	r2, r3
 8001154:	f607 217c 	addw	r1, r7, #2684	; 0xa7c
 8001158:	230a      	movs	r3, #10
 800115a:	4857      	ldr	r0, [pc, #348]	; (80012b8 <main+0x350>)
 800115c:	f006 f929 	bl	80073b2 <HAL_UART_Transmit>
			}
				State=State_Serect;
 8001160:	4b56      	ldr	r3, [pc, #344]	; (80012bc <main+0x354>)
 8001162:	2202      	movs	r2, #2
 8001164:	801a      	strh	r2, [r3, #0]
			break;
 8001166:	f002 b990 	b.w	800348a <main+0x2522>
			///////////////////////////////////////////////////////////////////////////////////////
			case State_Serect:
				switch(inputchar){
 800116a:	f9b7 3b06 	ldrsh.w	r3, [r7, #2822]	; 0xb06
 800116e:	3b61      	subs	r3, #97	; 0x61
 8001170:	2b16      	cmp	r3, #22
 8001172:	f202 8189 	bhi.w	8003488 <main+0x2520>
 8001176:	a201      	add	r2, pc, #4	; (adr r2, 800117c <main+0x214>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	080011d9 	.word	0x080011d9
 8001180:	08003489 	.word	0x08003489
 8001184:	08003489 	.word	0x08003489
 8001188:	08001361 	.word	0x08001361
 800118c:	080012ed 	.word	0x080012ed
 8001190:	08003489 	.word	0x08003489
 8001194:	08003489 	.word	0x08003489
 8001198:	08003489 	.word	0x08003489
 800119c:	08003489 	.word	0x08003489
 80011a0:	08003489 	.word	0x08003489
 80011a4:	08003489 	.word	0x08003489
 80011a8:	08003489 	.word	0x08003489
 80011ac:	08003489 	.word	0x08003489
 80011b0:	08003489 	.word	0x08003489
 80011b4:	08003489 	.word	0x08003489
 80011b8:	08003489 	.word	0x08003489
 80011bc:	08003489 	.word	0x08003489
 80011c0:	08003489 	.word	0x08003489
 80011c4:	0800123d 	.word	0x0800123d
 80011c8:	08003489 	.word	0x08003489
 80011cc:	08003489 	.word	0x08003489
 80011d0:	08003489 	.word	0x08003489
 80011d4:	080013c9 	.word	0x080013c9
				case'a':
					{
					char temp[]="Press p : Frequency+0.1\r\n";
 80011d8:	4b40      	ldr	r3, [pc, #256]	; (80012dc <main+0x374>)
 80011da:	f507 6426 	add.w	r4, r7, #2656	; 0xa60
 80011de:	461d      	mov	r5, r3
 80011e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011e8:	c403      	stmia	r4!, {r0, r1}
 80011ea:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80011ec:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7fe fff5 	bl	80001e0 <strlen>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 80011fe:	230a      	movs	r3, #10
 8001200:	482d      	ldr	r0, [pc, #180]	; (80012b8 <main+0x350>)
 8001202:	f006 f8d6 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : Frequency-0.1\r\n";
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <main+0x378>)
 8001208:	f607 2444 	addw	r4, r7, #2628	; 0xa44
 800120c:	461d      	mov	r5, r3
 800120e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001212:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001216:	c403      	stmia	r4!, {r0, r1}
 8001218:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800121a:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 800121e:	4618      	mov	r0, r3
 8001220:	f7fe ffde 	bl	80001e0 <strlen>
 8001224:	4603      	mov	r3, r0
 8001226:	b29a      	uxth	r2, r3
 8001228:	f607 2144 	addw	r1, r7, #2628	; 0xa44
 800122c:	230a      	movs	r3, #10
 800122e:	4822      	ldr	r0, [pc, #136]	; (80012b8 <main+0x350>)
 8001230:	f006 f8bf 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Frequency_config;break;
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <main+0x354>)
 8001236:	2203      	movs	r2, #3
 8001238:	801a      	strh	r2, [r3, #0]
 800123a:	e113      	b.n	8001464 <main+0x4fc>
				case's':
					{
					char temp[]="Press p : VoltageHigh+0.1\r\n";
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <main+0x37c>)
 800123e:	f607 2428 	addw	r4, r7, #2600	; 0xa28
 8001242:	461d      	mov	r5, r3
 8001244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001248:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800124c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001250:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8001254:	4618      	mov	r0, r3
 8001256:	f7fe ffc3 	bl	80001e0 <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	b29a      	uxth	r2, r3
 800125e:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 8001262:	230a      	movs	r3, #10
 8001264:	4814      	ldr	r0, [pc, #80]	; (80012b8 <main+0x350>)
 8001266:	f006 f8a4 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : VoltageHigh+0.1\r\n";
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <main+0x380>)
 800126c:	f607 240c 	addw	r4, r7, #2572	; 0xa0c
 8001270:	461d      	mov	r5, r3
 8001272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001276:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800127a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800127e:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 8001282:	4618      	mov	r0, r3
 8001284:	f7fe ffac 	bl	80001e0 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	b29a      	uxth	r2, r3
 800128c:	f607 210c 	addw	r1, r7, #2572	; 0xa0c
 8001290:	230a      	movs	r3, #10
 8001292:	4809      	ldr	r0, [pc, #36]	; (80012b8 <main+0x350>)
 8001294:	f006 f88d 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Voltage_config;break;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <main+0x354>)
 800129a:	2204      	movs	r2, #4
 800129c:	801a      	strh	r2, [r3, #0]
 800129e:	e0e1      	b.n	8001464 <main+0x4fc>
 80012a0:	200001d0 	.word	0x200001d0
 80012a4:	200002b8 	.word	0x200002b8
 80012a8:	20000094 	.word	0x20000094
 80012ac:	20000270 	.word	0x20000270
 80012b0:	40020000 	.word	0x40020000
 80012b4:	200000f8 	.word	0x200000f8
 80012b8:	20000360 	.word	0x20000360
 80012bc:	200000a2 	.word	0x200000a2
 80012c0:	080099e0 	.word	0x080099e0
 80012c4:	08009a0c 	.word	0x08009a0c
 80012c8:	08009a20 	.word	0x08009a20
 80012cc:	08009a40 	.word	0x08009a40
 80012d0:	08009a64 	.word	0x08009a64
 80012d4:	08009a84 	.word	0x08009a84
 80012d8:	08009aa4 	.word	0x08009aa4
 80012dc:	08009abc 	.word	0x08009abc
 80012e0:	08009ad8 	.word	0x08009ad8
 80012e4:	08009af4 	.word	0x08009af4
 80012e8:	08009b10 	.word	0x08009b10
				case'e':
					{
					char temp[]="Press p : VoltageLow+0.1\r\n";
 80012ec:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80012f0:	4aab      	ldr	r2, [pc, #684]	; (80015a0 <main+0x638>)
 80012f2:	461c      	mov	r4, r3
 80012f4:	4615      	mov	r5, r2
 80012f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012fe:	c403      	stmia	r4!, {r0, r1}
 8001300:	8022      	strh	r2, [r4, #0]
 8001302:	3402      	adds	r4, #2
 8001304:	0c13      	lsrs	r3, r2, #16
 8001306:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001308:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 800130c:	4618      	mov	r0, r3
 800130e:	f7fe ff67 	bl	80001e0 <strlen>
 8001312:	4603      	mov	r3, r0
 8001314:	b29a      	uxth	r2, r3
 8001316:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 800131a:	230a      	movs	r3, #10
 800131c:	48a1      	ldr	r0, [pc, #644]	; (80015a4 <main+0x63c>)
 800131e:	f006 f848 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : VoltageLow+0.1\r\n";
 8001322:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8001326:	4aa0      	ldr	r2, [pc, #640]	; (80015a8 <main+0x640>)
 8001328:	461c      	mov	r4, r3
 800132a:	4615      	mov	r5, r2
 800132c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001330:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001334:	c403      	stmia	r4!, {r0, r1}
 8001336:	8022      	strh	r2, [r4, #0]
 8001338:	3402      	adds	r4, #2
 800133a:	0c13      	lsrs	r3, r2, #16
 800133c:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800133e:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8001342:	4618      	mov	r0, r3
 8001344:	f7fe ff4c 	bl	80001e0 <strlen>
 8001348:	4603      	mov	r3, r0
 800134a:	b29a      	uxth	r2, r3
 800134c:	f607 11d4 	addw	r1, r7, #2516	; 0x9d4
 8001350:	230a      	movs	r3, #10
 8001352:	4894      	ldr	r0, [pc, #592]	; (80015a4 <main+0x63c>)
 8001354:	f006 f82d 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_VoltageLow_config;break;
 8001358:	4b94      	ldr	r3, [pc, #592]	; (80015ac <main+0x644>)
 800135a:	2205      	movs	r2, #5
 800135c:	801a      	strh	r2, [r3, #0]
 800135e:	e081      	b.n	8001464 <main+0x4fc>
				case'd':
					{
					char temp[]="Press p : Duty cycle+10\r\n";
 8001360:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8001364:	4a92      	ldr	r2, [pc, #584]	; (80015b0 <main+0x648>)
 8001366:	461c      	mov	r4, r3
 8001368:	4615      	mov	r5, r2
 800136a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800136c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001372:	c403      	stmia	r4!, {r0, r1}
 8001374:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001376:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 800137a:	4618      	mov	r0, r3
 800137c:	f7fe ff30 	bl	80001e0 <strlen>
 8001380:	4603      	mov	r3, r0
 8001382:	b29a      	uxth	r2, r3
 8001384:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 8001388:	230a      	movs	r3, #10
 800138a:	4886      	ldr	r0, [pc, #536]	; (80015a4 <main+0x63c>)
 800138c:	f006 f811 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : duty cycle-10\r\n";
 8001390:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8001394:	4a87      	ldr	r2, [pc, #540]	; (80015b4 <main+0x64c>)
 8001396:	461c      	mov	r4, r3
 8001398:	4615      	mov	r5, r2
 800139a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800139c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800139e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013a2:	c403      	stmia	r4!, {r0, r1}
 80013a4:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80013a6:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7fe ff18 	bl	80001e0 <strlen>
 80013b0:	4603      	mov	r3, r0
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	f607 119c 	addw	r1, r7, #2460	; 0x99c
 80013b8:	230a      	movs	r3, #10
 80013ba:	487a      	ldr	r0, [pc, #488]	; (80015a4 <main+0x63c>)
 80013bc:	f005 fff9 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Duty_cycle_config;break;
 80013c0:	4b7a      	ldr	r3, [pc, #488]	; (80015ac <main+0x644>)
 80013c2:	2206      	movs	r2, #6
 80013c4:	801a      	strh	r2, [r3, #0]
 80013c6:	e04d      	b.n	8001464 <main+0x4fc>
				case'w':
				{
				char temp[]="Press 1 : Sawtooth\r\n";
 80013c8:	f607 1384 	addw	r3, r7, #2436	; 0x984
 80013cc:	4a7a      	ldr	r2, [pc, #488]	; (80015b8 <main+0x650>)
 80013ce:	461c      	mov	r4, r3
 80013d0:	4615      	mov	r5, r2
 80013d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013da:	6020      	str	r0, [r4, #0]
 80013dc:	3404      	adds	r4, #4
 80013de:	7021      	strb	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80013e0:	f607 1384 	addw	r3, r7, #2436	; 0x984
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7fe fefb 	bl	80001e0 <strlen>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	f607 1184 	addw	r1, r7, #2436	; 0x984
 80013f2:	230a      	movs	r3, #10
 80013f4:	486b      	ldr	r0, [pc, #428]	; (80015a4 <main+0x63c>)
 80013f6:	f005 ffdc 	bl	80073b2 <HAL_UART_Transmit>
				}
				{
				char temp[]="Press 2 : Sine Wave\r\n";
 80013fa:	f607 136c 	addw	r3, r7, #2412	; 0x96c
 80013fe:	4a6f      	ldr	r2, [pc, #444]	; (80015bc <main+0x654>)
 8001400:	461c      	mov	r4, r3
 8001402:	4615      	mov	r5, r2
 8001404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001408:	e895 0003 	ldmia.w	r5, {r0, r1}
 800140c:	6020      	str	r0, [r4, #0]
 800140e:	3404      	adds	r4, #4
 8001410:	8021      	strh	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001412:	f607 136c 	addw	r3, r7, #2412	; 0x96c
 8001416:	4618      	mov	r0, r3
 8001418:	f7fe fee2 	bl	80001e0 <strlen>
 800141c:	4603      	mov	r3, r0
 800141e:	b29a      	uxth	r2, r3
 8001420:	f607 116c 	addw	r1, r7, #2412	; 0x96c
 8001424:	230a      	movs	r3, #10
 8001426:	485f      	ldr	r0, [pc, #380]	; (80015a4 <main+0x63c>)
 8001428:	f005 ffc3 	bl	80073b2 <HAL_UART_Transmit>
				{
				char temp[]="Press 3 : Square Wave\r\n";
 800142c:	f607 1354 	addw	r3, r7, #2388	; 0x954
 8001430:	4a63      	ldr	r2, [pc, #396]	; (80015c0 <main+0x658>)
 8001432:	461c      	mov	r4, r3
 8001434:	4615      	mov	r5, r2
 8001436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800143e:	e884 0003 	stmia.w	r4, {r0, r1}
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001442:	f607 1354 	addw	r3, r7, #2388	; 0x954
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe feca 	bl	80001e0 <strlen>
 800144c:	4603      	mov	r3, r0
 800144e:	b29a      	uxth	r2, r3
 8001450:	f607 1154 	addw	r1, r7, #2388	; 0x954
 8001454:	230a      	movs	r3, #10
 8001456:	4853      	ldr	r0, [pc, #332]	; (80015a4 <main+0x63c>)
 8001458:	f005 ffab 	bl	80073b2 <HAL_UART_Transmit>
				}
				}State=State_Wave_config;break;
 800145c:	4b53      	ldr	r3, [pc, #332]	; (80015ac <main+0x644>)
 800145e:	2207      	movs	r2, #7
 8001460:	801a      	strh	r2, [r3, #0]
 8001462:	bf00      	nop
				}break;
 8001464:	f002 b810 	b.w	8003488 <main+0x2520>
				/////////////////////////////////////////////////////////////////////////////////
			case State_Frequency_config:
				switch(inputchar)
 8001468:	f9b7 3b06 	ldrsh.w	r3, [r7, #2822]	; 0xb06
 800146c:	3b64      	subs	r3, #100	; 0x64
 800146e:	2b14      	cmp	r3, #20
 8001470:	f200 8248 	bhi.w	8001904 <main+0x99c>
 8001474:	a201      	add	r2, pc, #4	; (adr r2, 800147c <main+0x514>)
 8001476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147a:	bf00      	nop
 800147c:	080017b5 	.word	0x080017b5
 8001480:	08001741 	.word	0x08001741
 8001484:	08001905 	.word	0x08001905
 8001488:	08001905 	.word	0x08001905
 800148c:	08001905 	.word	0x08001905
 8001490:	08001905 	.word	0x08001905
 8001494:	08001905 	.word	0x08001905
 8001498:	08001905 	.word	0x08001905
 800149c:	08001905 	.word	0x08001905
 80014a0:	08001905 	.word	0x08001905
 80014a4:	080015d9 	.word	0x080015d9
 80014a8:	08001905 	.word	0x08001905
 80014ac:	080014d1 	.word	0x080014d1
 80014b0:	08001905 	.word	0x08001905
 80014b4:	08001905 	.word	0x08001905
 80014b8:	080016d9 	.word	0x080016d9
 80014bc:	08001905 	.word	0x08001905
 80014c0:	08001905 	.word	0x08001905
 80014c4:	08001905 	.word	0x08001905
 80014c8:	0800181d 	.word	0x0800181d
 80014cc:	080016a1 	.word	0x080016a1
				{
				case'p':
						if(Frequency>=0&&Frequency<10){
 80014d0:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <main+0x65c>)
 80014d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	f7ff fb19 	bl	8000b14 <__aeabi_dcmpge>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d04c      	beq.n	8001582 <main+0x61a>
 80014e8:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <main+0x65c>)
 80014ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <main+0x660>)
 80014f4:	f7ff fafa 	bl	8000aec <__aeabi_dcmplt>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d041      	beq.n	8001582 <main+0x61a>
						Frequency+=0.1;
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <main+0x65c>)
 8001500:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001504:	a324      	add	r3, pc, #144	; (adr r3, 8001598 <main+0x630>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7fe fec7 	bl	800029c <__adddf3>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	492c      	ldr	r1, [pc, #176]	; (80015c4 <main+0x65c>)
 8001514:	e9c1 2300 	strd	r2, r3, [r1]
						sprintf(ShowFrequency, "Frequency = %d.%d Hz\r\n",(uint8_t)Frequency,(uint8_t)(Frequency*10)%10);
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <main+0x65c>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fb33 	bl	8000b8c <__aeabi_d2uiz>
 8001526:	4603      	mov	r3, r0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	461c      	mov	r4, r3
 800152c:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <main+0x65c>)
 800152e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <main+0x660>)
 8001538:	f7ff f866 	bl	8000608 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f7ff fb22 	bl	8000b8c <__aeabi_d2uiz>
 8001548:	4603      	mov	r3, r0
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <main+0x664>)
 800154e:	fba3 1302 	umull	r1, r3, r3, r2
 8001552:	08d9      	lsrs	r1, r3, #3
 8001554:	460b      	mov	r3, r1
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	4622      	mov	r2, r4
 8001562:	491b      	ldr	r1, [pc, #108]	; (80015d0 <main+0x668>)
 8001564:	481b      	ldr	r0, [pc, #108]	; (80015d4 <main+0x66c>)
 8001566:	f006 fd7b 	bl	8008060 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)ShowFrequency, strlen(ShowFrequency),1000);
 800156a:	481a      	ldr	r0, [pc, #104]	; (80015d4 <main+0x66c>)
 800156c:	f7fe fe38 	bl	80001e0 <strlen>
 8001570:	4603      	mov	r3, r0
 8001572:	b29a      	uxth	r2, r3
 8001574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001578:	4916      	ldr	r1, [pc, #88]	; (80015d4 <main+0x66c>)
 800157a:	480a      	ldr	r0, [pc, #40]	; (80015a4 <main+0x63c>)
 800157c:	f005 ff19 	bl	80073b2 <HAL_UART_Transmit>
						if(Frequency>=0&&Frequency<10){
 8001580:	e006      	b.n	8001590 <main+0x628>
						}
						else{
							Frequency=0;
 8001582:	4910      	ldr	r1, [pc, #64]	; (80015c4 <main+0x65c>)
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	e9c1 2300 	strd	r2, r3, [r1]
						}

					State=State_Frequency_config;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <main+0x644>)
 8001592:	2203      	movs	r2, #3
 8001594:	801a      	strh	r2, [r3, #0]
					break;
 8001596:	e1d0      	b.n	800193a <main+0x9d2>
 8001598:	9999999a 	.word	0x9999999a
 800159c:	3fb99999 	.word	0x3fb99999
 80015a0:	08009b2c 	.word	0x08009b2c
 80015a4:	20000360 	.word	0x20000360
 80015a8:	08009b48 	.word	0x08009b48
 80015ac:	200000a2 	.word	0x200000a2
 80015b0:	08009b64 	.word	0x08009b64
 80015b4:	08009b80 	.word	0x08009b80
 80015b8:	08009b9c 	.word	0x08009b9c
 80015bc:	08009bb4 	.word	0x08009bb4
 80015c0:	08009bcc 	.word	0x08009bcc
 80015c4:	200000a8 	.word	0x200000a8
 80015c8:	40240000 	.word	0x40240000
 80015cc:	cccccccd 	.word	0xcccccccd
 80015d0:	08009948 	.word	0x08009948
 80015d4:	20000128 	.word	0x20000128
				case'n':
						if(Frequency>=0&&Frequency<10){
 80015d8:	4bb9      	ldr	r3, [pc, #740]	; (80018c0 <main+0x958>)
 80015da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	f7ff fa95 	bl	8000b14 <__aeabi_dcmpge>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d04c      	beq.n	800168a <main+0x722>
 80015f0:	4bb3      	ldr	r3, [pc, #716]	; (80018c0 <main+0x958>)
 80015f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4bb2      	ldr	r3, [pc, #712]	; (80018c4 <main+0x95c>)
 80015fc:	f7ff fa76 	bl	8000aec <__aeabi_dcmplt>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d041      	beq.n	800168a <main+0x722>
						Frequency-=0.1;
 8001606:	4bae      	ldr	r3, [pc, #696]	; (80018c0 <main+0x958>)
 8001608:	e9d3 0100 	ldrd	r0, r1, [r3]
 800160c:	a3aa      	add	r3, pc, #680	; (adr r3, 80018b8 <main+0x950>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7fe fe41 	bl	8000298 <__aeabi_dsub>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	49a9      	ldr	r1, [pc, #676]	; (80018c0 <main+0x958>)
 800161c:	e9c1 2300 	strd	r2, r3, [r1]
						sprintf(ShowFrequency, "Frequency = %d.%d Hz\r\n",(uint8_t)Frequency,(uint8_t)(Frequency*10)%10);
 8001620:	4ba7      	ldr	r3, [pc, #668]	; (80018c0 <main+0x958>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff faaf 	bl	8000b8c <__aeabi_d2uiz>
 800162e:	4603      	mov	r3, r0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	461c      	mov	r4, r3
 8001634:	4ba2      	ldr	r3, [pc, #648]	; (80018c0 <main+0x958>)
 8001636:	e9d3 0100 	ldrd	r0, r1, [r3]
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4ba1      	ldr	r3, [pc, #644]	; (80018c4 <main+0x95c>)
 8001640:	f7fe ffe2 	bl	8000608 <__aeabi_dmul>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	f7ff fa9e 	bl	8000b8c <__aeabi_d2uiz>
 8001650:	4603      	mov	r3, r0
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b9c      	ldr	r3, [pc, #624]	; (80018c8 <main+0x960>)
 8001656:	fba3 1302 	umull	r1, r3, r3, r2
 800165a:	08d9      	lsrs	r1, r3, #3
 800165c:	460b      	mov	r3, r1
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	4622      	mov	r2, r4
 800166a:	4998      	ldr	r1, [pc, #608]	; (80018cc <main+0x964>)
 800166c:	4898      	ldr	r0, [pc, #608]	; (80018d0 <main+0x968>)
 800166e:	f006 fcf7 	bl	8008060 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)ShowFrequency, strlen(ShowFrequency),1000);
 8001672:	4897      	ldr	r0, [pc, #604]	; (80018d0 <main+0x968>)
 8001674:	f7fe fdb4 	bl	80001e0 <strlen>
 8001678:	4603      	mov	r3, r0
 800167a:	b29a      	uxth	r2, r3
 800167c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001680:	4993      	ldr	r1, [pc, #588]	; (80018d0 <main+0x968>)
 8001682:	4894      	ldr	r0, [pc, #592]	; (80018d4 <main+0x96c>)
 8001684:	f005 fe95 	bl	80073b2 <HAL_UART_Transmit>
						if(Frequency>=0&&Frequency<10){
 8001688:	e006      	b.n	8001698 <main+0x730>
						}
						else{
							Frequency=0;
 800168a:	498d      	ldr	r1, [pc, #564]	; (80018c0 <main+0x958>)
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	e9c1 2300 	strd	r2, r3, [r1]
						}

					State=State_Frequency_config;
 8001698:	4b8f      	ldr	r3, [pc, #572]	; (80018d8 <main+0x970>)
 800169a:	2203      	movs	r2, #3
 800169c:	801a      	strh	r2, [r3, #0]
					break;
 800169e:	e14c      	b.n	800193a <main+0x9d2>
				case 'x':
					//back
					{char temp[]="BACK TO MENU\r\n";
 80016a0:	f607 1344 	addw	r3, r7, #2372	; 0x944
 80016a4:	4a8d      	ldr	r2, [pc, #564]	; (80018dc <main+0x974>)
 80016a6:	461c      	mov	r4, r3
 80016a8:	4613      	mov	r3, r2
 80016aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ac:	c407      	stmia	r4!, {r0, r1, r2}
 80016ae:	8023      	strh	r3, [r4, #0]
 80016b0:	3402      	adds	r4, #2
 80016b2:	0c1b      	lsrs	r3, r3, #16
 80016b4:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);}
 80016b6:	f607 1344 	addw	r3, r7, #2372	; 0x944
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fd90 	bl	80001e0 <strlen>
 80016c0:	4603      	mov	r3, r0
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	f607 1144 	addw	r1, r7, #2372	; 0x944
 80016c8:	230a      	movs	r3, #10
 80016ca:	4882      	ldr	r0, [pc, #520]	; (80018d4 <main+0x96c>)
 80016cc:	f005 fe71 	bl	80073b2 <HAL_UART_Transmit>
					State=State_menu;
 80016d0:	4b81      	ldr	r3, [pc, #516]	; (80018d8 <main+0x970>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	801a      	strh	r2, [r3, #0]
					break;
 80016d6:	e130      	b.n	800193a <main+0x9d2>
				case's':
					{
					char temp[]="Press p : Voltage+0.1\r\n";
 80016d8:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 80016dc:	4a80      	ldr	r2, [pc, #512]	; (80018e0 <main+0x978>)
 80016de:	461c      	mov	r4, r3
 80016e0:	4615      	mov	r5, r2
 80016e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016ea:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80016ee:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fd74 	bl	80001e0 <strlen>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	f607 112c 	addw	r1, r7, #2348	; 0x92c
 8001700:	230a      	movs	r3, #10
 8001702:	4874      	ldr	r0, [pc, #464]	; (80018d4 <main+0x96c>)
 8001704:	f005 fe55 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : Voltage+0.1\r\n";
 8001708:	f607 1314 	addw	r3, r7, #2324	; 0x914
 800170c:	4a75      	ldr	r2, [pc, #468]	; (80018e4 <main+0x97c>)
 800170e:	461c      	mov	r4, r3
 8001710:	4615      	mov	r5, r2
 8001712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001716:	e895 0003 	ldmia.w	r5, {r0, r1}
 800171a:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800171e:	f607 1314 	addw	r3, r7, #2324	; 0x914
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fd5c 	bl	80001e0 <strlen>
 8001728:	4603      	mov	r3, r0
 800172a:	b29a      	uxth	r2, r3
 800172c:	f607 1114 	addw	r1, r7, #2324	; 0x914
 8001730:	230a      	movs	r3, #10
 8001732:	4868      	ldr	r0, [pc, #416]	; (80018d4 <main+0x96c>)
 8001734:	f005 fe3d 	bl	80073b2 <HAL_UART_Transmit>
					}
					State=State_Voltage_config;break;
 8001738:	4b67      	ldr	r3, [pc, #412]	; (80018d8 <main+0x970>)
 800173a:	2204      	movs	r2, #4
 800173c:	801a      	strh	r2, [r3, #0]
 800173e:	e0fc      	b.n	800193a <main+0x9d2>
				case'e':
					{
					char temp[]="Press p : VoltageLow+0.1\r\n";
 8001740:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001744:	4a68      	ldr	r2, [pc, #416]	; (80018e8 <main+0x980>)
 8001746:	461c      	mov	r4, r3
 8001748:	4615      	mov	r5, r2
 800174a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800174c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800174e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001752:	c403      	stmia	r4!, {r0, r1}
 8001754:	8022      	strh	r2, [r4, #0]
 8001756:	3402      	adds	r4, #2
 8001758:	0c13      	lsrs	r3, r2, #16
 800175a:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800175c:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fd3d 	bl	80001e0 <strlen>
 8001766:	4603      	mov	r3, r0
 8001768:	b29a      	uxth	r2, r3
 800176a:	f607 01f8 	addw	r1, r7, #2296	; 0x8f8
 800176e:	230a      	movs	r3, #10
 8001770:	4858      	ldr	r0, [pc, #352]	; (80018d4 <main+0x96c>)
 8001772:	f005 fe1e 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : VoltageLow+0.1\r\n";
 8001776:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 800177a:	4a5c      	ldr	r2, [pc, #368]	; (80018ec <main+0x984>)
 800177c:	461c      	mov	r4, r3
 800177e:	4615      	mov	r5, r2
 8001780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001784:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001788:	c403      	stmia	r4!, {r0, r1}
 800178a:	8022      	strh	r2, [r4, #0]
 800178c:	3402      	adds	r4, #2
 800178e:	0c13      	lsrs	r3, r2, #16
 8001790:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001792:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fd22 	bl	80001e0 <strlen>
 800179c:	4603      	mov	r3, r0
 800179e:	b29a      	uxth	r2, r3
 80017a0:	f607 01dc 	addw	r1, r7, #2268	; 0x8dc
 80017a4:	230a      	movs	r3, #10
 80017a6:	484b      	ldr	r0, [pc, #300]	; (80018d4 <main+0x96c>)
 80017a8:	f005 fe03 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_VoltageLow_config;break;
 80017ac:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <main+0x970>)
 80017ae:	2205      	movs	r2, #5
 80017b0:	801a      	strh	r2, [r3, #0]
 80017b2:	e0c2      	b.n	800193a <main+0x9d2>
				case'd':
					{
					char temp[]="Press p : Duty cycle+10\r\n";
 80017b4:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 80017b8:	4a4d      	ldr	r2, [pc, #308]	; (80018f0 <main+0x988>)
 80017ba:	461c      	mov	r4, r3
 80017bc:	4615      	mov	r5, r2
 80017be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017c6:	c403      	stmia	r4!, {r0, r1}
 80017c8:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80017ca:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fd06 	bl	80001e0 <strlen>
 80017d4:	4603      	mov	r3, r0
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	f507 610c 	add.w	r1, r7, #2240	; 0x8c0
 80017dc:	230a      	movs	r3, #10
 80017de:	483d      	ldr	r0, [pc, #244]	; (80018d4 <main+0x96c>)
 80017e0:	f005 fde7 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : duty cycle-10\r\n";
 80017e4:	f607 03a4 	addw	r3, r7, #2212	; 0x8a4
 80017e8:	4a42      	ldr	r2, [pc, #264]	; (80018f4 <main+0x98c>)
 80017ea:	461c      	mov	r4, r3
 80017ec:	4615      	mov	r5, r2
 80017ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017f6:	c403      	stmia	r4!, {r0, r1}
 80017f8:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80017fa:	f607 03a4 	addw	r3, r7, #2212	; 0x8a4
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fcee 	bl	80001e0 <strlen>
 8001804:	4603      	mov	r3, r0
 8001806:	b29a      	uxth	r2, r3
 8001808:	f607 01a4 	addw	r1, r7, #2212	; 0x8a4
 800180c:	230a      	movs	r3, #10
 800180e:	4831      	ldr	r0, [pc, #196]	; (80018d4 <main+0x96c>)
 8001810:	f005 fdcf 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Duty_cycle_config;
 8001814:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <main+0x970>)
 8001816:	2206      	movs	r2, #6
 8001818:	801a      	strh	r2, [r3, #0]
					break;
 800181a:	e08e      	b.n	800193a <main+0x9d2>

				case'w':
				{
				char temp[]="Press 1 : Sawtooth\r\n";
 800181c:	f607 038c 	addw	r3, r7, #2188	; 0x88c
 8001820:	4a35      	ldr	r2, [pc, #212]	; (80018f8 <main+0x990>)
 8001822:	461c      	mov	r4, r3
 8001824:	4615      	mov	r5, r2
 8001826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800182a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800182e:	6020      	str	r0, [r4, #0]
 8001830:	3404      	adds	r4, #4
 8001832:	7021      	strb	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001834:	f607 038c 	addw	r3, r7, #2188	; 0x88c
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fcd1 	bl	80001e0 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	f607 018c 	addw	r1, r7, #2188	; 0x88c
 8001846:	230a      	movs	r3, #10
 8001848:	4822      	ldr	r0, [pc, #136]	; (80018d4 <main+0x96c>)
 800184a:	f005 fdb2 	bl	80073b2 <HAL_UART_Transmit>
				}
				{
				char temp[]="Press 2 : Sine Wave\r\n";
 800184e:	f607 0374 	addw	r3, r7, #2164	; 0x874
 8001852:	4a2a      	ldr	r2, [pc, #168]	; (80018fc <main+0x994>)
 8001854:	461c      	mov	r4, r3
 8001856:	4615      	mov	r5, r2
 8001858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800185a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800185c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001860:	6020      	str	r0, [r4, #0]
 8001862:	3404      	adds	r4, #4
 8001864:	8021      	strh	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001866:	f607 0374 	addw	r3, r7, #2164	; 0x874
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fcb8 	bl	80001e0 <strlen>
 8001870:	4603      	mov	r3, r0
 8001872:	b29a      	uxth	r2, r3
 8001874:	f607 0174 	addw	r1, r7, #2164	; 0x874
 8001878:	230a      	movs	r3, #10
 800187a:	4816      	ldr	r0, [pc, #88]	; (80018d4 <main+0x96c>)
 800187c:	f005 fd99 	bl	80073b2 <HAL_UART_Transmit>
				{
				char temp[]="Press 3 : Square Wave\r\n";
 8001880:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 8001884:	4a1e      	ldr	r2, [pc, #120]	; (8001900 <main+0x998>)
 8001886:	461c      	mov	r4, r3
 8001888:	4615      	mov	r5, r2
 800188a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800188c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800188e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001892:	e884 0003 	stmia.w	r4, {r0, r1}
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001896:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fca0 	bl	80001e0 <strlen>
 80018a0:	4603      	mov	r3, r0
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	f607 015c 	addw	r1, r7, #2140	; 0x85c
 80018a8:	230a      	movs	r3, #10
 80018aa:	480a      	ldr	r0, [pc, #40]	; (80018d4 <main+0x96c>)
 80018ac:	f005 fd81 	bl	80073b2 <HAL_UART_Transmit>
				}
				}State=State_Wave_config;
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <main+0x970>)
 80018b2:	2207      	movs	r2, #7
 80018b4:	801a      	strh	r2, [r3, #0]
				break;
 80018b6:	e040      	b.n	800193a <main+0x9d2>
 80018b8:	9999999a 	.word	0x9999999a
 80018bc:	3fb99999 	.word	0x3fb99999
 80018c0:	200000a8 	.word	0x200000a8
 80018c4:	40240000 	.word	0x40240000
 80018c8:	cccccccd 	.word	0xcccccccd
 80018cc:	08009948 	.word	0x08009948
 80018d0:	20000128 	.word	0x20000128
 80018d4:	20000360 	.word	0x20000360
 80018d8:	200000a2 	.word	0x200000a2
 80018dc:	08009be4 	.word	0x08009be4
 80018e0:	08009bf4 	.word	0x08009bf4
 80018e4:	08009c0c 	.word	0x08009c0c
 80018e8:	08009b2c 	.word	0x08009b2c
 80018ec:	08009b48 	.word	0x08009b48
 80018f0:	08009b64 	.word	0x08009b64
 80018f4:	08009b80 	.word	0x08009b80
 80018f8:	08009b9c 	.word	0x08009b9c
 80018fc:	08009bb4 	.word	0x08009bb4
 8001900:	08009bcc 	.word	0x08009bcc

				default:
				{
					char temp[]="Wrong press again\r\n";
 8001904:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8001908:	4ab5      	ldr	r2, [pc, #724]	; (8001be0 <main+0xc78>)
 800190a:	461c      	mov	r4, r3
 800190c:	4615      	mov	r5, r2
 800190e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001912:	682b      	ldr	r3, [r5, #0]
 8001914:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001916:	f607 0348 	addw	r3, r7, #2120	; 0x848
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fc60 	bl	80001e0 <strlen>
 8001920:	4603      	mov	r3, r0
 8001922:	b29a      	uxth	r2, r3
 8001924:	f607 0148 	addw	r1, r7, #2120	; 0x848
 8001928:	230a      	movs	r3, #10
 800192a:	48ae      	ldr	r0, [pc, #696]	; (8001be4 <main+0xc7c>)
 800192c:	f005 fd41 	bl	80073b2 <HAL_UART_Transmit>
				}State=State_Frequency_config;
 8001930:	4bad      	ldr	r3, [pc, #692]	; (8001be8 <main+0xc80>)
 8001932:	2203      	movs	r2, #3
 8001934:	801a      	strh	r2, [r3, #0]
				}break;
 8001936:	f001 bda8 	b.w	800348a <main+0x2522>
 800193a:	f001 bda6 	b.w	800348a <main+0x2522>
				////////////////////////////////////////////////////////////////////////////////
			case State_Voltage_config:
				switch(inputchar)
 800193e:	f9b7 3b06 	ldrsh.w	r3, [r7, #2822]	; 0xb06
 8001942:	3b61      	subs	r3, #97	; 0x61
 8001944:	2b17      	cmp	r3, #23
 8001946:	f200 81e9 	bhi.w	8001d1c <main+0xdb4>
 800194a:	a201      	add	r2, pc, #4	; (adr r2, 8001950 <main+0x9e8>)
 800194c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001950:	08001afd 	.word	0x08001afd
 8001954:	08001d1d 	.word	0x08001d1d
 8001958:	08001d1d 	.word	0x08001d1d
 800195c:	08001c19 	.word	0x08001c19
 8001960:	08001b65 	.word	0x08001b65
 8001964:	08001d1d 	.word	0x08001d1d
 8001968:	08001d1d 	.word	0x08001d1d
 800196c:	08001d1d 	.word	0x08001d1d
 8001970:	08001d1d 	.word	0x08001d1d
 8001974:	08001d1d 	.word	0x08001d1d
 8001978:	08001d1d 	.word	0x08001d1d
 800197c:	08001d1d 	.word	0x08001d1d
 8001980:	08001d1d 	.word	0x08001d1d
 8001984:	08001a3b 	.word	0x08001a3b
 8001988:	08001d1d 	.word	0x08001d1d
 800198c:	080019b1 	.word	0x080019b1
 8001990:	08001d1d 	.word	0x08001d1d
 8001994:	08001d1d 	.word	0x08001d1d
 8001998:	08001d1d 	.word	0x08001d1d
 800199c:	08001d1d 	.word	0x08001d1d
 80019a0:	08001d1d 	.word	0x08001d1d
 80019a4:	08001d1d 	.word	0x08001d1d
 80019a8:	08001c81 	.word	0x08001c81
 80019ac:	08001ac5 	.word	0x08001ac5
				{
				case'p':
					Voltage+=0.1;
 80019b0:	4b8e      	ldr	r3, [pc, #568]	; (8001bec <main+0xc84>)
 80019b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019b6:	a388      	add	r3, pc, #544	; (adr r3, 8001bd8 <main+0xc70>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe fc6e 	bl	800029c <__adddf3>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4989      	ldr	r1, [pc, #548]	; (8001bec <main+0xc84>)
 80019c6:	e9c1 2300 	strd	r2, r3, [r1]
					sprintf(ShowVoltage, "Voltage = %d.%d V\r\n",(uint8_t)Voltage,(uint8_t)(Voltage*10)%10);
 80019ca:	4b88      	ldr	r3, [pc, #544]	; (8001bec <main+0xc84>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f8da 	bl	8000b8c <__aeabi_d2uiz>
 80019d8:	4603      	mov	r3, r0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	461c      	mov	r4, r3
 80019de:	4b83      	ldr	r3, [pc, #524]	; (8001bec <main+0xc84>)
 80019e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	4b81      	ldr	r3, [pc, #516]	; (8001bf0 <main+0xc88>)
 80019ea:	f7fe fe0d 	bl	8000608 <__aeabi_dmul>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7ff f8c9 	bl	8000b8c <__aeabi_d2uiz>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4b7d      	ldr	r3, [pc, #500]	; (8001bf4 <main+0xc8c>)
 8001a00:	fba3 1302 	umull	r1, r3, r3, r2
 8001a04:	08d9      	lsrs	r1, r3, #3
 8001a06:	460b      	mov	r3, r1
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	4622      	mov	r2, r4
 8001a14:	4978      	ldr	r1, [pc, #480]	; (8001bf8 <main+0xc90>)
 8001a16:	4879      	ldr	r0, [pc, #484]	; (8001bfc <main+0xc94>)
 8001a18:	f006 fb22 	bl	8008060 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)ShowVoltage, strlen(ShowVoltage),1000);
 8001a1c:	4877      	ldr	r0, [pc, #476]	; (8001bfc <main+0xc94>)
 8001a1e:	f7fe fbdf 	bl	80001e0 <strlen>
 8001a22:	4603      	mov	r3, r0
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2a:	4974      	ldr	r1, [pc, #464]	; (8001bfc <main+0xc94>)
 8001a2c:	486d      	ldr	r0, [pc, #436]	; (8001be4 <main+0xc7c>)
 8001a2e:	f005 fcc0 	bl	80073b2 <HAL_UART_Transmit>
					State=State_Voltage_config;
 8001a32:	4b6d      	ldr	r3, [pc, #436]	; (8001be8 <main+0xc80>)
 8001a34:	2204      	movs	r2, #4
 8001a36:	801a      	strh	r2, [r3, #0]
					break;
 8001a38:	e18b      	b.n	8001d52 <main+0xdea>
				case'n':
					Voltage-=0.1;
 8001a3a:	4b6c      	ldr	r3, [pc, #432]	; (8001bec <main+0xc84>)
 8001a3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a40:	a365      	add	r3, pc, #404	; (adr r3, 8001bd8 <main+0xc70>)
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	f7fe fc27 	bl	8000298 <__aeabi_dsub>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4967      	ldr	r1, [pc, #412]	; (8001bec <main+0xc84>)
 8001a50:	e9c1 2300 	strd	r2, r3, [r1]
					sprintf(ShowVoltage, "Voltage= %d.%d V\r\n",(uint8_t)Voltage,(uint8_t)(Voltage*10)%10);
 8001a54:	4b65      	ldr	r3, [pc, #404]	; (8001bec <main+0xc84>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f7ff f895 	bl	8000b8c <__aeabi_d2uiz>
 8001a62:	4603      	mov	r3, r0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461c      	mov	r4, r3
 8001a68:	4b60      	ldr	r3, [pc, #384]	; (8001bec <main+0xc84>)
 8001a6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	4b5f      	ldr	r3, [pc, #380]	; (8001bf0 <main+0xc88>)
 8001a74:	f7fe fdc8 	bl	8000608 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff f884 	bl	8000b8c <__aeabi_d2uiz>
 8001a84:	4603      	mov	r3, r0
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	4b5a      	ldr	r3, [pc, #360]	; (8001bf4 <main+0xc8c>)
 8001a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8001a8e:	08d9      	lsrs	r1, r3, #3
 8001a90:	460b      	mov	r3, r1
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	4622      	mov	r2, r4
 8001a9e:	4958      	ldr	r1, [pc, #352]	; (8001c00 <main+0xc98>)
 8001aa0:	4856      	ldr	r0, [pc, #344]	; (8001bfc <main+0xc94>)
 8001aa2:	f006 fadd 	bl	8008060 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)ShowVoltage, strlen(ShowVoltage),1000);
 8001aa6:	4855      	ldr	r0, [pc, #340]	; (8001bfc <main+0xc94>)
 8001aa8:	f7fe fb9a 	bl	80001e0 <strlen>
 8001aac:	4603      	mov	r3, r0
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab4:	4951      	ldr	r1, [pc, #324]	; (8001bfc <main+0xc94>)
 8001ab6:	484b      	ldr	r0, [pc, #300]	; (8001be4 <main+0xc7c>)
 8001ab8:	f005 fc7b 	bl	80073b2 <HAL_UART_Transmit>
					State=State_Voltage_config;
 8001abc:	4b4a      	ldr	r3, [pc, #296]	; (8001be8 <main+0xc80>)
 8001abe:	2204      	movs	r2, #4
 8001ac0:	801a      	strh	r2, [r3, #0]
					break;
 8001ac2:	e146      	b.n	8001d52 <main+0xdea>
				case 'x':
					//back
					{char temp[]="BACK TO MENU\r\n";
 8001ac4:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8001ac8:	4a4e      	ldr	r2, [pc, #312]	; (8001c04 <main+0xc9c>)
 8001aca:	461c      	mov	r4, r3
 8001acc:	4613      	mov	r3, r2
 8001ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ad0:	c407      	stmia	r4!, {r0, r1, r2}
 8001ad2:	8023      	strh	r3, [r4, #0]
 8001ad4:	3402      	adds	r4, #2
 8001ad6:	0c1b      	lsrs	r3, r3, #16
 8001ad8:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);}
 8001ada:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fb7e 	bl	80001e0 <strlen>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	f607 0138 	addw	r1, r7, #2104	; 0x838
 8001aec:	230a      	movs	r3, #10
 8001aee:	483d      	ldr	r0, [pc, #244]	; (8001be4 <main+0xc7c>)
 8001af0:	f005 fc5f 	bl	80073b2 <HAL_UART_Transmit>
					State=State_menu;
 8001af4:	4b3c      	ldr	r3, [pc, #240]	; (8001be8 <main+0xc80>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	801a      	strh	r2, [r3, #0]
					break;
 8001afa:	e12a      	b.n	8001d52 <main+0xdea>
				case'a':
					{
					char temp[]="Press p : Frequency+0.1\r\n";
 8001afc:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 8001b00:	4a41      	ldr	r2, [pc, #260]	; (8001c08 <main+0xca0>)
 8001b02:	461c      	mov	r4, r3
 8001b04:	4615      	mov	r5, r2
 8001b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b0e:	c403      	stmia	r4!, {r0, r1}
 8001b10:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001b12:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fb62 	bl	80001e0 <strlen>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	f607 011c 	addw	r1, r7, #2076	; 0x81c
 8001b24:	230a      	movs	r3, #10
 8001b26:	482f      	ldr	r0, [pc, #188]	; (8001be4 <main+0xc7c>)
 8001b28:	f005 fc43 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : Frequency-0.1\r\n";
 8001b2c:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8001b30:	4a36      	ldr	r2, [pc, #216]	; (8001c0c <main+0xca4>)
 8001b32:	461c      	mov	r4, r3
 8001b34:	4615      	mov	r5, r2
 8001b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b3e:	c403      	stmia	r4!, {r0, r1}
 8001b40:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001b42:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fb4a 	bl	80001e0 <strlen>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	f507 6100 	add.w	r1, r7, #2048	; 0x800
 8001b54:	230a      	movs	r3, #10
 8001b56:	4823      	ldr	r0, [pc, #140]	; (8001be4 <main+0xc7c>)
 8001b58:	f005 fc2b 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Frequency_config;break;
 8001b5c:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <main+0xc80>)
 8001b5e:	2203      	movs	r2, #3
 8001b60:	801a      	strh	r2, [r3, #0]
 8001b62:	e0f6      	b.n	8001d52 <main+0xdea>
				case'e':
					{
					char temp[]="Press p : VoltageLow+0.1\r\n";
 8001b64:	f207 73e4 	addw	r3, r7, #2020	; 0x7e4
 8001b68:	4a29      	ldr	r2, [pc, #164]	; (8001c10 <main+0xca8>)
 8001b6a:	461c      	mov	r4, r3
 8001b6c:	4615      	mov	r5, r2
 8001b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b76:	c403      	stmia	r4!, {r0, r1}
 8001b78:	8022      	strh	r2, [r4, #0]
 8001b7a:	3402      	adds	r4, #2
 8001b7c:	0c13      	lsrs	r3, r2, #16
 8001b7e:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001b80:	f207 73e4 	addw	r3, r7, #2020	; 0x7e4
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fb2b 	bl	80001e0 <strlen>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	f207 71e4 	addw	r1, r7, #2020	; 0x7e4
 8001b92:	230a      	movs	r3, #10
 8001b94:	4813      	ldr	r0, [pc, #76]	; (8001be4 <main+0xc7c>)
 8001b96:	f005 fc0c 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : VoltageLow+0.1\r\n";
 8001b9a:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 8001b9e:	4a1d      	ldr	r2, [pc, #116]	; (8001c14 <main+0xcac>)
 8001ba0:	461c      	mov	r4, r3
 8001ba2:	4615      	mov	r5, r2
 8001ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bac:	c403      	stmia	r4!, {r0, r1}
 8001bae:	8022      	strh	r2, [r4, #0]
 8001bb0:	3402      	adds	r4, #2
 8001bb2:	0c13      	lsrs	r3, r2, #16
 8001bb4:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001bb6:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fb10 	bl	80001e0 <strlen>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 8001bc8:	230a      	movs	r3, #10
 8001bca:	4806      	ldr	r0, [pc, #24]	; (8001be4 <main+0xc7c>)
 8001bcc:	f005 fbf1 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_VoltageLow_config;break;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <main+0xc80>)
 8001bd2:	2205      	movs	r2, #5
 8001bd4:	801a      	strh	r2, [r3, #0]
 8001bd6:	e0bc      	b.n	8001d52 <main+0xdea>
 8001bd8:	9999999a 	.word	0x9999999a
 8001bdc:	3fb99999 	.word	0x3fb99999
 8001be0:	08009c24 	.word	0x08009c24
 8001be4:	20000360 	.word	0x20000360
 8001be8:	200000a2 	.word	0x200000a2
 8001bec:	200000b0 	.word	0x200000b0
 8001bf0:	40240000 	.word	0x40240000
 8001bf4:	cccccccd 	.word	0xcccccccd
 8001bf8:	08009960 	.word	0x08009960
 8001bfc:	20000158 	.word	0x20000158
 8001c00:	08009974 	.word	0x08009974
 8001c04:	08009be4 	.word	0x08009be4
 8001c08:	08009abc 	.word	0x08009abc
 8001c0c:	08009ad8 	.word	0x08009ad8
 8001c10:	08009b2c 	.word	0x08009b2c
 8001c14:	08009b48 	.word	0x08009b48

				case'd':
				{
					char temp[]="Press p : Duty cycle+10\r\n";
 8001c18:	f207 73ac 	addw	r3, r7, #1964	; 0x7ac
 8001c1c:	4ac0      	ldr	r2, [pc, #768]	; (8001f20 <main+0xfb8>)
 8001c1e:	461c      	mov	r4, r3
 8001c20:	4615      	mov	r5, r2
 8001c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c2a:	c403      	stmia	r4!, {r0, r1}
 8001c2c:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001c2e:	f207 73ac 	addw	r3, r7, #1964	; 0x7ac
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fad4 	bl	80001e0 <strlen>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	f207 71ac 	addw	r1, r7, #1964	; 0x7ac
 8001c40:	230a      	movs	r3, #10
 8001c42:	48b8      	ldr	r0, [pc, #736]	; (8001f24 <main+0xfbc>)
 8001c44:	f005 fbb5 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : duty cycle-10\r\n";
 8001c48:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8001c4c:	4ab6      	ldr	r2, [pc, #728]	; (8001f28 <main+0xfc0>)
 8001c4e:	461c      	mov	r4, r3
 8001c50:	4615      	mov	r5, r2
 8001c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c5a:	c403      	stmia	r4!, {r0, r1}
 8001c5c:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001c5e:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fabc 	bl	80001e0 <strlen>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 8001c70:	230a      	movs	r3, #10
 8001c72:	48ac      	ldr	r0, [pc, #688]	; (8001f24 <main+0xfbc>)
 8001c74:	f005 fb9d 	bl	80073b2 <HAL_UART_Transmit>
					}
					State=State_Duty_cycle_config;break;
 8001c78:	4bac      	ldr	r3, [pc, #688]	; (8001f2c <main+0xfc4>)
 8001c7a:	2206      	movs	r2, #6
 8001c7c:	801a      	strh	r2, [r3, #0]
 8001c7e:	e068      	b.n	8001d52 <main+0xdea>
				case'w':
					{
					char temp[]="Press 1 : Sawtooth\r\n";
 8001c80:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 8001c84:	4aaa      	ldr	r2, [pc, #680]	; (8001f30 <main+0xfc8>)
 8001c86:	461c      	mov	r4, r3
 8001c88:	4615      	mov	r5, r2
 8001c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c92:	6020      	str	r0, [r4, #0]
 8001c94:	3404      	adds	r4, #4
 8001c96:	7021      	strb	r1, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001c98:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fa9f 	bl	80001e0 <strlen>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 8001caa:	230a      	movs	r3, #10
 8001cac:	489d      	ldr	r0, [pc, #628]	; (8001f24 <main+0xfbc>)
 8001cae:	f005 fb80 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press 2 : Sine Wave\r\n";
 8001cb2:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 8001cb6:	4a9f      	ldr	r2, [pc, #636]	; (8001f34 <main+0xfcc>)
 8001cb8:	461c      	mov	r4, r3
 8001cba:	4615      	mov	r5, r2
 8001cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cc4:	6020      	str	r0, [r4, #0]
 8001cc6:	3404      	adds	r4, #4
 8001cc8:	8021      	strh	r1, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001cca:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fa86 	bl	80001e0 <strlen>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 8001cdc:	230a      	movs	r3, #10
 8001cde:	4891      	ldr	r0, [pc, #580]	; (8001f24 <main+0xfbc>)
 8001ce0:	f005 fb67 	bl	80073b2 <HAL_UART_Transmit>
					{
					char temp[]="Press 3 : Square Wave\r\n";
 8001ce4:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 8001ce8:	4a93      	ldr	r2, [pc, #588]	; (8001f38 <main+0xfd0>)
 8001cea:	461c      	mov	r4, r3
 8001cec:	4615      	mov	r5, r2
 8001cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cf6:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001cfa:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fa6e 	bl	80001e0 <strlen>
 8001d04:	4603      	mov	r3, r0
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 8001d0c:	230a      	movs	r3, #10
 8001d0e:	4885      	ldr	r0, [pc, #532]	; (8001f24 <main+0xfbc>)
 8001d10:	f005 fb4f 	bl	80073b2 <HAL_UART_Transmit>
					}
					}State=State_Wave_config;break;
 8001d14:	4b85      	ldr	r3, [pc, #532]	; (8001f2c <main+0xfc4>)
 8001d16:	2207      	movs	r2, #7
 8001d18:	801a      	strh	r2, [r3, #0]
 8001d1a:	e01a      	b.n	8001d52 <main+0xdea>

				default:
				{
					char temp[]="Wrong press again\r\n";
 8001d1c:	f207 7334 	addw	r3, r7, #1844	; 0x734
 8001d20:	4a86      	ldr	r2, [pc, #536]	; (8001f3c <main+0xfd4>)
 8001d22:	461c      	mov	r4, r3
 8001d24:	4615      	mov	r5, r2
 8001d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2a:	682b      	ldr	r3, [r5, #0]
 8001d2c:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001d2e:	f207 7334 	addw	r3, r7, #1844	; 0x734
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fa54 	bl	80001e0 <strlen>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	f207 7134 	addw	r1, r7, #1844	; 0x734
 8001d40:	230a      	movs	r3, #10
 8001d42:	4878      	ldr	r0, [pc, #480]	; (8001f24 <main+0xfbc>)
 8001d44:	f005 fb35 	bl	80073b2 <HAL_UART_Transmit>
				}State=State_Voltage_config;
 8001d48:	4b78      	ldr	r3, [pc, #480]	; (8001f2c <main+0xfc4>)
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	801a      	strh	r2, [r3, #0]
				}break;
 8001d4e:	f001 bb9c 	b.w	800348a <main+0x2522>
 8001d52:	f001 bb9a 	b.w	800348a <main+0x2522>
				///////////////////////////////////////////////////////////////////////////////////
			case State_VoltageLow_config:
				switch(inputchar)
 8001d56:	f9b7 3b06 	ldrsh.w	r3, [r7, #2822]	; 0xb06
 8001d5a:	3b61      	subs	r3, #97	; 0x61
 8001d5c:	2b17      	cmp	r3, #23
 8001d5e:	f200 81e7 	bhi.w	8002130 <main+0x11c8>
 8001d62:	a201      	add	r2, pc, #4	; (adr r2, 8001d68 <main+0xe00>)
 8001d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d68:	08001f5d 	.word	0x08001f5d
 8001d6c:	08002131 	.word	0x08002131
 8001d70:	08002131 	.word	0x08002131
 8001d74:	0800202d 	.word	0x0800202d
 8001d78:	08002131 	.word	0x08002131
 8001d7c:	08002131 	.word	0x08002131
 8001d80:	08002131 	.word	0x08002131
 8001d84:	08002131 	.word	0x08002131
 8001d88:	08002131 	.word	0x08002131
 8001d8c:	08002131 	.word	0x08002131
 8001d90:	08002131 	.word	0x08002131
 8001d94:	08002131 	.word	0x08002131
 8001d98:	08002131 	.word	0x08002131
 8001d9c:	08001e53 	.word	0x08001e53
 8001da0:	08002131 	.word	0x08002131
 8001da4:	08001dc9 	.word	0x08001dc9
 8001da8:	08002131 	.word	0x08002131
 8001dac:	08002131 	.word	0x08002131
 8001db0:	08001fc5 	.word	0x08001fc5
 8001db4:	08002131 	.word	0x08002131
 8001db8:	08002131 	.word	0x08002131
 8001dbc:	08002131 	.word	0x08002131
 8001dc0:	08002095 	.word	0x08002095
 8001dc4:	08001edd 	.word	0x08001edd
				{
				case'p':
					VoltageLow+=0.1;
 8001dc8:	4b5d      	ldr	r3, [pc, #372]	; (8001f40 <main+0xfd8>)
 8001dca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dce:	a352      	add	r3, pc, #328	; (adr r3, 8001f18 <main+0xfb0>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe fa62 	bl	800029c <__adddf3>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4958      	ldr	r1, [pc, #352]	; (8001f40 <main+0xfd8>)
 8001dde:	e9c1 2300 	strd	r2, r3, [r1]
					sprintf(ShowVoltage, "VoltageLow = %d.%d V\r\n",(uint8_t)VoltageLow,(uint8_t)(VoltageLow*10)%10);
 8001de2:	4b57      	ldr	r3, [pc, #348]	; (8001f40 <main+0xfd8>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	f7fe fece 	bl	8000b8c <__aeabi_d2uiz>
 8001df0:	4603      	mov	r3, r0
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	461c      	mov	r4, r3
 8001df6:	4b52      	ldr	r3, [pc, #328]	; (8001f40 <main+0xfd8>)
 8001df8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	4b50      	ldr	r3, [pc, #320]	; (8001f44 <main+0xfdc>)
 8001e02:	f7fe fc01 	bl	8000608 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7fe febd 	bl	8000b8c <__aeabi_d2uiz>
 8001e12:	4603      	mov	r3, r0
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4b4c      	ldr	r3, [pc, #304]	; (8001f48 <main+0xfe0>)
 8001e18:	fba3 1302 	umull	r1, r3, r3, r2
 8001e1c:	08d9      	lsrs	r1, r3, #3
 8001e1e:	460b      	mov	r3, r1
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	4622      	mov	r2, r4
 8001e2c:	4947      	ldr	r1, [pc, #284]	; (8001f4c <main+0xfe4>)
 8001e2e:	4848      	ldr	r0, [pc, #288]	; (8001f50 <main+0xfe8>)
 8001e30:	f006 f916 	bl	8008060 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)ShowVoltage, strlen(ShowVoltage),1000);
 8001e34:	4846      	ldr	r0, [pc, #280]	; (8001f50 <main+0xfe8>)
 8001e36:	f7fe f9d3 	bl	80001e0 <strlen>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e42:	4943      	ldr	r1, [pc, #268]	; (8001f50 <main+0xfe8>)
 8001e44:	4837      	ldr	r0, [pc, #220]	; (8001f24 <main+0xfbc>)
 8001e46:	f005 fab4 	bl	80073b2 <HAL_UART_Transmit>
					State=State_VoltageLow_config;
 8001e4a:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <main+0xfc4>)
 8001e4c:	2205      	movs	r2, #5
 8001e4e:	801a      	strh	r2, [r3, #0]
					break;
 8001e50:	e189      	b.n	8002166 <main+0x11fe>
				case'n':
					VoltageLow-=0.1;
 8001e52:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <main+0xfd8>)
 8001e54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e58:	a32f      	add	r3, pc, #188	; (adr r3, 8001f18 <main+0xfb0>)
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	f7fe fa1b 	bl	8000298 <__aeabi_dsub>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4936      	ldr	r1, [pc, #216]	; (8001f40 <main+0xfd8>)
 8001e68:	e9c1 2300 	strd	r2, r3, [r1]
					sprintf(ShowVoltage, "VoltageLow= %d.%d V\r\n",(uint8_t)VoltageLow,(uint8_t)(VoltageLow*10)%10);
 8001e6c:	4b34      	ldr	r3, [pc, #208]	; (8001f40 <main+0xfd8>)
 8001e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	f7fe fe89 	bl	8000b8c <__aeabi_d2uiz>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461c      	mov	r4, r3
 8001e80:	4b2f      	ldr	r3, [pc, #188]	; (8001f40 <main+0xfd8>)
 8001e82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <main+0xfdc>)
 8001e8c:	f7fe fbbc 	bl	8000608 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	f7fe fe78 	bl	8000b8c <__aeabi_d2uiz>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <main+0xfe0>)
 8001ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ea6:	08d9      	lsrs	r1, r3, #3
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	4927      	ldr	r1, [pc, #156]	; (8001f54 <main+0xfec>)
 8001eb8:	4825      	ldr	r0, [pc, #148]	; (8001f50 <main+0xfe8>)
 8001eba:	f006 f8d1 	bl	8008060 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)ShowVoltage, strlen(ShowVoltage),1000);
 8001ebe:	4824      	ldr	r0, [pc, #144]	; (8001f50 <main+0xfe8>)
 8001ec0:	f7fe f98e 	bl	80001e0 <strlen>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ecc:	4920      	ldr	r1, [pc, #128]	; (8001f50 <main+0xfe8>)
 8001ece:	4815      	ldr	r0, [pc, #84]	; (8001f24 <main+0xfbc>)
 8001ed0:	f005 fa6f 	bl	80073b2 <HAL_UART_Transmit>
					State=State_VoltageLow_config;
 8001ed4:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <main+0xfc4>)
 8001ed6:	2205      	movs	r2, #5
 8001ed8:	801a      	strh	r2, [r3, #0]
					break;
 8001eda:	e144      	b.n	8002166 <main+0x11fe>
				case 'x':
					//back
					{char temp[]="BACK TO MENU\r\n";
 8001edc:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <main+0xff0>)
 8001ee2:	461c      	mov	r4, r3
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ee8:	c407      	stmia	r4!, {r0, r1, r2}
 8001eea:	8023      	strh	r3, [r4, #0]
 8001eec:	3402      	adds	r4, #2
 8001eee:	0c1b      	lsrs	r3, r3, #16
 8001ef0:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);}
 8001ef2:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe f972 	bl	80001e0 <strlen>
 8001efc:	4603      	mov	r3, r0
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	f207 7124 	addw	r1, r7, #1828	; 0x724
 8001f04:	230a      	movs	r3, #10
 8001f06:	4807      	ldr	r0, [pc, #28]	; (8001f24 <main+0xfbc>)
 8001f08:	f005 fa53 	bl	80073b2 <HAL_UART_Transmit>
					State=State_menu;
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <main+0xfc4>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	801a      	strh	r2, [r3, #0]
					break;
 8001f12:	e128      	b.n	8002166 <main+0x11fe>
 8001f14:	f3af 8000 	nop.w
 8001f18:	9999999a 	.word	0x9999999a
 8001f1c:	3fb99999 	.word	0x3fb99999
 8001f20:	08009b64 	.word	0x08009b64
 8001f24:	20000360 	.word	0x20000360
 8001f28:	08009b80 	.word	0x08009b80
 8001f2c:	200000a2 	.word	0x200000a2
 8001f30:	08009b9c 	.word	0x08009b9c
 8001f34:	08009bb4 	.word	0x08009bb4
 8001f38:	08009bcc 	.word	0x08009bcc
 8001f3c:	08009c24 	.word	0x08009c24
 8001f40:	200000b8 	.word	0x200000b8
 8001f44:	40240000 	.word	0x40240000
 8001f48:	cccccccd 	.word	0xcccccccd
 8001f4c:	08009988 	.word	0x08009988
 8001f50:	20000158 	.word	0x20000158
 8001f54:	080099a0 	.word	0x080099a0
 8001f58:	08009be4 	.word	0x08009be4
				case'a':
					{
					char temp[]="Press p : Frequency+0.1\r\n";
 8001f5c:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 8001f60:	4ab3      	ldr	r2, [pc, #716]	; (8002230 <main+0x12c8>)
 8001f62:	461c      	mov	r4, r3
 8001f64:	4615      	mov	r5, r2
 8001f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f6e:	c403      	stmia	r4!, {r0, r1}
 8001f70:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001f72:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe f932 	bl	80001e0 <strlen>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 8001f84:	230a      	movs	r3, #10
 8001f86:	48ab      	ldr	r0, [pc, #684]	; (8002234 <main+0x12cc>)
 8001f88:	f005 fa13 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : Frequency-0.1\r\n";
 8001f8c:	f207 63ec 	addw	r3, r7, #1772	; 0x6ec
 8001f90:	4aa9      	ldr	r2, [pc, #676]	; (8002238 <main+0x12d0>)
 8001f92:	461c      	mov	r4, r3
 8001f94:	4615      	mov	r5, r2
 8001f96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f9e:	c403      	stmia	r4!, {r0, r1}
 8001fa0:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001fa2:	f207 63ec 	addw	r3, r7, #1772	; 0x6ec
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe f91a 	bl	80001e0 <strlen>
 8001fac:	4603      	mov	r3, r0
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	f207 61ec 	addw	r1, r7, #1772	; 0x6ec
 8001fb4:	230a      	movs	r3, #10
 8001fb6:	489f      	ldr	r0, [pc, #636]	; (8002234 <main+0x12cc>)
 8001fb8:	f005 f9fb 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Frequency_config;break;
 8001fbc:	4b9f      	ldr	r3, [pc, #636]	; (800223c <main+0x12d4>)
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	801a      	strh	r2, [r3, #0]
 8001fc2:	e0d0      	b.n	8002166 <main+0x11fe>
				case's':
					{
					char temp[]="Press p : Voltage+0.1\r\n";
 8001fc4:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 8001fc8:	4a9d      	ldr	r2, [pc, #628]	; (8002240 <main+0x12d8>)
 8001fca:	461c      	mov	r4, r3
 8001fcc:	4615      	mov	r5, r2
 8001fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fd6:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001fda:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe f8fe 	bl	80001e0 <strlen>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	f207 61d4 	addw	r1, r7, #1748	; 0x6d4
 8001fec:	230a      	movs	r3, #10
 8001fee:	4891      	ldr	r0, [pc, #580]	; (8002234 <main+0x12cc>)
 8001ff0:	f005 f9df 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : Voltage+0.1\r\n";
 8001ff4:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 8001ff8:	4a92      	ldr	r2, [pc, #584]	; (8002244 <main+0x12dc>)
 8001ffa:	461c      	mov	r4, r3
 8001ffc:	4615      	mov	r5, r2
 8001ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002002:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002006:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800200a:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe f8e6 	bl	80001e0 <strlen>
 8002014:	4603      	mov	r3, r0
 8002016:	b29a      	uxth	r2, r3
 8002018:	f207 61bc 	addw	r1, r7, #1724	; 0x6bc
 800201c:	230a      	movs	r3, #10
 800201e:	4885      	ldr	r0, [pc, #532]	; (8002234 <main+0x12cc>)
 8002020:	f005 f9c7 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Voltage_config;break;
 8002024:	4b85      	ldr	r3, [pc, #532]	; (800223c <main+0x12d4>)
 8002026:	2204      	movs	r2, #4
 8002028:	801a      	strh	r2, [r3, #0]
 800202a:	e09c      	b.n	8002166 <main+0x11fe>

				case'd':
				{
					char temp[]="Press p : Duty cycle+10\r\n";
 800202c:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8002030:	4a85      	ldr	r2, [pc, #532]	; (8002248 <main+0x12e0>)
 8002032:	461c      	mov	r4, r3
 8002034:	4615      	mov	r5, r2
 8002036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800203a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800203e:	c403      	stmia	r4!, {r0, r1}
 8002040:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002042:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe f8ca 	bl	80001e0 <strlen>
 800204c:	4603      	mov	r3, r0
 800204e:	b29a      	uxth	r2, r3
 8002050:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 8002054:	230a      	movs	r3, #10
 8002056:	4877      	ldr	r0, [pc, #476]	; (8002234 <main+0x12cc>)
 8002058:	f005 f9ab 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : duty cycle-10\r\n";
 800205c:	f207 6384 	addw	r3, r7, #1668	; 0x684
 8002060:	4a7a      	ldr	r2, [pc, #488]	; (800224c <main+0x12e4>)
 8002062:	461c      	mov	r4, r3
 8002064:	4615      	mov	r5, r2
 8002066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800206a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800206e:	c403      	stmia	r4!, {r0, r1}
 8002070:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002072:	f207 6384 	addw	r3, r7, #1668	; 0x684
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe f8b2 	bl	80001e0 <strlen>
 800207c:	4603      	mov	r3, r0
 800207e:	b29a      	uxth	r2, r3
 8002080:	f207 6184 	addw	r1, r7, #1668	; 0x684
 8002084:	230a      	movs	r3, #10
 8002086:	486b      	ldr	r0, [pc, #428]	; (8002234 <main+0x12cc>)
 8002088:	f005 f993 	bl	80073b2 <HAL_UART_Transmit>
					}
					State=State_Duty_cycle_config;break;
 800208c:	4b6b      	ldr	r3, [pc, #428]	; (800223c <main+0x12d4>)
 800208e:	2206      	movs	r2, #6
 8002090:	801a      	strh	r2, [r3, #0]
 8002092:	e068      	b.n	8002166 <main+0x11fe>
				case'w':
					{
					char temp[]="Press 1 : Sawtooth\r\n";
 8002094:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8002098:	4a6d      	ldr	r2, [pc, #436]	; (8002250 <main+0x12e8>)
 800209a:	461c      	mov	r4, r3
 800209c:	4615      	mov	r5, r2
 800209e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020a6:	6020      	str	r0, [r4, #0]
 80020a8:	3404      	adds	r4, #4
 80020aa:	7021      	strb	r1, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80020ac:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe f895 	bl	80001e0 <strlen>
 80020b6:	4603      	mov	r3, r0
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	f207 616c 	addw	r1, r7, #1644	; 0x66c
 80020be:	230a      	movs	r3, #10
 80020c0:	485c      	ldr	r0, [pc, #368]	; (8002234 <main+0x12cc>)
 80020c2:	f005 f976 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press 2 : Sine Wave\r\n";
 80020c6:	f207 6354 	addw	r3, r7, #1620	; 0x654
 80020ca:	4a62      	ldr	r2, [pc, #392]	; (8002254 <main+0x12ec>)
 80020cc:	461c      	mov	r4, r3
 80020ce:	4615      	mov	r5, r2
 80020d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020d8:	6020      	str	r0, [r4, #0]
 80020da:	3404      	adds	r4, #4
 80020dc:	8021      	strh	r1, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80020de:	f207 6354 	addw	r3, r7, #1620	; 0x654
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe f87c 	bl	80001e0 <strlen>
 80020e8:	4603      	mov	r3, r0
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	f207 6154 	addw	r1, r7, #1620	; 0x654
 80020f0:	230a      	movs	r3, #10
 80020f2:	4850      	ldr	r0, [pc, #320]	; (8002234 <main+0x12cc>)
 80020f4:	f005 f95d 	bl	80073b2 <HAL_UART_Transmit>
					{
					char temp[]="Press 3 : Square Wave\r\n";
 80020f8:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 80020fc:	4a56      	ldr	r2, [pc, #344]	; (8002258 <main+0x12f0>)
 80020fe:	461c      	mov	r4, r3
 8002100:	4615      	mov	r5, r2
 8002102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002106:	e895 0003 	ldmia.w	r5, {r0, r1}
 800210a:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800210e:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe f864 	bl	80001e0 <strlen>
 8002118:	4603      	mov	r3, r0
 800211a:	b29a      	uxth	r2, r3
 800211c:	f207 613c 	addw	r1, r7, #1596	; 0x63c
 8002120:	230a      	movs	r3, #10
 8002122:	4844      	ldr	r0, [pc, #272]	; (8002234 <main+0x12cc>)
 8002124:	f005 f945 	bl	80073b2 <HAL_UART_Transmit>
					}
					}State=State_Wave_config;break;
 8002128:	4b44      	ldr	r3, [pc, #272]	; (800223c <main+0x12d4>)
 800212a:	2207      	movs	r2, #7
 800212c:	801a      	strh	r2, [r3, #0]
 800212e:	e01a      	b.n	8002166 <main+0x11fe>

				default:
				{
					char temp[]="Wrong press again\r\n";
 8002130:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8002134:	4a49      	ldr	r2, [pc, #292]	; (800225c <main+0x12f4>)
 8002136:	461c      	mov	r4, r3
 8002138:	4615      	mov	r5, r2
 800213a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800213c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213e:	682b      	ldr	r3, [r5, #0]
 8002140:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002142:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe f84a 	bl	80001e0 <strlen>
 800214c:	4603      	mov	r3, r0
 800214e:	b29a      	uxth	r2, r3
 8002150:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 8002154:	230a      	movs	r3, #10
 8002156:	4837      	ldr	r0, [pc, #220]	; (8002234 <main+0x12cc>)
 8002158:	f005 f92b 	bl	80073b2 <HAL_UART_Transmit>
				}State=State_VoltageLow_config;
 800215c:	4b37      	ldr	r3, [pc, #220]	; (800223c <main+0x12d4>)
 800215e:	2205      	movs	r2, #5
 8002160:	801a      	strh	r2, [r3, #0]
				}break;
 8002162:	f001 b992 	b.w	800348a <main+0x2522>
 8002166:	f001 b990 	b.w	800348a <main+0x2522>

				////////////////////////////////////////////////////////////////////////////////////////
			case State_Duty_cycle_config:
				switch(inputchar)
 800216a:	f9b7 3b06 	ldrsh.w	r3, [r7, #2822]	; 0xb06
 800216e:	3b61      	subs	r3, #97	; 0x61
 8002170:	2b17      	cmp	r3, #23
 8002172:	f200 81b3 	bhi.w	80024dc <main+0x1574>
 8002176:	a201      	add	r2, pc, #4	; (adr r2, 800217c <main+0x1214>)
 8002178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217c:	080022fd 	.word	0x080022fd
 8002180:	080024dd 	.word	0x080024dd
 8002184:	080024dd 	.word	0x080024dd
 8002188:	080024dd 	.word	0x080024dd
 800218c:	080023cd 	.word	0x080023cd
 8002190:	080024dd 	.word	0x080024dd
 8002194:	080024dd 	.word	0x080024dd
 8002198:	080024dd 	.word	0x080024dd
 800219c:	080024dd 	.word	0x080024dd
 80021a0:	080024dd 	.word	0x080024dd
 80021a4:	080024dd 	.word	0x080024dd
 80021a8:	080024dd 	.word	0x080024dd
 80021ac:	080024dd 	.word	0x080024dd
 80021b0:	08002271 	.word	0x08002271
 80021b4:	080024dd 	.word	0x080024dd
 80021b8:	080021dd 	.word	0x080021dd
 80021bc:	080024dd 	.word	0x080024dd
 80021c0:	080024dd 	.word	0x080024dd
 80021c4:	08002365 	.word	0x08002365
 80021c8:	080024dd 	.word	0x080024dd
 80021cc:	080024dd 	.word	0x080024dd
 80021d0:	080024dd 	.word	0x080024dd
 80021d4:	08002441 	.word	0x08002441
 80021d8:	080022c5 	.word	0x080022c5
				{
				case'p':
					duty+=10;
 80021dc:	4b20      	ldr	r3, [pc, #128]	; (8002260 <main+0x12f8>)
 80021de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	4b1f      	ldr	r3, [pc, #124]	; (8002264 <main+0x12fc>)
 80021e8:	f7fe f858 	bl	800029c <__adddf3>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	491b      	ldr	r1, [pc, #108]	; (8002260 <main+0x12f8>)
 80021f2:	e9c1 2300 	strd	r2, r3, [r1]
					sprintf(ShowDuty, "Duty cylce = %d  \r\n",(uint8_t)duty);
 80021f6:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <main+0x12f8>)
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	4610      	mov	r0, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	f7fe fcc4 	bl	8000b8c <__aeabi_d2uiz>
 8002204:	4603      	mov	r3, r0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	4917      	ldr	r1, [pc, #92]	; (8002268 <main+0x1300>)
 800220c:	4817      	ldr	r0, [pc, #92]	; (800226c <main+0x1304>)
 800220e:	f005 ff27 	bl	8008060 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)ShowDuty, strlen(ShowDuty),1000);
 8002212:	4816      	ldr	r0, [pc, #88]	; (800226c <main+0x1304>)
 8002214:	f7fd ffe4 	bl	80001e0 <strlen>
 8002218:	4603      	mov	r3, r0
 800221a:	b29a      	uxth	r2, r3
 800221c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002220:	4912      	ldr	r1, [pc, #72]	; (800226c <main+0x1304>)
 8002222:	4804      	ldr	r0, [pc, #16]	; (8002234 <main+0x12cc>)
 8002224:	f005 f8c5 	bl	80073b2 <HAL_UART_Transmit>
					State=State_Duty_cycle_config;
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <main+0x12d4>)
 800222a:	2206      	movs	r2, #6
 800222c:	801a      	strh	r2, [r3, #0]
					break;
 800222e:	e170      	b.n	8002512 <main+0x15aa>
 8002230:	08009abc 	.word	0x08009abc
 8002234:	20000360 	.word	0x20000360
 8002238:	08009ad8 	.word	0x08009ad8
 800223c:	200000a2 	.word	0x200000a2
 8002240:	08009bf4 	.word	0x08009bf4
 8002244:	08009c0c 	.word	0x08009c0c
 8002248:	08009b64 	.word	0x08009b64
 800224c:	08009b80 	.word	0x08009b80
 8002250:	08009b9c 	.word	0x08009b9c
 8002254:	08009bb4 	.word	0x08009bb4
 8002258:	08009bcc 	.word	0x08009bcc
 800225c:	08009c24 	.word	0x08009c24
 8002260:	200000c0 	.word	0x200000c0
 8002264:	40240000 	.word	0x40240000
 8002268:	080099b8 	.word	0x080099b8
 800226c:	20000188 	.word	0x20000188
				case'n':
					duty-=10;
 8002270:	4bb2      	ldr	r3, [pc, #712]	; (800253c <main+0x15d4>)
 8002272:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	4bb1      	ldr	r3, [pc, #708]	; (8002540 <main+0x15d8>)
 800227c:	f7fe f80c 	bl	8000298 <__aeabi_dsub>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	49ad      	ldr	r1, [pc, #692]	; (800253c <main+0x15d4>)
 8002286:	e9c1 2300 	strd	r2, r3, [r1]
					sprintf(ShowDuty, "Duty cycle = %d  \r\n",(uint8_t)duty);
 800228a:	4bac      	ldr	r3, [pc, #688]	; (800253c <main+0x15d4>)
 800228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	f7fe fc7a 	bl	8000b8c <__aeabi_d2uiz>
 8002298:	4603      	mov	r3, r0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	49a9      	ldr	r1, [pc, #676]	; (8002544 <main+0x15dc>)
 80022a0:	48a9      	ldr	r0, [pc, #676]	; (8002548 <main+0x15e0>)
 80022a2:	f005 fedd 	bl	8008060 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)ShowDuty, strlen(ShowDuty),1000);
 80022a6:	48a8      	ldr	r0, [pc, #672]	; (8002548 <main+0x15e0>)
 80022a8:	f7fd ff9a 	bl	80001e0 <strlen>
 80022ac:	4603      	mov	r3, r0
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b4:	49a4      	ldr	r1, [pc, #656]	; (8002548 <main+0x15e0>)
 80022b6:	48a5      	ldr	r0, [pc, #660]	; (800254c <main+0x15e4>)
 80022b8:	f005 f87b 	bl	80073b2 <HAL_UART_Transmit>
					State=State_Duty_cycle_config;
 80022bc:	4ba4      	ldr	r3, [pc, #656]	; (8002550 <main+0x15e8>)
 80022be:	2206      	movs	r2, #6
 80022c0:	801a      	strh	r2, [r3, #0]
					break;
 80022c2:	e126      	b.n	8002512 <main+0x15aa>
				case 'x':
					//back
					{char temp[]="BACK TO MENU\r\n";
 80022c4:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80022c8:	4aa2      	ldr	r2, [pc, #648]	; (8002554 <main+0x15ec>)
 80022ca:	461c      	mov	r4, r3
 80022cc:	4613      	mov	r3, r2
 80022ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022d0:	c407      	stmia	r4!, {r0, r1, r2}
 80022d2:	8023      	strh	r3, [r4, #0]
 80022d4:	3402      	adds	r4, #2
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);}
 80022da:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fd ff7e 	bl	80001e0 <strlen>
 80022e4:	4603      	mov	r3, r0
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 80022ec:	230a      	movs	r3, #10
 80022ee:	4897      	ldr	r0, [pc, #604]	; (800254c <main+0x15e4>)
 80022f0:	f005 f85f 	bl	80073b2 <HAL_UART_Transmit>
					State=State_menu;
 80022f4:	4b96      	ldr	r3, [pc, #600]	; (8002550 <main+0x15e8>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	801a      	strh	r2, [r3, #0]
					break;
 80022fa:	e10a      	b.n	8002512 <main+0x15aa>
				case'a':
					{
					char temp[]="Press p : Frequency+0.1\r\n";
 80022fc:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8002300:	4a95      	ldr	r2, [pc, #596]	; (8002558 <main+0x15f0>)
 8002302:	461c      	mov	r4, r3
 8002304:	4615      	mov	r5, r2
 8002306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800230a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800230e:	c403      	stmia	r4!, {r0, r1}
 8002310:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002312:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8002316:	4618      	mov	r0, r3
 8002318:	f7fd ff62 	bl	80001e0 <strlen>
 800231c:	4603      	mov	r3, r0
 800231e:	b29a      	uxth	r2, r3
 8002320:	f207 51fc 	addw	r1, r7, #1532	; 0x5fc
 8002324:	230a      	movs	r3, #10
 8002326:	4889      	ldr	r0, [pc, #548]	; (800254c <main+0x15e4>)
 8002328:	f005 f843 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : Frequency-0.1\r\n";
 800232c:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8002330:	4a8a      	ldr	r2, [pc, #552]	; (800255c <main+0x15f4>)
 8002332:	461c      	mov	r4, r3
 8002334:	4615      	mov	r5, r2
 8002336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800233a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800233e:	c403      	stmia	r4!, {r0, r1}
 8002340:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002342:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8002346:	4618      	mov	r0, r3
 8002348:	f7fd ff4a 	bl	80001e0 <strlen>
 800234c:	4603      	mov	r3, r0
 800234e:	b29a      	uxth	r2, r3
 8002350:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 8002354:	230a      	movs	r3, #10
 8002356:	487d      	ldr	r0, [pc, #500]	; (800254c <main+0x15e4>)
 8002358:	f005 f82b 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Frequency_config;break;
 800235c:	4b7c      	ldr	r3, [pc, #496]	; (8002550 <main+0x15e8>)
 800235e:	2203      	movs	r2, #3
 8002360:	801a      	strh	r2, [r3, #0]
 8002362:	e0d6      	b.n	8002512 <main+0x15aa>
				case's':
				{
					char temp[]="Press p : Voltage+0.1\r\n";
 8002364:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8002368:	4a7d      	ldr	r2, [pc, #500]	; (8002560 <main+0x15f8>)
 800236a:	461c      	mov	r4, r3
 800236c:	4615      	mov	r5, r2
 800236e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002372:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002376:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800237a:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800237e:	4618      	mov	r0, r3
 8002380:	f7fd ff2e 	bl	80001e0 <strlen>
 8002384:	4603      	mov	r3, r0
 8002386:	b29a      	uxth	r2, r3
 8002388:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 800238c:	230a      	movs	r3, #10
 800238e:	486f      	ldr	r0, [pc, #444]	; (800254c <main+0x15e4>)
 8002390:	f005 f80f 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : Voltage+0.1\r\n";
 8002394:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8002398:	4a72      	ldr	r2, [pc, #456]	; (8002564 <main+0x15fc>)
 800239a:	461c      	mov	r4, r3
 800239c:	4615      	mov	r5, r2
 800239e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023a6:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80023aa:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fd ff16 	bl	80001e0 <strlen>
 80023b4:	4603      	mov	r3, r0
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 80023bc:	230a      	movs	r3, #10
 80023be:	4863      	ldr	r0, [pc, #396]	; (800254c <main+0x15e4>)
 80023c0:	f004 fff7 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Voltage_config;break;
 80023c4:	4b62      	ldr	r3, [pc, #392]	; (8002550 <main+0x15e8>)
 80023c6:	2204      	movs	r2, #4
 80023c8:	801a      	strh	r2, [r3, #0]
 80023ca:	e0a2      	b.n	8002512 <main+0x15aa>
				case'e':
					{
					char temp[]="Press p : VoltageLow+0.1\r\n";
 80023cc:	f207 5394 	addw	r3, r7, #1428	; 0x594
 80023d0:	4a65      	ldr	r2, [pc, #404]	; (8002568 <main+0x1600>)
 80023d2:	461c      	mov	r4, r3
 80023d4:	4615      	mov	r5, r2
 80023d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023de:	c403      	stmia	r4!, {r0, r1}
 80023e0:	8022      	strh	r2, [r4, #0]
 80023e2:	3402      	adds	r4, #2
 80023e4:	0c13      	lsrs	r3, r2, #16
 80023e6:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80023e8:	f207 5394 	addw	r3, r7, #1428	; 0x594
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fd fef7 	bl	80001e0 <strlen>
 80023f2:	4603      	mov	r3, r0
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	f207 5194 	addw	r1, r7, #1428	; 0x594
 80023fa:	230a      	movs	r3, #10
 80023fc:	4853      	ldr	r0, [pc, #332]	; (800254c <main+0x15e4>)
 80023fe:	f004 ffd8 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : VoltageLow+0.1\r\n";
 8002402:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8002406:	4a59      	ldr	r2, [pc, #356]	; (800256c <main+0x1604>)
 8002408:	461c      	mov	r4, r3
 800240a:	4615      	mov	r5, r2
 800240c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800240e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002410:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002414:	c403      	stmia	r4!, {r0, r1}
 8002416:	8022      	strh	r2, [r4, #0]
 8002418:	3402      	adds	r4, #2
 800241a:	0c13      	lsrs	r3, r2, #16
 800241c:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800241e:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8002422:	4618      	mov	r0, r3
 8002424:	f7fd fedc 	bl	80001e0 <strlen>
 8002428:	4603      	mov	r3, r0
 800242a:	b29a      	uxth	r2, r3
 800242c:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8002430:	230a      	movs	r3, #10
 8002432:	4846      	ldr	r0, [pc, #280]	; (800254c <main+0x15e4>)
 8002434:	f004 ffbd 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_VoltageLow_config;break;
 8002438:	4b45      	ldr	r3, [pc, #276]	; (8002550 <main+0x15e8>)
 800243a:	2205      	movs	r2, #5
 800243c:	801a      	strh	r2, [r3, #0]
 800243e:	e068      	b.n	8002512 <main+0x15aa>
				case'w':
					{
					char temp[]="Press 1 : Sawtooth\r\n";
 8002440:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8002444:	4a4a      	ldr	r2, [pc, #296]	; (8002570 <main+0x1608>)
 8002446:	461c      	mov	r4, r3
 8002448:	4615      	mov	r5, r2
 800244a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800244e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002452:	6020      	str	r0, [r4, #0]
 8002454:	3404      	adds	r4, #4
 8002456:	7021      	strb	r1, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002458:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800245c:	4618      	mov	r0, r3
 800245e:	f7fd febf 	bl	80001e0 <strlen>
 8002462:	4603      	mov	r3, r0
 8002464:	b29a      	uxth	r2, r3
 8002466:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 800246a:	230a      	movs	r3, #10
 800246c:	4837      	ldr	r0, [pc, #220]	; (800254c <main+0x15e4>)
 800246e:	f004 ffa0 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press 2 : Sine Wave\r\n";
 8002472:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8002476:	4a3f      	ldr	r2, [pc, #252]	; (8002574 <main+0x160c>)
 8002478:	461c      	mov	r4, r3
 800247a:	4615      	mov	r5, r2
 800247c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800247e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002480:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002484:	6020      	str	r0, [r4, #0]
 8002486:	3404      	adds	r4, #4
 8002488:	8021      	strh	r1, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800248a:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800248e:	4618      	mov	r0, r3
 8002490:	f7fd fea6 	bl	80001e0 <strlen>
 8002494:	4603      	mov	r3, r0
 8002496:	b29a      	uxth	r2, r3
 8002498:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 800249c:	230a      	movs	r3, #10
 800249e:	482b      	ldr	r0, [pc, #172]	; (800254c <main+0x15e4>)
 80024a0:	f004 ff87 	bl	80073b2 <HAL_UART_Transmit>
					{
					char temp[]="Press 3 : Square Wave\r\n";
 80024a4:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80024a8:	4a33      	ldr	r2, [pc, #204]	; (8002578 <main+0x1610>)
 80024aa:	461c      	mov	r4, r3
 80024ac:	4615      	mov	r5, r2
 80024ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80024b6:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80024ba:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fd fe8e 	bl	80001e0 <strlen>
 80024c4:	4603      	mov	r3, r0
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	f507 61a6 	add.w	r1, r7, #1328	; 0x530
 80024cc:	230a      	movs	r3, #10
 80024ce:	481f      	ldr	r0, [pc, #124]	; (800254c <main+0x15e4>)
 80024d0:	f004 ff6f 	bl	80073b2 <HAL_UART_Transmit>
					}
					}State=State_Wave_config;break;
 80024d4:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <main+0x15e8>)
 80024d6:	2207      	movs	r2, #7
 80024d8:	801a      	strh	r2, [r3, #0]
 80024da:	e01a      	b.n	8002512 <main+0x15aa>

				default:
				{
					char temp[]="Wrong press again\r\n";
 80024dc:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 80024e0:	4a26      	ldr	r2, [pc, #152]	; (800257c <main+0x1614>)
 80024e2:	461c      	mov	r4, r3
 80024e4:	4615      	mov	r5, r2
 80024e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ea:	682b      	ldr	r3, [r5, #0]
 80024ec:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80024ee:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fd fe74 	bl	80001e0 <strlen>
 80024f8:	4603      	mov	r3, r0
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	f207 511c 	addw	r1, r7, #1308	; 0x51c
 8002500:	230a      	movs	r3, #10
 8002502:	4812      	ldr	r0, [pc, #72]	; (800254c <main+0x15e4>)
 8002504:	f004 ff55 	bl	80073b2 <HAL_UART_Transmit>
				}State=State_Duty_cycle_config;
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <main+0x15e8>)
 800250a:	2206      	movs	r2, #6
 800250c:	801a      	strh	r2, [r3, #0]
				}break;
 800250e:	f000 bfbc 	b.w	800348a <main+0x2522>
 8002512:	f000 bfba 	b.w	800348a <main+0x2522>
	/////////////////////////////////////////////////////////////////////
				case State_Wave_config:
				switch(inputchar){
 8002516:	f9b7 3b06 	ldrsh.w	r3, [r7, #2822]	; 0xb06
 800251a:	2b78      	cmp	r3, #120	; 0x78
 800251c:	f300 81b7 	bgt.w	800288e <main+0x1926>
 8002520:	2b61      	cmp	r3, #97	; 0x61
 8002522:	da2d      	bge.n	8002580 <main+0x1618>
 8002524:	2b33      	cmp	r3, #51	; 0x33
 8002526:	f000 80a1 	beq.w	800266c <main+0x1704>
 800252a:	2b33      	cmp	r3, #51	; 0x33
 800252c:	f300 81af 	bgt.w	800288e <main+0x1926>
 8002530:	2b31      	cmp	r3, #49	; 0x31
 8002532:	d05d      	beq.n	80025f0 <main+0x1688>
 8002534:	2b32      	cmp	r3, #50	; 0x32
 8002536:	d07b      	beq.n	8002630 <main+0x16c8>
 8002538:	e1a9      	b.n	800288e <main+0x1926>
 800253a:	bf00      	nop
 800253c:	200000c0 	.word	0x200000c0
 8002540:	40240000 	.word	0x40240000
 8002544:	080099cc 	.word	0x080099cc
 8002548:	20000188 	.word	0x20000188
 800254c:	20000360 	.word	0x20000360
 8002550:	200000a2 	.word	0x200000a2
 8002554:	08009be4 	.word	0x08009be4
 8002558:	08009abc 	.word	0x08009abc
 800255c:	08009ad8 	.word	0x08009ad8
 8002560:	08009bf4 	.word	0x08009bf4
 8002564:	08009c0c 	.word	0x08009c0c
 8002568:	08009b2c 	.word	0x08009b2c
 800256c:	08009b48 	.word	0x08009b48
 8002570:	08009b9c 	.word	0x08009b9c
 8002574:	08009bb4 	.word	0x08009bb4
 8002578:	08009bcc 	.word	0x08009bcc
 800257c:	08009c24 	.word	0x08009c24
 8002580:	3b61      	subs	r3, #97	; 0x61
 8002582:	2b17      	cmp	r3, #23
 8002584:	f200 8183 	bhi.w	800288e <main+0x1926>
 8002588:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <main+0x1628>)
 800258a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258e:	bf00      	nop
 8002590:	080026e3 	.word	0x080026e3
 8002594:	0800288f 	.word	0x0800288f
 8002598:	0800288f 	.word	0x0800288f
 800259c:	08002827 	.word	0x08002827
 80025a0:	080027b3 	.word	0x080027b3
 80025a4:	0800288f 	.word	0x0800288f
 80025a8:	0800288f 	.word	0x0800288f
 80025ac:	0800288f 	.word	0x0800288f
 80025b0:	0800288f 	.word	0x0800288f
 80025b4:	0800288f 	.word	0x0800288f
 80025b8:	0800288f 	.word	0x0800288f
 80025bc:	0800288f 	.word	0x0800288f
 80025c0:	0800288f 	.word	0x0800288f
 80025c4:	0800288f 	.word	0x0800288f
 80025c8:	0800288f 	.word	0x0800288f
 80025cc:	0800288f 	.word	0x0800288f
 80025d0:	0800288f 	.word	0x0800288f
 80025d4:	0800288f 	.word	0x0800288f
 80025d8:	0800274b 	.word	0x0800274b
 80025dc:	0800288f 	.word	0x0800288f
 80025e0:	0800288f 	.word	0x0800288f
 80025e4:	0800288f 	.word	0x0800288f
 80025e8:	0800288f 	.word	0x0800288f
 80025ec:	080026ab 	.word	0x080026ab
				case'1':
				{char temp[]="Sawtooth\r\n";
 80025f0:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80025f4:	4ab4      	ldr	r2, [pc, #720]	; (80028c8 <main+0x1960>)
 80025f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80025f8:	c303      	stmia	r3!, {r0, r1}
 80025fa:	801a      	strh	r2, [r3, #0]
 80025fc:	3302      	adds	r3, #2
 80025fe:	0c12      	lsrs	r2, r2, #16
 8002600:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);}
 8002602:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd fdea 	bl	80001e0 <strlen>
 800260c:	4603      	mov	r3, r0
 800260e:	b29a      	uxth	r2, r3
 8002610:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8002614:	230a      	movs	r3, #10
 8002616:	48ad      	ldr	r0, [pc, #692]	; (80028cc <main+0x1964>)
 8002618:	f004 fecb 	bl	80073b2 <HAL_UART_Transmit>
				wave=1;
 800261c:	49ac      	ldr	r1, [pc, #688]	; (80028d0 <main+0x1968>)
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	4bac      	ldr	r3, [pc, #688]	; (80028d4 <main+0x196c>)
 8002624:	e9c1 2300 	strd	r2, r3, [r1]
					State=State_Sawtooth_mode;break;
 8002628:	4bab      	ldr	r3, [pc, #684]	; (80028d8 <main+0x1970>)
 800262a:	2208      	movs	r2, #8
 800262c:	801a      	strh	r2, [r3, #0]
 800262e:	e149      	b.n	80028c4 <main+0x195c>
				case'2':
				{char temp[]="Sine Wave\r\n";
 8002630:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8002634:	4aa9      	ldr	r2, [pc, #676]	; (80028dc <main+0x1974>)
 8002636:	ca07      	ldmia	r2, {r0, r1, r2}
 8002638:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);}
 800263c:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd fdcd 	bl	80001e0 <strlen>
 8002646:	4603      	mov	r3, r0
 8002648:	b29a      	uxth	r2, r3
 800264a:	f207 5104 	addw	r1, r7, #1284	; 0x504
 800264e:	230a      	movs	r3, #10
 8002650:	489e      	ldr	r0, [pc, #632]	; (80028cc <main+0x1964>)
 8002652:	f004 feae 	bl	80073b2 <HAL_UART_Transmit>
				wave=2;
 8002656:	499e      	ldr	r1, [pc, #632]	; (80028d0 <main+0x1968>)
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002660:	e9c1 2300 	strd	r2, r3, [r1]
					State=State_Sine_mode;break;
 8002664:	4b9c      	ldr	r3, [pc, #624]	; (80028d8 <main+0x1970>)
 8002666:	2209      	movs	r2, #9
 8002668:	801a      	strh	r2, [r3, #0]
 800266a:	e12b      	b.n	80028c4 <main+0x195c>
				case'3':
				{char temp[]="Square Wave\r\n";
 800266c:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 8002670:	4a9b      	ldr	r2, [pc, #620]	; (80028e0 <main+0x1978>)
 8002672:	461c      	mov	r4, r3
 8002674:	4613      	mov	r3, r2
 8002676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002678:	c407      	stmia	r4!, {r0, r1, r2}
 800267a:	8023      	strh	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);}
 800267c:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd fdad 	bl	80001e0 <strlen>
 8002686:	4603      	mov	r3, r0
 8002688:	b29a      	uxth	r2, r3
 800268a:	f207 41f4 	addw	r1, r7, #1268	; 0x4f4
 800268e:	230a      	movs	r3, #10
 8002690:	488e      	ldr	r0, [pc, #568]	; (80028cc <main+0x1964>)
 8002692:	f004 fe8e 	bl	80073b2 <HAL_UART_Transmit>
				wave=3;
 8002696:	498e      	ldr	r1, [pc, #568]	; (80028d0 <main+0x1968>)
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	4b91      	ldr	r3, [pc, #580]	; (80028e4 <main+0x197c>)
 800269e:	e9c1 2300 	strd	r2, r3, [r1]
					State=State_Square_mode;break;
 80026a2:	4b8d      	ldr	r3, [pc, #564]	; (80028d8 <main+0x1970>)
 80026a4:	220a      	movs	r2, #10
 80026a6:	801a      	strh	r2, [r3, #0]
 80026a8:	e10c      	b.n	80028c4 <main+0x195c>
				case 'x':
						//back
						{char temp[]="BACK TO MENU\r\n";
 80026aa:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 80026ae:	4a8e      	ldr	r2, [pc, #568]	; (80028e8 <main+0x1980>)
 80026b0:	461c      	mov	r4, r3
 80026b2:	4613      	mov	r3, r2
 80026b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b6:	c407      	stmia	r4!, {r0, r1, r2}
 80026b8:	8023      	strh	r3, [r4, #0]
 80026ba:	3402      	adds	r4, #2
 80026bc:	0c1b      	lsrs	r3, r3, #16
 80026be:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);}
 80026c0:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fd fd8b 	bl	80001e0 <strlen>
 80026ca:	4603      	mov	r3, r0
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	f207 41e4 	addw	r1, r7, #1252	; 0x4e4
 80026d2:	230a      	movs	r3, #10
 80026d4:	487d      	ldr	r0, [pc, #500]	; (80028cc <main+0x1964>)
 80026d6:	f004 fe6c 	bl	80073b2 <HAL_UART_Transmit>
						State=State_menu;
 80026da:	4b7f      	ldr	r3, [pc, #508]	; (80028d8 <main+0x1970>)
 80026dc:	2201      	movs	r2, #1
 80026de:	801a      	strh	r2, [r3, #0]
						break;
 80026e0:	e0f0      	b.n	80028c4 <main+0x195c>
				case'a':
						{
						char temp[]="Press p : Frequency+0.1\r\n";
 80026e2:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80026e6:	4a81      	ldr	r2, [pc, #516]	; (80028ec <main+0x1984>)
 80026e8:	461c      	mov	r4, r3
 80026ea:	4615      	mov	r5, r2
 80026ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026f4:	c403      	stmia	r4!, {r0, r1}
 80026f6:	8022      	strh	r2, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80026f8:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd fd6f 	bl	80001e0 <strlen>
 8002702:	4603      	mov	r3, r0
 8002704:	b29a      	uxth	r2, r3
 8002706:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 800270a:	230a      	movs	r3, #10
 800270c:	486f      	ldr	r0, [pc, #444]	; (80028cc <main+0x1964>)
 800270e:	f004 fe50 	bl	80073b2 <HAL_UART_Transmit>
						}
						{
						char temp[]="Press n : Frequency-0.1\r\n";
 8002712:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8002716:	4a76      	ldr	r2, [pc, #472]	; (80028f0 <main+0x1988>)
 8002718:	461c      	mov	r4, r3
 800271a:	4615      	mov	r5, r2
 800271c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800271e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002720:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002724:	c403      	stmia	r4!, {r0, r1}
 8002726:	8022      	strh	r2, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002728:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd fd57 	bl	80001e0 <strlen>
 8002732:	4603      	mov	r3, r0
 8002734:	b29a      	uxth	r2, r3
 8002736:	f207 41ac 	addw	r1, r7, #1196	; 0x4ac
 800273a:	230a      	movs	r3, #10
 800273c:	4863      	ldr	r0, [pc, #396]	; (80028cc <main+0x1964>)
 800273e:	f004 fe38 	bl	80073b2 <HAL_UART_Transmit>
						}State=State_Frequency_config;break;
 8002742:	4b65      	ldr	r3, [pc, #404]	; (80028d8 <main+0x1970>)
 8002744:	2203      	movs	r2, #3
 8002746:	801a      	strh	r2, [r3, #0]
 8002748:	e0bc      	b.n	80028c4 <main+0x195c>
				case's':
						{
						char temp[]="Press p : Voltage+0.1\r\n";
 800274a:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800274e:	4a69      	ldr	r2, [pc, #420]	; (80028f4 <main+0x198c>)
 8002750:	461c      	mov	r4, r3
 8002752:	4615      	mov	r5, r2
 8002754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002758:	e895 0003 	ldmia.w	r5, {r0, r1}
 800275c:	e884 0003 	stmia.w	r4, {r0, r1}
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002760:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd fd3b 	bl	80001e0 <strlen>
 800276a:	4603      	mov	r3, r0
 800276c:	b29a      	uxth	r2, r3
 800276e:	f207 4194 	addw	r1, r7, #1172	; 0x494
 8002772:	230a      	movs	r3, #10
 8002774:	4855      	ldr	r0, [pc, #340]	; (80028cc <main+0x1964>)
 8002776:	f004 fe1c 	bl	80073b2 <HAL_UART_Transmit>
						}
						{
						char temp[]="Press n : Voltage+0.1\r\n";
 800277a:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 800277e:	4a5e      	ldr	r2, [pc, #376]	; (80028f8 <main+0x1990>)
 8002780:	461c      	mov	r4, r3
 8002782:	4615      	mov	r5, r2
 8002784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002788:	e895 0003 	ldmia.w	r5, {r0, r1}
 800278c:	e884 0003 	stmia.w	r4, {r0, r1}
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002790:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8002794:	4618      	mov	r0, r3
 8002796:	f7fd fd23 	bl	80001e0 <strlen>
 800279a:	4603      	mov	r3, r0
 800279c:	b29a      	uxth	r2, r3
 800279e:	f207 417c 	addw	r1, r7, #1148	; 0x47c
 80027a2:	230a      	movs	r3, #10
 80027a4:	4849      	ldr	r0, [pc, #292]	; (80028cc <main+0x1964>)
 80027a6:	f004 fe04 	bl	80073b2 <HAL_UART_Transmit>
						}State=State_Voltage_config;break;
 80027aa:	4b4b      	ldr	r3, [pc, #300]	; (80028d8 <main+0x1970>)
 80027ac:	2204      	movs	r2, #4
 80027ae:	801a      	strh	r2, [r3, #0]
 80027b0:	e088      	b.n	80028c4 <main+0x195c>
				case'e':
						{
						char temp[]="Press p : VoltageLow+0.1\r\n";
 80027b2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80027b6:	4a51      	ldr	r2, [pc, #324]	; (80028fc <main+0x1994>)
 80027b8:	461c      	mov	r4, r3
 80027ba:	4615      	mov	r5, r2
 80027bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027c4:	c403      	stmia	r4!, {r0, r1}
 80027c6:	8022      	strh	r2, [r4, #0]
 80027c8:	3402      	adds	r4, #2
 80027ca:	0c13      	lsrs	r3, r2, #16
 80027cc:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80027ce:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fd fd04 	bl	80001e0 <strlen>
 80027d8:	4603      	mov	r3, r0
 80027da:	b29a      	uxth	r2, r3
 80027dc:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 80027e0:	230a      	movs	r3, #10
 80027e2:	483a      	ldr	r0, [pc, #232]	; (80028cc <main+0x1964>)
 80027e4:	f004 fde5 	bl	80073b2 <HAL_UART_Transmit>
						}
						{
						char temp[]="Press n : VoltageLow+0.1\r\n";
 80027e8:	f207 4344 	addw	r3, r7, #1092	; 0x444
 80027ec:	4a44      	ldr	r2, [pc, #272]	; (8002900 <main+0x1998>)
 80027ee:	461c      	mov	r4, r3
 80027f0:	4615      	mov	r5, r2
 80027f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027fa:	c403      	stmia	r4!, {r0, r1}
 80027fc:	8022      	strh	r2, [r4, #0]
 80027fe:	3402      	adds	r4, #2
 8002800:	0c13      	lsrs	r3, r2, #16
 8002802:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002804:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fce9 	bl	80001e0 <strlen>
 800280e:	4603      	mov	r3, r0
 8002810:	b29a      	uxth	r2, r3
 8002812:	f207 4144 	addw	r1, r7, #1092	; 0x444
 8002816:	230a      	movs	r3, #10
 8002818:	482c      	ldr	r0, [pc, #176]	; (80028cc <main+0x1964>)
 800281a:	f004 fdca 	bl	80073b2 <HAL_UART_Transmit>
						}State=State_VoltageLow_config;break;
 800281e:	4b2e      	ldr	r3, [pc, #184]	; (80028d8 <main+0x1970>)
 8002820:	2205      	movs	r2, #5
 8002822:	801a      	strh	r2, [r3, #0]
 8002824:	e04e      	b.n	80028c4 <main+0x195c>

				case'd':
						{
						char temp[]="Press p : Duty cycle+10\r\n";
 8002826:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800282a:	4a36      	ldr	r2, [pc, #216]	; (8002904 <main+0x199c>)
 800282c:	461c      	mov	r4, r3
 800282e:	4615      	mov	r5, r2
 8002830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002834:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002838:	c403      	stmia	r4!, {r0, r1}
 800283a:	8022      	strh	r2, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800283c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002840:	4618      	mov	r0, r3
 8002842:	f7fd fccd 	bl	80001e0 <strlen>
 8002846:	4603      	mov	r3, r0
 8002848:	b29a      	uxth	r2, r3
 800284a:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 800284e:	230a      	movs	r3, #10
 8002850:	481e      	ldr	r0, [pc, #120]	; (80028cc <main+0x1964>)
 8002852:	f004 fdae 	bl	80073b2 <HAL_UART_Transmit>
						}
						{
						char temp[]="Press n : duty cycle-10\r\n";
 8002856:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 800285a:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <main+0x19a0>)
 800285c:	461c      	mov	r4, r3
 800285e:	4615      	mov	r5, r2
 8002860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002864:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002868:	c403      	stmia	r4!, {r0, r1}
 800286a:	8022      	strh	r2, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800286c:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8002870:	4618      	mov	r0, r3
 8002872:	f7fd fcb5 	bl	80001e0 <strlen>
 8002876:	4603      	mov	r3, r0
 8002878:	b29a      	uxth	r2, r3
 800287a:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 800287e:	230a      	movs	r3, #10
 8002880:	4812      	ldr	r0, [pc, #72]	; (80028cc <main+0x1964>)
 8002882:	f004 fd96 	bl	80073b2 <HAL_UART_Transmit>
						}State=State_Duty_cycle_config;break;
 8002886:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <main+0x1970>)
 8002888:	2206      	movs	r2, #6
 800288a:	801a      	strh	r2, [r3, #0]
 800288c:	e01a      	b.n	80028c4 <main+0x195c>
				default:
					{
						char temp[]="Wrong press again\r\n";
 800288e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002892:	4a1e      	ldr	r2, [pc, #120]	; (800290c <main+0x19a4>)
 8002894:	461c      	mov	r4, r3
 8002896:	4615      	mov	r5, r2
 8002898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800289a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800289c:	682b      	ldr	r3, [r5, #0]
 800289e:	6023      	str	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80028a0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd fc9b 	bl	80001e0 <strlen>
 80028aa:	4603      	mov	r3, r0
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 80028b2:	230a      	movs	r3, #10
 80028b4:	4805      	ldr	r0, [pc, #20]	; (80028cc <main+0x1964>)
 80028b6:	f004 fd7c 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Wave_config;
 80028ba:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <main+0x1970>)
 80028bc:	2207      	movs	r2, #7
 80028be:	801a      	strh	r2, [r3, #0]
				}break;
 80028c0:	f000 bde3 	b.w	800348a <main+0x2522>
 80028c4:	f000 bde1 	b.w	800348a <main+0x2522>
 80028c8:	08009c38 	.word	0x08009c38
 80028cc:	20000360 	.word	0x20000360
 80028d0:	200000c8 	.word	0x200000c8
 80028d4:	3ff00000 	.word	0x3ff00000
 80028d8:	200000a2 	.word	0x200000a2
 80028dc:	08009c44 	.word	0x08009c44
 80028e0:	08009c50 	.word	0x08009c50
 80028e4:	40080000 	.word	0x40080000
 80028e8:	08009be4 	.word	0x08009be4
 80028ec:	08009abc 	.word	0x08009abc
 80028f0:	08009ad8 	.word	0x08009ad8
 80028f4:	08009bf4 	.word	0x08009bf4
 80028f8:	08009c0c 	.word	0x08009c0c
 80028fc:	08009b2c 	.word	0x08009b2c
 8002900:	08009b48 	.word	0x08009b48
 8002904:	08009b64 	.word	0x08009b64
 8002908:	08009b80 	.word	0x08009b80
 800290c:	08009c24 	.word	0x08009c24
	/////////////////////////////////////////////////////////////////////////////////////////////
				case State_Sawtooth_mode:
					wave=1;
 8002910:	49bc      	ldr	r1, [pc, #752]	; (8002c04 <main+0x1c9c>)
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	4bbc      	ldr	r3, [pc, #752]	; (8002c08 <main+0x1ca0>)
 8002918:	e9c1 2300 	strd	r2, r3, [r1]
					wave1=Frequency+Voltage+duty;
 800291c:	4bbb      	ldr	r3, [pc, #748]	; (8002c0c <main+0x1ca4>)
 800291e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002922:	4bbb      	ldr	r3, [pc, #748]	; (8002c10 <main+0x1ca8>)
 8002924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002928:	f7fd fcb8 	bl	800029c <__adddf3>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	4bb7      	ldr	r3, [pc, #732]	; (8002c14 <main+0x1cac>)
 8002936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293a:	f7fd fcaf 	bl	800029c <__adddf3>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	49b5      	ldr	r1, [pc, #724]	; (8002c18 <main+0x1cb0>)
 8002944:	e9c1 2300 	strd	r2, r3, [r1]
					switch(inputchar){
 8002948:	f9b7 3b06 	ldrsh.w	r3, [r7, #2822]	; 0xb06
 800294c:	3b61      	subs	r3, #97	; 0x61
 800294e:	2b17      	cmp	r3, #23
 8002950:	f200 81bc 	bhi.w	8002ccc <main+0x1d64>
 8002954:	a201      	add	r2, pc, #4	; (adr r2, 800295c <main+0x19f4>)
 8002956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295a:	bf00      	nop
 800295c:	080029bd 	.word	0x080029bd
 8002960:	08002ccd 	.word	0x08002ccd
 8002964:	08002ccd 	.word	0x08002ccd
 8002968:	08002b01 	.word	0x08002b01
 800296c:	08002a8d 	.word	0x08002a8d
 8002970:	08002ccd 	.word	0x08002ccd
 8002974:	08002ccd 	.word	0x08002ccd
 8002978:	08002ccd 	.word	0x08002ccd
 800297c:	08002c89 	.word	0x08002c89
 8002980:	08002ccd 	.word	0x08002ccd
 8002984:	08002ccd 	.word	0x08002ccd
 8002988:	08002ccd 	.word	0x08002ccd
 800298c:	08002ccd 	.word	0x08002ccd
 8002990:	08002ccd 	.word	0x08002ccd
 8002994:	08002cab 	.word	0x08002cab
 8002998:	08002ccd 	.word	0x08002ccd
 800299c:	08002ccd 	.word	0x08002ccd
 80029a0:	08002ccd 	.word	0x08002ccd
 80029a4:	08002a25 	.word	0x08002a25
 80029a8:	08002ccd 	.word	0x08002ccd
 80029ac:	08002ccd 	.word	0x08002ccd
 80029b0:	08002ccd 	.word	0x08002ccd
 80029b4:	08002b69 	.word	0x08002b69
 80029b8:	08002c51 	.word	0x08002c51
					case'a':
					{
					char temp[]="Press p : Frequency+0.1\r\n";
 80029bc:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80029c0:	4a96      	ldr	r2, [pc, #600]	; (8002c1c <main+0x1cb4>)
 80029c2:	461c      	mov	r4, r3
 80029c4:	4615      	mov	r5, r2
 80029c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029ce:	c403      	stmia	r4!, {r0, r1}
 80029d0:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80029d2:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fc02 	bl	80001e0 <strlen>
 80029dc:	4603      	mov	r3, r0
 80029de:	b29a      	uxth	r2, r3
 80029e0:	f507 7177 	add.w	r1, r7, #988	; 0x3dc
 80029e4:	230a      	movs	r3, #10
 80029e6:	488e      	ldr	r0, [pc, #568]	; (8002c20 <main+0x1cb8>)
 80029e8:	f004 fce3 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : Frequency-0.1\r\n";
 80029ec:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80029f0:	4a8c      	ldr	r2, [pc, #560]	; (8002c24 <main+0x1cbc>)
 80029f2:	461c      	mov	r4, r3
 80029f4:	4615      	mov	r5, r2
 80029f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029fe:	c403      	stmia	r4!, {r0, r1}
 8002a00:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002a02:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd fbea 	bl	80001e0 <strlen>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	f507 7170 	add.w	r1, r7, #960	; 0x3c0
 8002a14:	230a      	movs	r3, #10
 8002a16:	4882      	ldr	r0, [pc, #520]	; (8002c20 <main+0x1cb8>)
 8002a18:	f004 fccb 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Frequency_config;break;
 8002a1c:	4b82      	ldr	r3, [pc, #520]	; (8002c28 <main+0x1cc0>)
 8002a1e:	2203      	movs	r2, #3
 8002a20:	801a      	strh	r2, [r3, #0]
 8002a22:	e16d      	b.n	8002d00 <main+0x1d98>
				case's':
					{
					char temp[]="Press p : Voltage+0.1\r\n";
 8002a24:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8002a28:	4a80      	ldr	r2, [pc, #512]	; (8002c2c <main+0x1cc4>)
 8002a2a:	461c      	mov	r4, r3
 8002a2c:	4615      	mov	r5, r2
 8002a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a36:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002a3a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fd fbce 	bl	80001e0 <strlen>
 8002a44:	4603      	mov	r3, r0
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	f507 716a 	add.w	r1, r7, #936	; 0x3a8
 8002a4c:	230a      	movs	r3, #10
 8002a4e:	4874      	ldr	r0, [pc, #464]	; (8002c20 <main+0x1cb8>)
 8002a50:	f004 fcaf 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : Voltage+0.1\r\n";
 8002a54:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002a58:	4a75      	ldr	r2, [pc, #468]	; (8002c30 <main+0x1cc8>)
 8002a5a:	461c      	mov	r4, r3
 8002a5c:	4615      	mov	r5, r2
 8002a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a66:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002a6a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fbb6 	bl	80001e0 <strlen>
 8002a74:	4603      	mov	r3, r0
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	f507 7164 	add.w	r1, r7, #912	; 0x390
 8002a7c:	230a      	movs	r3, #10
 8002a7e:	4868      	ldr	r0, [pc, #416]	; (8002c20 <main+0x1cb8>)
 8002a80:	f004 fc97 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Voltage_config;break;
 8002a84:	4b68      	ldr	r3, [pc, #416]	; (8002c28 <main+0x1cc0>)
 8002a86:	2204      	movs	r2, #4
 8002a88:	801a      	strh	r2, [r3, #0]
 8002a8a:	e139      	b.n	8002d00 <main+0x1d98>
				case'e':
					{
					char temp[]="Press p : VoltageLow+0.1\r\n";
 8002a8c:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8002a90:	4a68      	ldr	r2, [pc, #416]	; (8002c34 <main+0x1ccc>)
 8002a92:	461c      	mov	r4, r3
 8002a94:	4615      	mov	r5, r2
 8002a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a9e:	c403      	stmia	r4!, {r0, r1}
 8002aa0:	8022      	strh	r2, [r4, #0]
 8002aa2:	3402      	adds	r4, #2
 8002aa4:	0c13      	lsrs	r3, r2, #16
 8002aa6:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002aa8:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fd fb97 	bl	80001e0 <strlen>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	f507 715d 	add.w	r1, r7, #884	; 0x374
 8002aba:	230a      	movs	r3, #10
 8002abc:	4858      	ldr	r0, [pc, #352]	; (8002c20 <main+0x1cb8>)
 8002abe:	f004 fc78 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : VoltageLow+0.1\r\n";
 8002ac2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002ac6:	4a5c      	ldr	r2, [pc, #368]	; (8002c38 <main+0x1cd0>)
 8002ac8:	461c      	mov	r4, r3
 8002aca:	4615      	mov	r5, r2
 8002acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ad4:	c403      	stmia	r4!, {r0, r1}
 8002ad6:	8022      	strh	r2, [r4, #0]
 8002ad8:	3402      	adds	r4, #2
 8002ada:	0c13      	lsrs	r3, r2, #16
 8002adc:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002ade:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fd fb7c 	bl	80001e0 <strlen>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	f507 7156 	add.w	r1, r7, #856	; 0x358
 8002af0:	230a      	movs	r3, #10
 8002af2:	484b      	ldr	r0, [pc, #300]	; (8002c20 <main+0x1cb8>)
 8002af4:	f004 fc5d 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_VoltageLow_config;break;
 8002af8:	4b4b      	ldr	r3, [pc, #300]	; (8002c28 <main+0x1cc0>)
 8002afa:	2205      	movs	r2, #5
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	e0ff      	b.n	8002d00 <main+0x1d98>
				case'd':
					{
					char temp[]="Press p : Duty cycle+10\r\n";
 8002b00:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8002b04:	4a4d      	ldr	r2, [pc, #308]	; (8002c3c <main+0x1cd4>)
 8002b06:	461c      	mov	r4, r3
 8002b08:	4615      	mov	r5, r2
 8002b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b12:	c403      	stmia	r4!, {r0, r1}
 8002b14:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002b16:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fd fb60 	bl	80001e0 <strlen>
 8002b20:	4603      	mov	r3, r0
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	f507 714f 	add.w	r1, r7, #828	; 0x33c
 8002b28:	230a      	movs	r3, #10
 8002b2a:	483d      	ldr	r0, [pc, #244]	; (8002c20 <main+0x1cb8>)
 8002b2c:	f004 fc41 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : duty cycle-10\r\n";
 8002b30:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8002b34:	4a42      	ldr	r2, [pc, #264]	; (8002c40 <main+0x1cd8>)
 8002b36:	461c      	mov	r4, r3
 8002b38:	4615      	mov	r5, r2
 8002b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b42:	c403      	stmia	r4!, {r0, r1}
 8002b44:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002b46:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd fb48 	bl	80001e0 <strlen>
 8002b50:	4603      	mov	r3, r0
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	f507 7148 	add.w	r1, r7, #800	; 0x320
 8002b58:	230a      	movs	r3, #10
 8002b5a:	4831      	ldr	r0, [pc, #196]	; (8002c20 <main+0x1cb8>)
 8002b5c:	f004 fc29 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Duty_cycle_config;break;
 8002b60:	4b31      	ldr	r3, [pc, #196]	; (8002c28 <main+0x1cc0>)
 8002b62:	2206      	movs	r2, #6
 8002b64:	801a      	strh	r2, [r3, #0]
 8002b66:	e0cb      	b.n	8002d00 <main+0x1d98>
				case'w':
				{
				char temp[]="Press 1 : Sawtooth\r\n";
 8002b68:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8002b6c:	4a35      	ldr	r2, [pc, #212]	; (8002c44 <main+0x1cdc>)
 8002b6e:	461c      	mov	r4, r3
 8002b70:	4615      	mov	r5, r2
 8002b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b7a:	6020      	str	r0, [r4, #0]
 8002b7c:	3404      	adds	r4, #4
 8002b7e:	7021      	strb	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002b80:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fd fb2b 	bl	80001e0 <strlen>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	f507 7142 	add.w	r1, r7, #776	; 0x308
 8002b92:	230a      	movs	r3, #10
 8002b94:	4822      	ldr	r0, [pc, #136]	; (8002c20 <main+0x1cb8>)
 8002b96:	f004 fc0c 	bl	80073b2 <HAL_UART_Transmit>
				}
				{
				char temp[]="Press 2 : Sine Wave\r\n";
 8002b9a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002b9e:	4a2a      	ldr	r2, [pc, #168]	; (8002c48 <main+0x1ce0>)
 8002ba0:	461c      	mov	r4, r3
 8002ba2:	4615      	mov	r5, r2
 8002ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ba8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002bac:	6020      	str	r0, [r4, #0]
 8002bae:	3404      	adds	r4, #4
 8002bb0:	8021      	strh	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002bb2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd fb12 	bl	80001e0 <strlen>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8002bc4:	230a      	movs	r3, #10
 8002bc6:	4816      	ldr	r0, [pc, #88]	; (8002c20 <main+0x1cb8>)
 8002bc8:	f004 fbf3 	bl	80073b2 <HAL_UART_Transmit>
				{
				char temp[]="Press 3 : Square Wave\r\n";
 8002bcc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8002bd0:	4a1e      	ldr	r2, [pc, #120]	; (8002c4c <main+0x1ce4>)
 8002bd2:	461c      	mov	r4, r3
 8002bd4:	4615      	mov	r5, r2
 8002bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bda:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002bde:	e884 0003 	stmia.w	r4, {r0, r1}
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002be2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fafa 	bl	80001e0 <strlen>
 8002bec:	4603      	mov	r3, r0
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	f507 7136 	add.w	r1, r7, #728	; 0x2d8
 8002bf4:	230a      	movs	r3, #10
 8002bf6:	480a      	ldr	r0, [pc, #40]	; (8002c20 <main+0x1cb8>)
 8002bf8:	f004 fbdb 	bl	80073b2 <HAL_UART_Transmit>
				}
				}State=State_Wave_config;break;
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <main+0x1cc0>)
 8002bfe:	2207      	movs	r2, #7
 8002c00:	801a      	strh	r2, [r3, #0]
 8002c02:	e07d      	b.n	8002d00 <main+0x1d98>
 8002c04:	200000c8 	.word	0x200000c8
 8002c08:	3ff00000 	.word	0x3ff00000
 8002c0c:	200000a8 	.word	0x200000a8
 8002c10:	200000b0 	.word	0x200000b0
 8002c14:	200000c0 	.word	0x200000c0
 8002c18:	200000d0 	.word	0x200000d0
 8002c1c:	08009abc 	.word	0x08009abc
 8002c20:	20000360 	.word	0x20000360
 8002c24:	08009ad8 	.word	0x08009ad8
 8002c28:	200000a2 	.word	0x200000a2
 8002c2c:	08009bf4 	.word	0x08009bf4
 8002c30:	08009c0c 	.word	0x08009c0c
 8002c34:	08009b2c 	.word	0x08009b2c
 8002c38:	08009b48 	.word	0x08009b48
 8002c3c:	08009b64 	.word	0x08009b64
 8002c40:	08009b80 	.word	0x08009b80
 8002c44:	08009b9c 	.word	0x08009b9c
 8002c48:	08009bb4 	.word	0x08009bb4
 8002c4c:	08009bcc 	.word	0x08009bcc
				case 'x':
					//back
					{char temp[]="BACK TO MENU\r\n";
 8002c50:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002c54:	4aa7      	ldr	r2, [pc, #668]	; (8002ef4 <main+0x1f8c>)
 8002c56:	461c      	mov	r4, r3
 8002c58:	4613      	mov	r3, r2
 8002c5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c5c:	c407      	stmia	r4!, {r0, r1, r2}
 8002c5e:	8023      	strh	r3, [r4, #0]
 8002c60:	3402      	adds	r4, #2
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);}
 8002c66:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fab8 	bl	80001e0 <strlen>
 8002c70:	4603      	mov	r3, r0
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	f507 7132 	add.w	r1, r7, #712	; 0x2c8
 8002c78:	230a      	movs	r3, #10
 8002c7a:	489f      	ldr	r0, [pc, #636]	; (8002ef8 <main+0x1f90>)
 8002c7c:	f004 fb99 	bl	80073b2 <HAL_UART_Transmit>
					State=State_menu;
 8002c80:	4b9e      	ldr	r3, [pc, #632]	; (8002efc <main+0x1f94>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	801a      	strh	r2, [r3, #0]
					break;
 8002c86:	e03b      	b.n	8002d00 <main+0x1d98>
				case 'i':
					invert+=1;
 8002c88:	4b9d      	ldr	r3, [pc, #628]	; (8002f00 <main+0x1f98>)
 8002c8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	4b9c      	ldr	r3, [pc, #624]	; (8002f04 <main+0x1f9c>)
 8002c94:	f7fd fb02 	bl	800029c <__adddf3>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4998      	ldr	r1, [pc, #608]	; (8002f00 <main+0x1f98>)
 8002c9e:	e9c1 2300 	strd	r2, r3, [r1]
					State=State_Sawtooth_mode;break;
 8002ca2:	4b96      	ldr	r3, [pc, #600]	; (8002efc <main+0x1f94>)
 8002ca4:	2208      	movs	r2, #8
 8002ca6:	801a      	strh	r2, [r3, #0]
 8002ca8:	e02a      	b.n	8002d00 <main+0x1d98>
				case'o':
					invert-=1;
 8002caa:	4b95      	ldr	r3, [pc, #596]	; (8002f00 <main+0x1f98>)
 8002cac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	4b93      	ldr	r3, [pc, #588]	; (8002f04 <main+0x1f9c>)
 8002cb6:	f7fd faef 	bl	8000298 <__aeabi_dsub>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4990      	ldr	r1, [pc, #576]	; (8002f00 <main+0x1f98>)
 8002cc0:	e9c1 2300 	strd	r2, r3, [r1]
					State=State_Sawtooth_mode;break;
 8002cc4:	4b8d      	ldr	r3, [pc, #564]	; (8002efc <main+0x1f94>)
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	801a      	strh	r2, [r3, #0]
 8002cca:	e019      	b.n	8002d00 <main+0x1d98>
				default:
					{
						char temp[]="Wrong press again\r\n";
 8002ccc:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8002cd0:	4a8d      	ldr	r2, [pc, #564]	; (8002f08 <main+0x1fa0>)
 8002cd2:	461c      	mov	r4, r3
 8002cd4:	4615      	mov	r5, r2
 8002cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cda:	682b      	ldr	r3, [r5, #0]
 8002cdc:	6023      	str	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002cde:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fd fa7c 	bl	80001e0 <strlen>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	f507 712d 	add.w	r1, r7, #692	; 0x2b4
 8002cf0:	230a      	movs	r3, #10
 8002cf2:	4881      	ldr	r0, [pc, #516]	; (8002ef8 <main+0x1f90>)
 8002cf4:	f004 fb5d 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Sawtooth_mode;
 8002cf8:	4b80      	ldr	r3, [pc, #512]	; (8002efc <main+0x1f94>)
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	801a      	strh	r2, [r3, #0]
					}
					break;
 8002cfe:	e3c4      	b.n	800348a <main+0x2522>
 8002d00:	e3c3      	b.n	800348a <main+0x2522>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
				case State_Sine_mode:
					wave=2;
 8002d02:	4982      	ldr	r1, [pc, #520]	; (8002f0c <main+0x1fa4>)
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d0c:	e9c1 2300 	strd	r2, r3, [r1]
					wave2=Frequency+Voltage+duty;
 8002d10:	4b7f      	ldr	r3, [pc, #508]	; (8002f10 <main+0x1fa8>)
 8002d12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d16:	4b7f      	ldr	r3, [pc, #508]	; (8002f14 <main+0x1fac>)
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f7fd fabe 	bl	800029c <__adddf3>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4610      	mov	r0, r2
 8002d26:	4619      	mov	r1, r3
 8002d28:	4b7b      	ldr	r3, [pc, #492]	; (8002f18 <main+0x1fb0>)
 8002d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2e:	f7fd fab5 	bl	800029c <__adddf3>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4979      	ldr	r1, [pc, #484]	; (8002f1c <main+0x1fb4>)
 8002d38:	e9c1 2300 	strd	r2, r3, [r1]
					switch(inputchar){
 8002d3c:	f9b7 3b06 	ldrsh.w	r3, [r7, #2822]	; 0xb06
 8002d40:	3b61      	subs	r3, #97	; 0x61
 8002d42:	2b17      	cmp	r3, #23
 8002d44:	f200 8196 	bhi.w	8003074 <main+0x210c>
 8002d48:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <main+0x1de8>)
 8002d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4e:	bf00      	nop
 8002d50:	08002db1 	.word	0x08002db1
 8002d54:	08003075 	.word	0x08003075
 8002d58:	08003075 	.word	0x08003075
 8002d5c:	08002f39 	.word	0x08002f39
 8002d60:	08002e19 	.word	0x08002e19
 8002d64:	08003075 	.word	0x08003075
 8002d68:	08003075 	.word	0x08003075
 8002d6c:	08003075 	.word	0x08003075
 8002d70:	08003075 	.word	0x08003075
 8002d74:	08003075 	.word	0x08003075
 8002d78:	08003075 	.word	0x08003075
 8002d7c:	08003075 	.word	0x08003075
 8002d80:	08003075 	.word	0x08003075
 8002d84:	08003075 	.word	0x08003075
 8002d88:	08003075 	.word	0x08003075
 8002d8c:	08003075 	.word	0x08003075
 8002d90:	08003075 	.word	0x08003075
 8002d94:	08003075 	.word	0x08003075
 8002d98:	08002e8d 	.word	0x08002e8d
 8002d9c:	08003075 	.word	0x08003075
 8002da0:	08003075 	.word	0x08003075
 8002da4:	08003075 	.word	0x08003075
 8002da8:	08002fa1 	.word	0x08002fa1
 8002dac:	0800303d 	.word	0x0800303d
					case'a':
					{
					char temp[]="Press p : Frequency+0.1\r\n";
 8002db0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002db4:	4a5a      	ldr	r2, [pc, #360]	; (8002f20 <main+0x1fb8>)
 8002db6:	461c      	mov	r4, r3
 8002db8:	4615      	mov	r5, r2
 8002dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002dc2:	c403      	stmia	r4!, {r0, r1}
 8002dc4:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002dc6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd fa08 	bl	80001e0 <strlen>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	f507 7126 	add.w	r1, r7, #664	; 0x298
 8002dd8:	230a      	movs	r3, #10
 8002dda:	4847      	ldr	r0, [pc, #284]	; (8002ef8 <main+0x1f90>)
 8002ddc:	f004 fae9 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : Frequency-0.1\r\n";
 8002de0:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8002de4:	4a4f      	ldr	r2, [pc, #316]	; (8002f24 <main+0x1fbc>)
 8002de6:	461c      	mov	r4, r3
 8002de8:	4615      	mov	r5, r2
 8002dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002df2:	c403      	stmia	r4!, {r0, r1}
 8002df4:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002df6:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fd f9f0 	bl	80001e0 <strlen>
 8002e00:	4603      	mov	r3, r0
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	f507 711f 	add.w	r1, r7, #636	; 0x27c
 8002e08:	230a      	movs	r3, #10
 8002e0a:	483b      	ldr	r0, [pc, #236]	; (8002ef8 <main+0x1f90>)
 8002e0c:	f004 fad1 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Frequency_config;break;
 8002e10:	4b3a      	ldr	r3, [pc, #232]	; (8002efc <main+0x1f94>)
 8002e12:	2203      	movs	r2, #3
 8002e14:	801a      	strh	r2, [r3, #0]
 8002e16:	e147      	b.n	80030a8 <main+0x2140>
				case'e':
					{
					char temp[]="Press p : VoltageLow+0.1\r\n";
 8002e18:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e1c:	4a42      	ldr	r2, [pc, #264]	; (8002f28 <main+0x1fc0>)
 8002e1e:	461c      	mov	r4, r3
 8002e20:	4615      	mov	r5, r2
 8002e22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e2a:	c403      	stmia	r4!, {r0, r1}
 8002e2c:	8022      	strh	r2, [r4, #0]
 8002e2e:	3402      	adds	r4, #2
 8002e30:	0c13      	lsrs	r3, r2, #16
 8002e32:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002e34:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd f9d1 	bl	80001e0 <strlen>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8002e46:	230a      	movs	r3, #10
 8002e48:	482b      	ldr	r0, [pc, #172]	; (8002ef8 <main+0x1f90>)
 8002e4a:	f004 fab2 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : VoltageLow+0.1\r\n";
 8002e4e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8002e52:	4a36      	ldr	r2, [pc, #216]	; (8002f2c <main+0x1fc4>)
 8002e54:	461c      	mov	r4, r3
 8002e56:	4615      	mov	r5, r2
 8002e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e60:	c403      	stmia	r4!, {r0, r1}
 8002e62:	8022      	strh	r2, [r4, #0]
 8002e64:	3402      	adds	r4, #2
 8002e66:	0c13      	lsrs	r3, r2, #16
 8002e68:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002e6a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd f9b6 	bl	80001e0 <strlen>
 8002e74:	4603      	mov	r3, r0
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	f507 7111 	add.w	r1, r7, #580	; 0x244
 8002e7c:	230a      	movs	r3, #10
 8002e7e:	481e      	ldr	r0, [pc, #120]	; (8002ef8 <main+0x1f90>)
 8002e80:	f004 fa97 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_VoltageLow_config;break;
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <main+0x1f94>)
 8002e86:	2205      	movs	r2, #5
 8002e88:	801a      	strh	r2, [r3, #0]
 8002e8a:	e10d      	b.n	80030a8 <main+0x2140>
				case's':
					{
					char temp[]="Press p : Voltage+0.1\r\n";
 8002e8c:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8002e90:	4a27      	ldr	r2, [pc, #156]	; (8002f30 <main+0x1fc8>)
 8002e92:	461c      	mov	r4, r3
 8002e94:	4615      	mov	r5, r2
 8002e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e9a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002e9e:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002ea2:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd f99a 	bl	80001e0 <strlen>
 8002eac:	4603      	mov	r3, r0
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 8002eb4:	230a      	movs	r3, #10
 8002eb6:	4810      	ldr	r0, [pc, #64]	; (8002ef8 <main+0x1f90>)
 8002eb8:	f004 fa7b 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : Voltage+0.1\r\n";
 8002ebc:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8002ec0:	4a1c      	ldr	r2, [pc, #112]	; (8002f34 <main+0x1fcc>)
 8002ec2:	461c      	mov	r4, r3
 8002ec4:	4615      	mov	r5, r2
 8002ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002ece:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002ed2:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd f982 	bl	80001e0 <strlen>
 8002edc:	4603      	mov	r3, r0
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8002ee4:	230a      	movs	r3, #10
 8002ee6:	4804      	ldr	r0, [pc, #16]	; (8002ef8 <main+0x1f90>)
 8002ee8:	f004 fa63 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Voltage_config;break;
 8002eec:	4b03      	ldr	r3, [pc, #12]	; (8002efc <main+0x1f94>)
 8002eee:	2204      	movs	r2, #4
 8002ef0:	801a      	strh	r2, [r3, #0]
 8002ef2:	e0d9      	b.n	80030a8 <main+0x2140>
 8002ef4:	08009be4 	.word	0x08009be4
 8002ef8:	20000360 	.word	0x20000360
 8002efc:	200000a2 	.word	0x200000a2
 8002f00:	200000f0 	.word	0x200000f0
 8002f04:	3ff00000 	.word	0x3ff00000
 8002f08:	08009c24 	.word	0x08009c24
 8002f0c:	200000c8 	.word	0x200000c8
 8002f10:	200000a8 	.word	0x200000a8
 8002f14:	200000b0 	.word	0x200000b0
 8002f18:	200000c0 	.word	0x200000c0
 8002f1c:	200000d8 	.word	0x200000d8
 8002f20:	08009abc 	.word	0x08009abc
 8002f24:	08009ad8 	.word	0x08009ad8
 8002f28:	08009b2c 	.word	0x08009b2c
 8002f2c:	08009b48 	.word	0x08009b48
 8002f30:	08009bf4 	.word	0x08009bf4
 8002f34:	08009c0c 	.word	0x08009c0c
				case'd':
					{
					char temp[]="Press p : Duty cycle+10\r\n";
 8002f38:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002f3c:	4abc      	ldr	r2, [pc, #752]	; (8003230 <main+0x22c8>)
 8002f3e:	461c      	mov	r4, r3
 8002f40:	4615      	mov	r5, r2
 8002f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f4a:	c403      	stmia	r4!, {r0, r1}
 8002f4c:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002f4e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd f944 	bl	80001e0 <strlen>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8002f60:	230a      	movs	r3, #10
 8002f62:	48b4      	ldr	r0, [pc, #720]	; (8003234 <main+0x22cc>)
 8002f64:	f004 fa25 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : duty cycle-10\r\n";
 8002f68:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8002f6c:	4ab2      	ldr	r2, [pc, #712]	; (8003238 <main+0x22d0>)
 8002f6e:	461c      	mov	r4, r3
 8002f70:	4615      	mov	r5, r2
 8002f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f7a:	c403      	stmia	r4!, {r0, r1}
 8002f7c:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002f7e:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd f92c 	bl	80001e0 <strlen>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	f507 71ee 	add.w	r1, r7, #476	; 0x1dc
 8002f90:	230a      	movs	r3, #10
 8002f92:	48a8      	ldr	r0, [pc, #672]	; (8003234 <main+0x22cc>)
 8002f94:	f004 fa0d 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Duty_cycle_config;break;
 8002f98:	4ba8      	ldr	r3, [pc, #672]	; (800323c <main+0x22d4>)
 8002f9a:	2206      	movs	r2, #6
 8002f9c:	801a      	strh	r2, [r3, #0]
 8002f9e:	e083      	b.n	80030a8 <main+0x2140>
				case'w':
				{
				char temp[]="Press 1 : Sawtooth\r\n";
 8002fa0:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8002fa4:	4aa6      	ldr	r2, [pc, #664]	; (8003240 <main+0x22d8>)
 8002fa6:	461c      	mov	r4, r3
 8002fa8:	4615      	mov	r5, r2
 8002faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002fb2:	6020      	str	r0, [r4, #0]
 8002fb4:	3404      	adds	r4, #4
 8002fb6:	7021      	strb	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002fb8:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd f90f 	bl	80001e0 <strlen>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 8002fca:	230a      	movs	r3, #10
 8002fcc:	4899      	ldr	r0, [pc, #612]	; (8003234 <main+0x22cc>)
 8002fce:	f004 f9f0 	bl	80073b2 <HAL_UART_Transmit>
				}
				{
				char temp[]="Press 2 : Sine Wave\r\n";
 8002fd2:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8002fd6:	4a9b      	ldr	r2, [pc, #620]	; (8003244 <main+0x22dc>)
 8002fd8:	461c      	mov	r4, r3
 8002fda:	4615      	mov	r5, r2
 8002fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fe0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002fe4:	6020      	str	r0, [r4, #0]
 8002fe6:	3404      	adds	r4, #4
 8002fe8:	8021      	strh	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8002fea:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd f8f6 	bl	80001e0 <strlen>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 8002ffc:	230a      	movs	r3, #10
 8002ffe:	488d      	ldr	r0, [pc, #564]	; (8003234 <main+0x22cc>)
 8003000:	f004 f9d7 	bl	80073b2 <HAL_UART_Transmit>
				{
				char temp[]="Press 3 : Square Wave\r\n";
 8003004:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8003008:	4a8f      	ldr	r2, [pc, #572]	; (8003248 <main+0x22e0>)
 800300a:	461c      	mov	r4, r3
 800300c:	4615      	mov	r5, r2
 800300e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003012:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003016:	e884 0003 	stmia.w	r4, {r0, r1}
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800301a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd f8de 	bl	80001e0 <strlen>
 8003024:	4603      	mov	r3, r0
 8003026:	b29a      	uxth	r2, r3
 8003028:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800302c:	230a      	movs	r3, #10
 800302e:	4881      	ldr	r0, [pc, #516]	; (8003234 <main+0x22cc>)
 8003030:	f004 f9bf 	bl	80073b2 <HAL_UART_Transmit>
				}
				}State=State_Wave_config;break;
 8003034:	4b81      	ldr	r3, [pc, #516]	; (800323c <main+0x22d4>)
 8003036:	2207      	movs	r2, #7
 8003038:	801a      	strh	r2, [r3, #0]
 800303a:	e035      	b.n	80030a8 <main+0x2140>
				case 'x':
					//back
					{char temp[]="BACK TO MENU\r\n";
 800303c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8003040:	4a82      	ldr	r2, [pc, #520]	; (800324c <main+0x22e4>)
 8003042:	461c      	mov	r4, r3
 8003044:	4613      	mov	r3, r2
 8003046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003048:	c407      	stmia	r4!, {r0, r1, r2}
 800304a:	8023      	strh	r3, [r4, #0]
 800304c:	3402      	adds	r4, #2
 800304e:	0c1b      	lsrs	r3, r3, #16
 8003050:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);}
 8003052:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd f8c2 	bl	80001e0 <strlen>
 800305c:	4603      	mov	r3, r0
 800305e:	b29a      	uxth	r2, r3
 8003060:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 8003064:	230a      	movs	r3, #10
 8003066:	4873      	ldr	r0, [pc, #460]	; (8003234 <main+0x22cc>)
 8003068:	f004 f9a3 	bl	80073b2 <HAL_UART_Transmit>
					State=State_menu;
 800306c:	4b73      	ldr	r3, [pc, #460]	; (800323c <main+0x22d4>)
 800306e:	2201      	movs	r2, #1
 8003070:	801a      	strh	r2, [r3, #0]
					break;
 8003072:	e019      	b.n	80030a8 <main+0x2140>
				default:
					{
						char temp[]="Wrong press again\r\n";
 8003074:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003078:	4a75      	ldr	r2, [pc, #468]	; (8003250 <main+0x22e8>)
 800307a:	461c      	mov	r4, r3
 800307c:	4615      	mov	r5, r2
 800307e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003082:	682b      	ldr	r3, [r5, #0]
 8003084:	6023      	str	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8003086:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd f8a8 	bl	80001e0 <strlen>
 8003090:	4603      	mov	r3, r0
 8003092:	b29a      	uxth	r2, r3
 8003094:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8003098:	230a      	movs	r3, #10
 800309a:	4866      	ldr	r0, [pc, #408]	; (8003234 <main+0x22cc>)
 800309c:	f004 f989 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Sine_mode;
 80030a0:	4b66      	ldr	r3, [pc, #408]	; (800323c <main+0x22d4>)
 80030a2:	2209      	movs	r2, #9
 80030a4:	801a      	strh	r2, [r3, #0]
					}
					break;
 80030a6:	e1f0      	b.n	800348a <main+0x2522>
 80030a8:	e1ef      	b.n	800348a <main+0x2522>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				case State_Square_mode:
					wave=3;
 80030aa:	496a      	ldr	r1, [pc, #424]	; (8003254 <main+0x22ec>)
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	4b69      	ldr	r3, [pc, #420]	; (8003258 <main+0x22f0>)
 80030b2:	e9c1 2300 	strd	r2, r3, [r1]
					wave3=Frequency+Voltage+duty;
 80030b6:	4b69      	ldr	r3, [pc, #420]	; (800325c <main+0x22f4>)
 80030b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030bc:	4b68      	ldr	r3, [pc, #416]	; (8003260 <main+0x22f8>)
 80030be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c2:	f7fd f8eb 	bl	800029c <__adddf3>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	4b65      	ldr	r3, [pc, #404]	; (8003264 <main+0x22fc>)
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f7fd f8e2 	bl	800029c <__adddf3>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4962      	ldr	r1, [pc, #392]	; (8003268 <main+0x2300>)
 80030de:	e9c1 2300 	strd	r2, r3, [r1]
					switch(inputchar){
 80030e2:	f9b7 3b06 	ldrsh.w	r3, [r7, #2822]	; 0xb06
 80030e6:	3b61      	subs	r3, #97	; 0x61
 80030e8:	2b17      	cmp	r3, #23
 80030ea:	f200 8199 	bhi.w	8003420 <main+0x24b8>
 80030ee:	a201      	add	r2, pc, #4	; (adr r2, 80030f4 <main+0x218c>)
 80030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f4:	08003155 	.word	0x08003155
 80030f8:	08003421 	.word	0x08003421
 80030fc:	08003421 	.word	0x08003421
 8003100:	080032e5 	.word	0x080032e5
 8003104:	080031bd 	.word	0x080031bd
 8003108:	08003421 	.word	0x08003421
 800310c:	08003421 	.word	0x08003421
 8003110:	08003421 	.word	0x08003421
 8003114:	08003421 	.word	0x08003421
 8003118:	08003421 	.word	0x08003421
 800311c:	08003421 	.word	0x08003421
 8003120:	08003421 	.word	0x08003421
 8003124:	08003421 	.word	0x08003421
 8003128:	08003421 	.word	0x08003421
 800312c:	08003421 	.word	0x08003421
 8003130:	08003421 	.word	0x08003421
 8003134:	08003421 	.word	0x08003421
 8003138:	08003421 	.word	0x08003421
 800313c:	0800327d 	.word	0x0800327d
 8003140:	08003421 	.word	0x08003421
 8003144:	08003421 	.word	0x08003421
 8003148:	08003421 	.word	0x08003421
 800314c:	0800334d 	.word	0x0800334d
 8003150:	080033e9 	.word	0x080033e9
					case'a':
					{
					char temp[]="Press p : Frequency+0.1\r\n";
 8003154:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003158:	4a44      	ldr	r2, [pc, #272]	; (800326c <main+0x2304>)
 800315a:	461c      	mov	r4, r3
 800315c:	4615      	mov	r5, r2
 800315e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003162:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003166:	c403      	stmia	r4!, {r0, r1}
 8003168:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800316a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd f836 	bl	80001e0 <strlen>
 8003174:	4603      	mov	r3, r0
 8003176:	b29a      	uxth	r2, r3
 8003178:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 800317c:	230a      	movs	r3, #10
 800317e:	482d      	ldr	r0, [pc, #180]	; (8003234 <main+0x22cc>)
 8003180:	f004 f917 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : Frequency-0.1\r\n";
 8003184:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003188:	4a39      	ldr	r2, [pc, #228]	; (8003270 <main+0x2308>)
 800318a:	461c      	mov	r4, r3
 800318c:	4615      	mov	r5, r2
 800318e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003192:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003196:	c403      	stmia	r4!, {r0, r1}
 8003198:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800319a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd f81e 	bl	80001e0 <strlen>
 80031a4:	4603      	mov	r3, r0
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80031ac:	230a      	movs	r3, #10
 80031ae:	4821      	ldr	r0, [pc, #132]	; (8003234 <main+0x22cc>)
 80031b0:	f004 f8ff 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Frequency_config;break;
 80031b4:	4b21      	ldr	r3, [pc, #132]	; (800323c <main+0x22d4>)
 80031b6:	2203      	movs	r2, #3
 80031b8:	801a      	strh	r2, [r3, #0]
 80031ba:	e14b      	b.n	8003454 <main+0x24ec>
				case'e':
					{
					char temp[]="Press p : VoltageLow+0.1\r\n";
 80031bc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80031c0:	4a2c      	ldr	r2, [pc, #176]	; (8003274 <main+0x230c>)
 80031c2:	461c      	mov	r4, r3
 80031c4:	4615      	mov	r5, r2
 80031c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80031ce:	c403      	stmia	r4!, {r0, r1}
 80031d0:	8022      	strh	r2, [r4, #0]
 80031d2:	3402      	adds	r4, #2
 80031d4:	0c13      	lsrs	r3, r2, #16
 80031d6:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80031d8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fc ffff 	bl	80001e0 <strlen>
 80031e2:	4603      	mov	r3, r0
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80031ea:	230a      	movs	r3, #10
 80031ec:	4811      	ldr	r0, [pc, #68]	; (8003234 <main+0x22cc>)
 80031ee:	f004 f8e0 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : VoltageLow+0.1\r\n";
 80031f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80031f6:	4a20      	ldr	r2, [pc, #128]	; (8003278 <main+0x2310>)
 80031f8:	461c      	mov	r4, r3
 80031fa:	4615      	mov	r5, r2
 80031fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003200:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003204:	c403      	stmia	r4!, {r0, r1}
 8003206:	8022      	strh	r2, [r4, #0]
 8003208:	3402      	adds	r4, #2
 800320a:	0c13      	lsrs	r3, r2, #16
 800320c:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800320e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003212:	4618      	mov	r0, r3
 8003214:	f7fc ffe4 	bl	80001e0 <strlen>
 8003218:	4603      	mov	r3, r0
 800321a:	b29a      	uxth	r2, r3
 800321c:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8003220:	230a      	movs	r3, #10
 8003222:	4804      	ldr	r0, [pc, #16]	; (8003234 <main+0x22cc>)
 8003224:	f004 f8c5 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_VoltageLow_config;break;
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <main+0x22d4>)
 800322a:	2205      	movs	r2, #5
 800322c:	801a      	strh	r2, [r3, #0]
 800322e:	e111      	b.n	8003454 <main+0x24ec>
 8003230:	08009b64 	.word	0x08009b64
 8003234:	20000360 	.word	0x20000360
 8003238:	08009b80 	.word	0x08009b80
 800323c:	200000a2 	.word	0x200000a2
 8003240:	08009b9c 	.word	0x08009b9c
 8003244:	08009bb4 	.word	0x08009bb4
 8003248:	08009bcc 	.word	0x08009bcc
 800324c:	08009be4 	.word	0x08009be4
 8003250:	08009c24 	.word	0x08009c24
 8003254:	200000c8 	.word	0x200000c8
 8003258:	40080000 	.word	0x40080000
 800325c:	200000a8 	.word	0x200000a8
 8003260:	200000b0 	.word	0x200000b0
 8003264:	200000c0 	.word	0x200000c0
 8003268:	200000e0 	.word	0x200000e0
 800326c:	08009abc 	.word	0x08009abc
 8003270:	08009ad8 	.word	0x08009ad8
 8003274:	08009b2c 	.word	0x08009b2c
 8003278:	08009b48 	.word	0x08009b48
				case's':
					{
					char temp[]="Press p : Voltage+0.1\r\n";
 800327c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003280:	4a76      	ldr	r2, [pc, #472]	; (800345c <main+0x24f4>)
 8003282:	461c      	mov	r4, r3
 8003284:	4615      	mov	r5, r2
 8003286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800328a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800328e:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8003292:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003296:	4618      	mov	r0, r3
 8003298:	f7fc ffa2 	bl	80001e0 <strlen>
 800329c:	4603      	mov	r3, r0
 800329e:	b29a      	uxth	r2, r3
 80032a0:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 80032a4:	230a      	movs	r3, #10
 80032a6:	486e      	ldr	r0, [pc, #440]	; (8003460 <main+0x24f8>)
 80032a8:	f004 f883 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : Voltage+0.1\r\n";
 80032ac:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80032b0:	4a6c      	ldr	r2, [pc, #432]	; (8003464 <main+0x24fc>)
 80032b2:	461c      	mov	r4, r3
 80032b4:	4615      	mov	r5, r2
 80032b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80032be:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80032c2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fc ff8a 	bl	80001e0 <strlen>
 80032cc:	4603      	mov	r3, r0
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80032d4:	230a      	movs	r3, #10
 80032d6:	4862      	ldr	r0, [pc, #392]	; (8003460 <main+0x24f8>)
 80032d8:	f004 f86b 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Voltage_config;break;
 80032dc:	4b62      	ldr	r3, [pc, #392]	; (8003468 <main+0x2500>)
 80032de:	2204      	movs	r2, #4
 80032e0:	801a      	strh	r2, [r3, #0]
 80032e2:	e0b7      	b.n	8003454 <main+0x24ec>
				case'd':
					{
					char temp[]="Press p : Duty cycle+10\r\n";
 80032e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032e8:	4a60      	ldr	r2, [pc, #384]	; (800346c <main+0x2504>)
 80032ea:	461c      	mov	r4, r3
 80032ec:	4615      	mov	r5, r2
 80032ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032f6:	c403      	stmia	r4!, {r0, r1}
 80032f8:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80032fa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fc ff6e 	bl	80001e0 <strlen>
 8003304:	4603      	mov	r3, r0
 8003306:	b29a      	uxth	r2, r3
 8003308:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800330c:	230a      	movs	r3, #10
 800330e:	4854      	ldr	r0, [pc, #336]	; (8003460 <main+0x24f8>)
 8003310:	f004 f84f 	bl	80073b2 <HAL_UART_Transmit>
					}
					{
					char temp[]="Press n : duty cycle-10\r\n";
 8003314:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003318:	4a55      	ldr	r2, [pc, #340]	; (8003470 <main+0x2508>)
 800331a:	461c      	mov	r4, r3
 800331c:	4615      	mov	r5, r2
 800331e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003322:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003326:	c403      	stmia	r4!, {r0, r1}
 8003328:	8022      	strh	r2, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800332a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800332e:	4618      	mov	r0, r3
 8003330:	f7fc ff56 	bl	80001e0 <strlen>
 8003334:	4603      	mov	r3, r0
 8003336:	b29a      	uxth	r2, r3
 8003338:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800333c:	230a      	movs	r3, #10
 800333e:	4848      	ldr	r0, [pc, #288]	; (8003460 <main+0x24f8>)
 8003340:	f004 f837 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Duty_cycle_config;break;
 8003344:	4b48      	ldr	r3, [pc, #288]	; (8003468 <main+0x2500>)
 8003346:	2206      	movs	r2, #6
 8003348:	801a      	strh	r2, [r3, #0]
 800334a:	e083      	b.n	8003454 <main+0x24ec>
				case'w':
				{
				char temp[]="Press 1 : Sawtooth\r\n";
 800334c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003350:	4a48      	ldr	r2, [pc, #288]	; (8003474 <main+0x250c>)
 8003352:	461c      	mov	r4, r3
 8003354:	4615      	mov	r5, r2
 8003356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800335a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800335e:	6020      	str	r0, [r4, #0]
 8003360:	3404      	adds	r4, #4
 8003362:	7021      	strb	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8003364:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003368:	4618      	mov	r0, r3
 800336a:	f7fc ff39 	bl	80001e0 <strlen>
 800336e:	4603      	mov	r3, r0
 8003370:	b29a      	uxth	r2, r3
 8003372:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8003376:	230a      	movs	r3, #10
 8003378:	4839      	ldr	r0, [pc, #228]	; (8003460 <main+0x24f8>)
 800337a:	f004 f81a 	bl	80073b2 <HAL_UART_Transmit>
				}
				{
				char temp[]="Press 2 : Sine Wave\r\n";
 800337e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003382:	4a3d      	ldr	r2, [pc, #244]	; (8003478 <main+0x2510>)
 8003384:	461c      	mov	r4, r3
 8003386:	4615      	mov	r5, r2
 8003388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800338a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800338c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003390:	6020      	str	r0, [r4, #0]
 8003392:	3404      	adds	r4, #4
 8003394:	8021      	strh	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8003396:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800339a:	4618      	mov	r0, r3
 800339c:	f7fc ff20 	bl	80001e0 <strlen>
 80033a0:	4603      	mov	r3, r0
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80033a8:	230a      	movs	r3, #10
 80033aa:	482d      	ldr	r0, [pc, #180]	; (8003460 <main+0x24f8>)
 80033ac:	f004 f801 	bl	80073b2 <HAL_UART_Transmit>
				{
				char temp[]="Press 3 : Square Wave\r\n";
 80033b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033b4:	4a31      	ldr	r2, [pc, #196]	; (800347c <main+0x2514>)
 80033b6:	461c      	mov	r4, r3
 80033b8:	4615      	mov	r5, r2
 80033ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80033c2:	e884 0003 	stmia.w	r4, {r0, r1}
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80033c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fc ff08 	bl	80001e0 <strlen>
 80033d0:	4603      	mov	r3, r0
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80033d8:	230a      	movs	r3, #10
 80033da:	4821      	ldr	r0, [pc, #132]	; (8003460 <main+0x24f8>)
 80033dc:	f003 ffe9 	bl	80073b2 <HAL_UART_Transmit>
				}
				}State=State_Wave_config;break;
 80033e0:	4b21      	ldr	r3, [pc, #132]	; (8003468 <main+0x2500>)
 80033e2:	2207      	movs	r2, #7
 80033e4:	801a      	strh	r2, [r3, #0]
 80033e6:	e035      	b.n	8003454 <main+0x24ec>
				case 'x':
					//back
					{char temp[]="BACK TO MENU\r\n";
 80033e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033ec:	4a24      	ldr	r2, [pc, #144]	; (8003480 <main+0x2518>)
 80033ee:	461c      	mov	r4, r3
 80033f0:	4613      	mov	r3, r2
 80033f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033f4:	c407      	stmia	r4!, {r0, r1, r2}
 80033f6:	8023      	strh	r3, [r4, #0]
 80033f8:	3402      	adds	r4, #2
 80033fa:	0c1b      	lsrs	r3, r3, #16
 80033fc:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);}
 80033fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003402:	4618      	mov	r0, r3
 8003404:	f7fc feec 	bl	80001e0 <strlen>
 8003408:	4603      	mov	r3, r0
 800340a:	b29a      	uxth	r2, r3
 800340c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003410:	230a      	movs	r3, #10
 8003412:	4813      	ldr	r0, [pc, #76]	; (8003460 <main+0x24f8>)
 8003414:	f003 ffcd 	bl	80073b2 <HAL_UART_Transmit>
					State=State_menu;
 8003418:	4b13      	ldr	r3, [pc, #76]	; (8003468 <main+0x2500>)
 800341a:	2201      	movs	r2, #1
 800341c:	801a      	strh	r2, [r3, #0]
					break;
 800341e:	e019      	b.n	8003454 <main+0x24ec>
				default:
					{
						char temp[]="Wrong press again\r\n";
 8003420:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003424:	4a17      	ldr	r2, [pc, #92]	; (8003484 <main+0x251c>)
 8003426:	461c      	mov	r4, r3
 8003428:	4615      	mov	r5, r2
 800342a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800342c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800342e:	682b      	ldr	r3, [r5, #0]
 8003430:	6023      	str	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8003432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003436:	4618      	mov	r0, r3
 8003438:	f7fc fed2 	bl	80001e0 <strlen>
 800343c:	4603      	mov	r3, r0
 800343e:	b29a      	uxth	r2, r3
 8003440:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003444:	230a      	movs	r3, #10
 8003446:	4806      	ldr	r0, [pc, #24]	; (8003460 <main+0x24f8>)
 8003448:	f003 ffb3 	bl	80073b2 <HAL_UART_Transmit>
					}State=State_Square_mode;
 800344c:	4b06      	ldr	r3, [pc, #24]	; (8003468 <main+0x2500>)
 800344e:	220a      	movs	r2, #10
 8003450:	801a      	strh	r2, [r3, #0]
					}
					break;
 8003452:	e01a      	b.n	800348a <main+0x2522>
 8003454:	e019      	b.n	800348a <main+0x2522>

		}
}
 8003456:	bf00      	nop
 8003458:	e017      	b.n	800348a <main+0x2522>
 800345a:	bf00      	nop
 800345c:	08009bf4 	.word	0x08009bf4
 8003460:	20000360 	.word	0x20000360
 8003464:	08009c0c 	.word	0x08009c0c
 8003468:	200000a2 	.word	0x200000a2
 800346c:	08009b64 	.word	0x08009b64
 8003470:	08009b80 	.word	0x08009b80
 8003474:	08009b9c 	.word	0x08009b9c
 8003478:	08009bb4 	.word	0x08009bb4
 800347c:	08009bcc 	.word	0x08009bcc
 8003480:	08009be4 	.word	0x08009be4
 8003484:	08009c24 	.word	0x08009c24
				}break;
 8003488:	bf00      	nop

		static uint64_t timestamp = 0;
		if (micros() - timestamp > 100)
 800348a:	f000 fccb 	bl	8003e24 <micros>
 800348e:	4baa      	ldr	r3, [pc, #680]	; (8003738 <main+0x27d0>)
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	ebb0 0802 	subs.w	r8, r0, r2
 8003498:	eb61 0903 	sbc.w	r9, r1, r3
 800349c:	f1b9 0f00 	cmp.w	r9, #0
 80034a0:	bf08      	it	eq
 80034a2:	f1b8 0f65 	cmpeq.w	r8, #101	; 0x65
 80034a6:	f4fd ad87 	bcc.w	8000fb8 <main+0x50>
		{
			timestamp = micros();
 80034aa:	f000 fcbb 	bl	8003e24 <micros>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	49a1      	ldr	r1, [pc, #644]	; (8003738 <main+0x27d0>)
 80034b4:	e9c1 2300 	strd	r2, r3, [r1]
			dataOut++;
 80034b8:	4ba0      	ldr	r3, [pc, #640]	; (800373c <main+0x27d4>)
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	3301      	adds	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	4b9e      	ldr	r3, [pc, #632]	; (800373c <main+0x27d4>)
 80034c2:	801a      	strh	r2, [r3, #0]
			dataOut %= 4096;
 80034c4:	4b9d      	ldr	r3, [pc, #628]	; (800373c <main+0x27d4>)
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	4b9b      	ldr	r3, [pc, #620]	; (800373c <main+0x27d4>)
 80034d0:	801a      	strh	r2, [r3, #0]
			if (State==State_Sawtooth_mode)
 80034d2:	4b9b      	ldr	r3, [pc, #620]	; (8003740 <main+0x27d8>)
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d169      	bne.n	80035ae <main+0x2646>
			{
				output=dataOut;
 80034da:	4b98      	ldr	r3, [pc, #608]	; (800373c <main+0x27d4>)
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd f818 	bl	8000514 <__aeabi_ui2d>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4996      	ldr	r1, [pc, #600]	; (8003744 <main+0x27dc>)
 80034ea:	e9c1 2300 	strd	r2, r3, [r1]
				if(invert==1){
 80034ee:	4b96      	ldr	r3, [pc, #600]	; (8003748 <main+0x27e0>)
 80034f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	4b94      	ldr	r3, [pc, #592]	; (800374c <main+0x27e4>)
 80034fa:	f7fd faed 	bl	8000ad8 <__aeabi_dcmpeq>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00b      	beq.n	800351c <main+0x25b4>
					output=4096-dataOut;
 8003504:	4b8d      	ldr	r3, [pc, #564]	; (800373c <main+0x27d4>)
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd f811 	bl	8000534 <__aeabi_i2d>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	498b      	ldr	r1, [pc, #556]	; (8003744 <main+0x27dc>)
 8003518:	e9c1 2300 	strd	r2, r3, [r1]
				}
				output=((Voltage-VoltageLow)*((float)dataOut/4095))+VoltageLow;
 800351c:	4b8c      	ldr	r3, [pc, #560]	; (8003750 <main+0x27e8>)
 800351e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003522:	4b8c      	ldr	r3, [pc, #560]	; (8003754 <main+0x27ec>)
 8003524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003528:	f7fc feb6 	bl	8000298 <__aeabi_dsub>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4614      	mov	r4, r2
 8003532:	461d      	mov	r5, r3
 8003534:	4b81      	ldr	r3, [pc, #516]	; (800373c <main+0x27d4>)
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	ee07 3a90 	vmov	s15, r3
 800353c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003540:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8003758 <main+0x27f0>
 8003544:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003548:	ee16 0a90 	vmov	r0, s13
 800354c:	f7fd f804 	bl	8000558 <__aeabi_f2d>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4620      	mov	r0, r4
 8003556:	4629      	mov	r1, r5
 8003558:	f7fd f856 	bl	8000608 <__aeabi_dmul>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	4b7b      	ldr	r3, [pc, #492]	; (8003754 <main+0x27ec>)
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f7fc fe97 	bl	800029c <__adddf3>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4974      	ldr	r1, [pc, #464]	; (8003744 <main+0x27dc>)
 8003574:	e9c1 2300 	strd	r2, r3, [r1]
				output=output/3.3;
 8003578:	4b72      	ldr	r3, [pc, #456]	; (8003744 <main+0x27dc>)
 800357a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800357e:	a366      	add	r3, pc, #408	; (adr r3, 8003718 <main+0x27b0>)
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	f7fd f96a 	bl	800085c <__aeabi_ddiv>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	496d      	ldr	r1, [pc, #436]	; (8003744 <main+0x27dc>)
 800358e:	e9c1 2300 	strd	r2, r3, [r1]
				output=output*4095;
 8003592:	4b6c      	ldr	r3, [pc, #432]	; (8003744 <main+0x27dc>)
 8003594:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003598:	a361      	add	r3, pc, #388	; (adr r3, 8003720 <main+0x27b8>)
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f7fd f833 	bl	8000608 <__aeabi_dmul>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4967      	ldr	r1, [pc, #412]	; (8003744 <main+0x27dc>)
 80035a8:	e9c1 2300 	strd	r2, r3, [r1]
 80035ac:	e12c      	b.n	8003808 <main+0x28a0>
				//MCP4922SetOutput(DACConfig, dataOut);
			}
			else if(State==State_Sine_mode){
 80035ae:	4b64      	ldr	r3, [pc, #400]	; (8003740 <main+0x27d8>)
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	2b09      	cmp	r3, #9
 80035b4:	f040 8088 	bne.w	80036c8 <main+0x2760>
				output=sin(((float)dataOut/4095)*2*M_PI);
 80035b8:	4b60      	ldr	r3, [pc, #384]	; (800373c <main+0x27d4>)
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	ee07 3a90 	vmov	s15, r3
 80035c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035c4:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003758 <main+0x27f0>
 80035c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035d0:	ee17 0a90 	vmov	r0, s15
 80035d4:	f7fc ffc0 	bl	8000558 <__aeabi_f2d>
 80035d8:	a353      	add	r3, pc, #332	; (adr r3, 8003728 <main+0x27c0>)
 80035da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035de:	f7fd f813 	bl	8000608 <__aeabi_dmul>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	ec43 2b17 	vmov	d7, r2, r3
 80035ea:	eeb0 0a47 	vmov.f32	s0, s14
 80035ee:	eef0 0a67 	vmov.f32	s1, s15
 80035f2:	f005 f965 	bl	80088c0 <sin>
 80035f6:	eeb0 7a40 	vmov.f32	s14, s0
 80035fa:	eef0 7a60 	vmov.f32	s15, s1
 80035fe:	4b51      	ldr	r3, [pc, #324]	; (8003744 <main+0x27dc>)
 8003600:	ed83 7b00 	vstr	d7, [r3]
				output=output*(4095/2)+(4095/2);
 8003604:	4b4f      	ldr	r3, [pc, #316]	; (8003744 <main+0x27dc>)
 8003606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800360a:	a349      	add	r3, pc, #292	; (adr r3, 8003730 <main+0x27c8>)
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f7fc fffa 	bl	8000608 <__aeabi_dmul>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4610      	mov	r0, r2
 800361a:	4619      	mov	r1, r3
 800361c:	a344      	add	r3, pc, #272	; (adr r3, 8003730 <main+0x27c8>)
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	f7fc fe3b 	bl	800029c <__adddf3>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4946      	ldr	r1, [pc, #280]	; (8003744 <main+0x27dc>)
 800362c:	e9c1 2300 	strd	r2, r3, [r1]
				output=((Voltage-VoltageLow)*((float)output/4095))+VoltageLow;
 8003630:	4b47      	ldr	r3, [pc, #284]	; (8003750 <main+0x27e8>)
 8003632:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003636:	4b47      	ldr	r3, [pc, #284]	; (8003754 <main+0x27ec>)
 8003638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363c:	f7fc fe2c 	bl	8000298 <__aeabi_dsub>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4614      	mov	r4, r2
 8003646:	461d      	mov	r5, r3
 8003648:	4b3e      	ldr	r3, [pc, #248]	; (8003744 <main+0x27dc>)
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	4610      	mov	r0, r2
 8003650:	4619      	mov	r1, r3
 8003652:	f7fd fabb 	bl	8000bcc <__aeabi_d2f>
 8003656:	ee06 0a90 	vmov	s13, r0
 800365a:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8003758 <main+0x27f0>
 800365e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003662:	ee17 0a10 	vmov	r0, s14
 8003666:	f7fc ff77 	bl	8000558 <__aeabi_f2d>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4620      	mov	r0, r4
 8003670:	4629      	mov	r1, r5
 8003672:	f7fc ffc9 	bl	8000608 <__aeabi_dmul>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4610      	mov	r0, r2
 800367c:	4619      	mov	r1, r3
 800367e:	4b35      	ldr	r3, [pc, #212]	; (8003754 <main+0x27ec>)
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	f7fc fe0a 	bl	800029c <__adddf3>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	492d      	ldr	r1, [pc, #180]	; (8003744 <main+0x27dc>)
 800368e:	e9c1 2300 	strd	r2, r3, [r1]
				output=output/3.3;
 8003692:	4b2c      	ldr	r3, [pc, #176]	; (8003744 <main+0x27dc>)
 8003694:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003698:	a31f      	add	r3, pc, #124	; (adr r3, 8003718 <main+0x27b0>)
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	f7fd f8dd 	bl	800085c <__aeabi_ddiv>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4927      	ldr	r1, [pc, #156]	; (8003744 <main+0x27dc>)
 80036a8:	e9c1 2300 	strd	r2, r3, [r1]
				output=output*4095;
 80036ac:	4b25      	ldr	r3, [pc, #148]	; (8003744 <main+0x27dc>)
 80036ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036b2:	a31b      	add	r3, pc, #108	; (adr r3, 8003720 <main+0x27b8>)
 80036b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b8:	f7fc ffa6 	bl	8000608 <__aeabi_dmul>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4920      	ldr	r1, [pc, #128]	; (8003744 <main+0x27dc>)
 80036c2:	e9c1 2300 	strd	r2, r3, [r1]
 80036c6:	e09f      	b.n	8003808 <main+0x28a0>
			}
			else if(State==State_Square_mode){
 80036c8:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <main+0x27d8>)
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	2b0a      	cmp	r3, #10
 80036ce:	f040 809b 	bne.w	8003808 <main+0x28a0>
				if(((float)dataOut/4095)*100<=duty){
 80036d2:	4b1a      	ldr	r3, [pc, #104]	; (800373c <main+0x27d4>)
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036de:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8003758 <main+0x27f0>
 80036e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036e6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800375c <main+0x27f4>
 80036ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ee:	ee17 0a90 	vmov	r0, s15
 80036f2:	f7fc ff31 	bl	8000558 <__aeabi_f2d>
 80036f6:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <main+0x27f8>)
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	f7fd fa00 	bl	8000b00 <__aeabi_dcmple>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d02e      	beq.n	8003764 <main+0x27fc>
					output=4095;
 8003706:	490f      	ldr	r1, [pc, #60]	; (8003744 <main+0x27dc>)
 8003708:	a305      	add	r3, pc, #20	; (adr r3, 8003720 <main+0x27b8>)
 800370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370e:	e9c1 2300 	strd	r2, r3, [r1]
 8003712:	e02e      	b.n	8003772 <main+0x280a>
 8003714:	f3af 8000 	nop.w
 8003718:	66666666 	.word	0x66666666
 800371c:	400a6666 	.word	0x400a6666
 8003720:	00000000 	.word	0x00000000
 8003724:	40affe00 	.word	0x40affe00
 8003728:	54442d18 	.word	0x54442d18
 800372c:	400921fb 	.word	0x400921fb
 8003730:	00000000 	.word	0x00000000
 8003734:	409ffc00 	.word	0x409ffc00
 8003738:	200001b8 	.word	0x200001b8
 800373c:	200000a0 	.word	0x200000a0
 8003740:	200000a2 	.word	0x200000a2
 8003744:	200000e8 	.word	0x200000e8
 8003748:	200000f0 	.word	0x200000f0
 800374c:	3ff00000 	.word	0x3ff00000
 8003750:	200000b0 	.word	0x200000b0
 8003754:	200000b8 	.word	0x200000b8
 8003758:	457ff000 	.word	0x457ff000
 800375c:	42c80000 	.word	0x42c80000
 8003760:	200000c0 	.word	0x200000c0
				}
				else{
					output=0;
 8003764:	493c      	ldr	r1, [pc, #240]	; (8003858 <main+0x28f0>)
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	e9c1 2300 	strd	r2, r3, [r1]
				}
				output=((Voltage-VoltageLow)*((float)output/4095))+VoltageLow;
 8003772:	4b3a      	ldr	r3, [pc, #232]	; (800385c <main+0x28f4>)
 8003774:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003778:	4b39      	ldr	r3, [pc, #228]	; (8003860 <main+0x28f8>)
 800377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377e:	f7fc fd8b 	bl	8000298 <__aeabi_dsub>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4614      	mov	r4, r2
 8003788:	461d      	mov	r5, r3
 800378a:	4b33      	ldr	r3, [pc, #204]	; (8003858 <main+0x28f0>)
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	4610      	mov	r0, r2
 8003792:	4619      	mov	r1, r3
 8003794:	f7fd fa1a 	bl	8000bcc <__aeabi_d2f>
 8003798:	ee06 0a90 	vmov	s13, r0
 800379c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8003864 <main+0x28fc>
 80037a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037a4:	ee17 0a10 	vmov	r0, s14
 80037a8:	f7fc fed6 	bl	8000558 <__aeabi_f2d>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4620      	mov	r0, r4
 80037b2:	4629      	mov	r1, r5
 80037b4:	f7fc ff28 	bl	8000608 <__aeabi_dmul>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4610      	mov	r0, r2
 80037be:	4619      	mov	r1, r3
 80037c0:	4b27      	ldr	r3, [pc, #156]	; (8003860 <main+0x28f8>)
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	f7fc fd69 	bl	800029c <__adddf3>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4922      	ldr	r1, [pc, #136]	; (8003858 <main+0x28f0>)
 80037d0:	e9c1 2300 	strd	r2, r3, [r1]
				output=output/3.3;
 80037d4:	4b20      	ldr	r3, [pc, #128]	; (8003858 <main+0x28f0>)
 80037d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037da:	a31d      	add	r3, pc, #116	; (adr r3, 8003850 <main+0x28e8>)
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f7fd f83c 	bl	800085c <__aeabi_ddiv>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	491b      	ldr	r1, [pc, #108]	; (8003858 <main+0x28f0>)
 80037ea:	e9c1 2300 	strd	r2, r3, [r1]
				output=output*4096;
 80037ee:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <main+0x28f0>)
 80037f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <main+0x2900>)
 80037fa:	f7fc ff05 	bl	8000608 <__aeabi_dmul>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4915      	ldr	r1, [pc, #84]	; (8003858 <main+0x28f0>)
 8003804:	e9c1 2300 	strd	r2, r3, [r1]
			}

			if (hspi3.State == HAL_SPI_STATE_READY
 8003808:	4b18      	ldr	r3, [pc, #96]	; (800386c <main+0x2904>)
 800380a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	f47d abd1 	bne.w	8000fb8 <main+0x50>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 8003816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800381a:	4815      	ldr	r0, [pc, #84]	; (8003870 <main+0x2908>)
 800381c:	f002 f896 	bl	800594c <HAL_GPIO_ReadPin>
 8003820:	4603      	mov	r3, r0
 8003822:	2b01      	cmp	r3, #1
 8003824:	f47d abc8 	bne.w	8000fb8 <main+0x50>
							== GPIO_PIN_SET)
			{
				MCP4922SetOutput(DACConfig, (uint16_t)output);
 8003828:	4b12      	ldr	r3, [pc, #72]	; (8003874 <main+0x290c>)
 800382a:	781c      	ldrb	r4, [r3, #0]
 800382c:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <main+0x28f0>)
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	f7fd f9a9 	bl	8000b8c <__aeabi_d2uiz>
 800383a:	4603      	mov	r3, r0
 800383c:	b29b      	uxth	r3, r3
 800383e:	4619      	mov	r1, r3
 8003840:	4620      	mov	r0, r4
 8003842:	f000 fa65 	bl	8003d10 <MCP4922SetOutput>
	{
 8003846:	f7fd bbb7 	b.w	8000fb8 <main+0x50>
 800384a:	bf00      	nop
 800384c:	f3af 8000 	nop.w
 8003850:	66666666 	.word	0x66666666
 8003854:	400a6666 	.word	0x400a6666
 8003858:	200000e8 	.word	0x200000e8
 800385c:	200000b0 	.word	0x200000b0
 8003860:	200000b8 	.word	0x200000b8
 8003864:	457ff000 	.word	0x457ff000
 8003868:	40b00000 	.word	0x40b00000
 800386c:	20000218 	.word	0x20000218
 8003870:	40020400 	.word	0x40020400
 8003874:	20000000 	.word	0x20000000

08003878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b094      	sub	sp, #80	; 0x50
 800387c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800387e:	f107 0320 	add.w	r3, r7, #32
 8003882:	2230      	movs	r2, #48	; 0x30
 8003884:	2100      	movs	r1, #0
 8003886:	4618      	mov	r0, r3
 8003888:	f004 fbe2 	bl	8008050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800389c:	2300      	movs	r3, #0
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	4b27      	ldr	r3, [pc, #156]	; (8003940 <SystemClock_Config+0xc8>)
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	4a26      	ldr	r2, [pc, #152]	; (8003940 <SystemClock_Config+0xc8>)
 80038a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6413      	str	r3, [r2, #64]	; 0x40
 80038ac:	4b24      	ldr	r3, [pc, #144]	; (8003940 <SystemClock_Config+0xc8>)
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038b8:	2300      	movs	r3, #0
 80038ba:	607b      	str	r3, [r7, #4]
 80038bc:	4b21      	ldr	r3, [pc, #132]	; (8003944 <SystemClock_Config+0xcc>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a20      	ldr	r2, [pc, #128]	; (8003944 <SystemClock_Config+0xcc>)
 80038c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <SystemClock_Config+0xcc>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038d4:	2302      	movs	r3, #2
 80038d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038d8:	2301      	movs	r3, #1
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038dc:	2310      	movs	r3, #16
 80038de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038e0:	2302      	movs	r3, #2
 80038e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038e4:	2300      	movs	r3, #0
 80038e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80038e8:	2308      	movs	r3, #8
 80038ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80038ec:	2364      	movs	r3, #100	; 0x64
 80038ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038f0:	2302      	movs	r3, #2
 80038f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80038f4:	2304      	movs	r3, #4
 80038f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038f8:	f107 0320 	add.w	r3, r7, #32
 80038fc:	4618      	mov	r0, r3
 80038fe:	f002 f857 	bl	80059b0 <HAL_RCC_OscConfig>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003908:	f000 faa6 	bl	8003e58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800390c:	230f      	movs	r3, #15
 800390e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003910:	2302      	movs	r3, #2
 8003912:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800391c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003922:	f107 030c 	add.w	r3, r7, #12
 8003926:	2103      	movs	r1, #3
 8003928:	4618      	mov	r0, r3
 800392a:	f002 fab9 	bl	8005ea0 <HAL_RCC_ClockConfig>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003934:	f000 fa90 	bl	8003e58 <Error_Handler>
  }
}
 8003938:	bf00      	nop
 800393a:	3750      	adds	r7, #80	; 0x50
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40023800 	.word	0x40023800
 8003944:	40007000 	.word	0x40007000

08003948 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800394e:	463b      	mov	r3, r7
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800395a:	4b22      	ldr	r3, [pc, #136]	; (80039e4 <MX_ADC1_Init+0x9c>)
 800395c:	4a22      	ldr	r2, [pc, #136]	; (80039e8 <MX_ADC1_Init+0xa0>)
 800395e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003960:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <MX_ADC1_Init+0x9c>)
 8003962:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003966:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003968:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <MX_ADC1_Init+0x9c>)
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800396e:	4b1d      	ldr	r3, [pc, #116]	; (80039e4 <MX_ADC1_Init+0x9c>)
 8003970:	2201      	movs	r2, #1
 8003972:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003974:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <MX_ADC1_Init+0x9c>)
 8003976:	2200      	movs	r2, #0
 8003978:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800397a:	4b1a      	ldr	r3, [pc, #104]	; (80039e4 <MX_ADC1_Init+0x9c>)
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003982:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <MX_ADC1_Init+0x9c>)
 8003984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003988:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800398a:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <MX_ADC1_Init+0x9c>)
 800398c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003990:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003992:	4b14      	ldr	r3, [pc, #80]	; (80039e4 <MX_ADC1_Init+0x9c>)
 8003994:	2200      	movs	r2, #0
 8003996:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003998:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <MX_ADC1_Init+0x9c>)
 800399a:	2201      	movs	r2, #1
 800399c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800399e:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <MX_ADC1_Init+0x9c>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80039a6:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <MX_ADC1_Init+0x9c>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80039ac:	480d      	ldr	r0, [pc, #52]	; (80039e4 <MX_ADC1_Init+0x9c>)
 80039ae:	f000 fd33 	bl	8004418 <HAL_ADC_Init>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80039b8:	f000 fa4e 	bl	8003e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80039bc:	2300      	movs	r3, #0
 80039be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80039c0:	2301      	movs	r3, #1
 80039c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039c8:	463b      	mov	r3, r7
 80039ca:	4619      	mov	r1, r3
 80039cc:	4805      	ldr	r0, [pc, #20]	; (80039e4 <MX_ADC1_Init+0x9c>)
 80039ce:	f000 fe75 	bl	80046bc <HAL_ADC_ConfigChannel>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80039d8:	f000 fa3e 	bl	8003e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20000270 	.word	0x20000270
 80039e8:	40012000 	.word	0x40012000

080039ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80039f0:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <MX_SPI3_Init+0x68>)
 80039f2:	4a19      	ldr	r2, [pc, #100]	; (8003a58 <MX_SPI3_Init+0x6c>)
 80039f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80039f6:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <MX_SPI3_Init+0x68>)
 80039f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <MX_SPI3_Init+0x68>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8003a04:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <MX_SPI3_Init+0x68>)
 8003a06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a0a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a0c:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <MX_SPI3_Init+0x68>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a12:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <MX_SPI3_Init+0x68>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003a18:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <MX_SPI3_Init+0x68>)
 8003a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a1e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <MX_SPI3_Init+0x68>)
 8003a22:	2220      	movs	r2, #32
 8003a24:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a26:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <MX_SPI3_Init+0x68>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <MX_SPI3_Init+0x68>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a32:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <MX_SPI3_Init+0x68>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003a38:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <MX_SPI3_Init+0x68>)
 8003a3a:	220a      	movs	r2, #10
 8003a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003a3e:	4805      	ldr	r0, [pc, #20]	; (8003a54 <MX_SPI3_Init+0x68>)
 8003a40:	f002 fc2a 	bl	8006298 <HAL_SPI_Init>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8003a4a:	f000 fa05 	bl	8003e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20000218 	.word	0x20000218
 8003a58:	40003c00 	.word	0x40003c00

08003a5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a62:	f107 0308 	add.w	r3, r7, #8
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	605a      	str	r2, [r3, #4]
 8003a6c:	609a      	str	r2, [r3, #8]
 8003a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a70:	463b      	mov	r3, r7
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a78:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <MX_TIM3_Init+0x90>)
 8003a7a:	4a1d      	ldr	r2, [pc, #116]	; (8003af0 <MX_TIM3_Init+0x94>)
 8003a7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8003a7e:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <MX_TIM3_Init+0x90>)
 8003a80:	2264      	movs	r2, #100	; 0x64
 8003a82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a84:	4b19      	ldr	r3, [pc, #100]	; (8003aec <MX_TIM3_Init+0x90>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8003a8a:	4b18      	ldr	r3, [pc, #96]	; (8003aec <MX_TIM3_Init+0x90>)
 8003a8c:	2264      	movs	r2, #100	; 0x64
 8003a8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a90:	4b16      	ldr	r3, [pc, #88]	; (8003aec <MX_TIM3_Init+0x90>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a96:	4b15      	ldr	r3, [pc, #84]	; (8003aec <MX_TIM3_Init+0x90>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a9c:	4813      	ldr	r0, [pc, #76]	; (8003aec <MX_TIM3_Init+0x90>)
 8003a9e:	f002 ff9f 	bl	80069e0 <HAL_TIM_Base_Init>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8003aa8:	f000 f9d6 	bl	8003e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ab0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003ab2:	f107 0308 	add.w	r3, r7, #8
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	480c      	ldr	r0, [pc, #48]	; (8003aec <MX_TIM3_Init+0x90>)
 8003aba:	f003 f9a5 	bl	8006e08 <HAL_TIM_ConfigClockSource>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8003ac4:	f000 f9c8 	bl	8003e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ac8:	2320      	movs	r3, #32
 8003aca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ad0:	463b      	mov	r3, r7
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4805      	ldr	r0, [pc, #20]	; (8003aec <MX_TIM3_Init+0x90>)
 8003ad6:	f003 fb9d 	bl	8007214 <HAL_TIMEx_MasterConfigSynchronization>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8003ae0:	f000 f9ba 	bl	8003e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ae4:	bf00      	nop
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	200001d0 	.word	0x200001d0
 8003af0:	40000400 	.word	0x40000400

08003af4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003af8:	4b0e      	ldr	r3, [pc, #56]	; (8003b34 <MX_TIM11_Init+0x40>)
 8003afa:	4a0f      	ldr	r2, [pc, #60]	; (8003b38 <MX_TIM11_Init+0x44>)
 8003afc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100;
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <MX_TIM11_Init+0x40>)
 8003b00:	2264      	movs	r2, #100	; 0x64
 8003b02:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <MX_TIM11_Init+0x40>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <MX_TIM11_Init+0x40>)
 8003b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b10:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b12:	4b08      	ldr	r3, [pc, #32]	; (8003b34 <MX_TIM11_Init+0x40>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <MX_TIM11_Init+0x40>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003b1e:	4805      	ldr	r0, [pc, #20]	; (8003b34 <MX_TIM11_Init+0x40>)
 8003b20:	f002 ff5e 	bl	80069e0 <HAL_TIM_Base_Init>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003b2a:	f000 f995 	bl	8003e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	200002b8 	.word	0x200002b8
 8003b38:	40014800 	.word	0x40014800

08003b3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b40:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b42:	4a12      	ldr	r2, [pc, #72]	; (8003b8c <MX_USART2_UART_Init+0x50>)
 8003b44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b46:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b60:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b62:	220c      	movs	r2, #12
 8003b64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b72:	4805      	ldr	r0, [pc, #20]	; (8003b88 <MX_USART2_UART_Init+0x4c>)
 8003b74:	f003 fbd0 	bl	8007318 <HAL_UART_Init>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b7e:	f000 f96b 	bl	8003e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000360 	.word	0x20000360
 8003b8c:	40004400 	.word	0x40004400

08003b90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <MX_DMA_Init+0x3c>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	4a0b      	ldr	r2, [pc, #44]	; (8003bcc <MX_DMA_Init+0x3c>)
 8003ba0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <MX_DMA_Init+0x3c>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bae:	607b      	str	r3, [r7, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	2038      	movs	r0, #56	; 0x38
 8003bb8:	f001 f90b 	bl	8004dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003bbc:	2038      	movs	r0, #56	; 0x38
 8003bbe:	f001 f924 	bl	8004e0a <HAL_NVIC_EnableIRQ>

}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800

08003bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08a      	sub	sp, #40	; 0x28
 8003bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	605a      	str	r2, [r3, #4]
 8003be0:	609a      	str	r2, [r3, #8]
 8003be2:	60da      	str	r2, [r3, #12]
 8003be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	4b44      	ldr	r3, [pc, #272]	; (8003cfc <MX_GPIO_Init+0x12c>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	4a43      	ldr	r2, [pc, #268]	; (8003cfc <MX_GPIO_Init+0x12c>)
 8003bf0:	f043 0304 	orr.w	r3, r3, #4
 8003bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf6:	4b41      	ldr	r3, [pc, #260]	; (8003cfc <MX_GPIO_Init+0x12c>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	4b3d      	ldr	r3, [pc, #244]	; (8003cfc <MX_GPIO_Init+0x12c>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	4a3c      	ldr	r2, [pc, #240]	; (8003cfc <MX_GPIO_Init+0x12c>)
 8003c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c10:	6313      	str	r3, [r2, #48]	; 0x30
 8003c12:	4b3a      	ldr	r3, [pc, #232]	; (8003cfc <MX_GPIO_Init+0x12c>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	4b36      	ldr	r3, [pc, #216]	; (8003cfc <MX_GPIO_Init+0x12c>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	4a35      	ldr	r2, [pc, #212]	; (8003cfc <MX_GPIO_Init+0x12c>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2e:	4b33      	ldr	r3, [pc, #204]	; (8003cfc <MX_GPIO_Init+0x12c>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	60bb      	str	r3, [r7, #8]
 8003c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	4b2f      	ldr	r3, [pc, #188]	; (8003cfc <MX_GPIO_Init+0x12c>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	4a2e      	ldr	r2, [pc, #184]	; (8003cfc <MX_GPIO_Init+0x12c>)
 8003c44:	f043 0302 	orr.w	r3, r3, #2
 8003c48:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4a:	4b2c      	ldr	r3, [pc, #176]	; (8003cfc <MX_GPIO_Init+0x12c>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	607b      	str	r3, [r7, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003c56:	2200      	movs	r2, #0
 8003c58:	2120      	movs	r1, #32
 8003c5a:	4829      	ldr	r0, [pc, #164]	; (8003d00 <MX_GPIO_Init+0x130>)
 8003c5c:	f001 fe8e 	bl	800597c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8003c60:	2201      	movs	r2, #1
 8003c62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c66:	4827      	ldr	r0, [pc, #156]	; (8003d04 <MX_GPIO_Init+0x134>)
 8003c68:	f001 fe88 	bl	800597c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	2180      	movs	r1, #128	; 0x80
 8003c70:	4825      	ldr	r0, [pc, #148]	; (8003d08 <MX_GPIO_Init+0x138>)
 8003c72:	f001 fe83 	bl	800597c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8003c76:	2201      	movs	r2, #1
 8003c78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c7c:	4820      	ldr	r0, [pc, #128]	; (8003d00 <MX_GPIO_Init+0x130>)
 8003c7e:	f001 fe7d 	bl	800597c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c88:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <MX_GPIO_Init+0x13c>)
 8003c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003c90:	f107 0314 	add.w	r3, r7, #20
 8003c94:	4619      	mov	r1, r3
 8003c96:	481c      	ldr	r0, [pc, #112]	; (8003d08 <MX_GPIO_Init+0x138>)
 8003c98:	f001 fcd4 	bl	8005644 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8003c9c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003caa:	2300      	movs	r3, #0
 8003cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cae:	f107 0314 	add.w	r3, r7, #20
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4812      	ldr	r0, [pc, #72]	; (8003d00 <MX_GPIO_Init+0x130>)
 8003cb6:	f001 fcc5 	bl	8005644 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8003cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8003ccc:	f107 0314 	add.w	r3, r7, #20
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	480c      	ldr	r0, [pc, #48]	; (8003d04 <MX_GPIO_Init+0x134>)
 8003cd4:	f001 fcb6 	bl	8005644 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8003cd8:	2380      	movs	r3, #128	; 0x80
 8003cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8003ce8:	f107 0314 	add.w	r3, r7, #20
 8003cec:	4619      	mov	r1, r3
 8003cee:	4806      	ldr	r0, [pc, #24]	; (8003d08 <MX_GPIO_Init+0x138>)
 8003cf0:	f001 fca8 	bl	8005644 <HAL_GPIO_Init>

}
 8003cf4:	bf00      	nop
 8003cf6:	3728      	adds	r7, #40	; 0x28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40020000 	.word	0x40020000
 8003d04:	40020400 	.word	0x40020400
 8003d08:	40020800 	.word	0x40020800
 8003d0c:	10210000 	.word	0x10210000

08003d10 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	460a      	mov	r2, r1
 8003d1a:	71fb      	strb	r3, [r7, #7]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8003d20:	88bb      	ldrh	r3, [r7, #4]
 8003d22:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	031b      	lsls	r3, r3, #12
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8003d30:	2200      	movs	r2, #0
 8003d32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d36:	4807      	ldr	r0, [pc, #28]	; (8003d54 <MCP4922SetOutput+0x44>)
 8003d38:	f001 fe20 	bl	800597c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8003d3c:	f107 030c 	add.w	r3, r7, #12
 8003d40:	2201      	movs	r2, #1
 8003d42:	4619      	mov	r1, r3
 8003d44:	4804      	ldr	r0, [pc, #16]	; (8003d58 <MCP4922SetOutput+0x48>)
 8003d46:	f002 fb31 	bl	80063ac <HAL_SPI_Transmit_IT>
}
 8003d4a:	bf00      	nop
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40020400 	.word	0x40020400
 8003d58:	20000218 	.word	0x20000218

08003d5c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a06      	ldr	r2, [pc, #24]	; (8003d80 <HAL_SPI_TxCpltCallback+0x24>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d105      	bne.n	8003d78 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d72:	4804      	ldr	r0, [pc, #16]	; (8003d84 <HAL_SPI_TxCpltCallback+0x28>)
 8003d74:	f001 fe02 	bl	800597c <HAL_GPIO_WritePin>
	}
}
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000218 	.word	0x20000218
 8003d84:	40020400 	.word	0x40020400

08003d88 <UARTRecieveIT>:
int16_t UARTRecieveIT()
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8003d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d92:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <UARTRecieveIT+0x54>)
 8003d96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <UARTRecieveIT+0x54>)
 8003d9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	4a0f      	ldr	r2, [pc, #60]	; (8003de0 <UARTRecieveIT+0x58>)
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d010      	beq.n	8003dcc <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 8003daa:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <UARTRecieveIT+0x58>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a0d      	ldr	r2, [pc, #52]	; (8003de4 <UARTRecieveIT+0x5c>)
 8003db0:	5cd3      	ldrb	r3, [r2, r3]
 8003db2:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8003db4:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <UARTRecieveIT+0x58>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	4a08      	ldr	r2, [pc, #32]	; (8003ddc <UARTRecieveIT+0x54>)
 8003dbc:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8003dbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8003dc2:	fb02 f201 	mul.w	r2, r2, r1
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	4a05      	ldr	r2, [pc, #20]	; (8003de0 <UARTRecieveIT+0x58>)
 8003dca:	6013      	str	r3, [r2, #0]
	}
	return data;
 8003dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	20000360 	.word	0x20000360
 8003de0:	200001c0 	.word	0x200001c0
 8003de4:	200000f8 	.word	0x200000f8

08003de8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003de8:	b4b0      	push	{r4, r5, r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d10c      	bne.n	8003e12 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micro += 65535;
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003e02:	f04f 0100 	mov.w	r1, #0
 8003e06:	1814      	adds	r4, r2, r0
 8003e08:	eb43 0501 	adc.w	r5, r3, r1
 8003e0c:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003e0e:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bcb0      	pop	{r4, r5, r7}
 8003e1a:	4770      	bx	lr
 8003e1c:	200002b8 	.word	0x200002b8
 8003e20:	20000098 	.word	0x20000098

08003e24 <micros>:

inline uint64_t micros()
{
 8003e24:	b4b0      	push	{r4, r5, r7}
 8003e26:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8003e28:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <micros+0x2c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f04f 0100 	mov.w	r1, #0
 8003e34:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <micros+0x30>)
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	1884      	adds	r4, r0, r2
 8003e3c:	eb41 0503 	adc.w	r5, r1, r3
 8003e40:	4622      	mov	r2, r4
 8003e42:	462b      	mov	r3, r5
}
 8003e44:	4610      	mov	r0, r2
 8003e46:	4619      	mov	r1, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bcb0      	pop	{r4, r5, r7}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	200002b8 	.word	0x200002b8
 8003e54:	20000098 	.word	0x20000098

08003e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e5c:	b672      	cpsid	i
}
 8003e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003e60:	e7fe      	b.n	8003e60 <Error_Handler+0x8>
	...

08003e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	607b      	str	r3, [r7, #4]
 8003e6e:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <HAL_MspInit+0x4c>)
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	4a0f      	ldr	r2, [pc, #60]	; (8003eb0 <HAL_MspInit+0x4c>)
 8003e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e78:	6453      	str	r3, [r2, #68]	; 0x44
 8003e7a:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <HAL_MspInit+0x4c>)
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e82:	607b      	str	r3, [r7, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	603b      	str	r3, [r7, #0]
 8003e8a:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <HAL_MspInit+0x4c>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <HAL_MspInit+0x4c>)
 8003e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e94:	6413      	str	r3, [r2, #64]	; 0x40
 8003e96:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <HAL_MspInit+0x4c>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003ea2:	2007      	movs	r0, #7
 8003ea4:	f000 ff8a 	bl	8004dbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ea8:	bf00      	nop
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40023800 	.word	0x40023800

08003eb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08a      	sub	sp, #40	; 0x28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ebc:	f107 0314 	add.w	r3, r7, #20
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	609a      	str	r2, [r3, #8]
 8003ec8:	60da      	str	r2, [r3, #12]
 8003eca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a2f      	ldr	r2, [pc, #188]	; (8003f90 <HAL_ADC_MspInit+0xdc>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d157      	bne.n	8003f86 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	4b2e      	ldr	r3, [pc, #184]	; (8003f94 <HAL_ADC_MspInit+0xe0>)
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	4a2d      	ldr	r2, [pc, #180]	; (8003f94 <HAL_ADC_MspInit+0xe0>)
 8003ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ee6:	4b2b      	ldr	r3, [pc, #172]	; (8003f94 <HAL_ADC_MspInit+0xe0>)
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <HAL_ADC_MspInit+0xe0>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	4a26      	ldr	r2, [pc, #152]	; (8003f94 <HAL_ADC_MspInit+0xe0>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	6313      	str	r3, [r2, #48]	; 0x30
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <HAL_ADC_MspInit+0xe0>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f12:	2303      	movs	r3, #3
 8003f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f1a:	f107 0314 	add.w	r3, r7, #20
 8003f1e:	4619      	mov	r1, r3
 8003f20:	481d      	ldr	r0, [pc, #116]	; (8003f98 <HAL_ADC_MspInit+0xe4>)
 8003f22:	f001 fb8f 	bl	8005644 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003f26:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <HAL_ADC_MspInit+0xe8>)
 8003f28:	4a1d      	ldr	r2, [pc, #116]	; (8003fa0 <HAL_ADC_MspInit+0xec>)
 8003f2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <HAL_ADC_MspInit+0xe8>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f32:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <HAL_ADC_MspInit+0xe8>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f38:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <HAL_ADC_MspInit+0xe8>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003f3e:	4b17      	ldr	r3, [pc, #92]	; (8003f9c <HAL_ADC_MspInit+0xe8>)
 8003f40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <HAL_ADC_MspInit+0xe8>)
 8003f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f4e:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <HAL_ADC_MspInit+0xe8>)
 8003f50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003f56:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <HAL_ADC_MspInit+0xe8>)
 8003f58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <HAL_ADC_MspInit+0xe8>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f64:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <HAL_ADC_MspInit+0xe8>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003f6a:	480c      	ldr	r0, [pc, #48]	; (8003f9c <HAL_ADC_MspInit+0xe8>)
 8003f6c:	f000 ff68 	bl	8004e40 <HAL_DMA_Init>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003f76:	f7ff ff6f 	bl	8003e58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a07      	ldr	r2, [pc, #28]	; (8003f9c <HAL_ADC_MspInit+0xe8>)
 8003f7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003f80:	4a06      	ldr	r2, [pc, #24]	; (8003f9c <HAL_ADC_MspInit+0xe8>)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f86:	bf00      	nop
 8003f88:	3728      	adds	r7, #40	; 0x28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40012000 	.word	0x40012000
 8003f94:	40023800 	.word	0x40023800
 8003f98:	40020000 	.word	0x40020000
 8003f9c:	20000300 	.word	0x20000300
 8003fa0:	40026410 	.word	0x40026410

08003fa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08a      	sub	sp, #40	; 0x28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fac:	f107 0314 	add.w	r3, r7, #20
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <HAL_SPI_MspInit+0x94>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d133      	bne.n	800402e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	4b1c      	ldr	r3, [pc, #112]	; (800403c <HAL_SPI_MspInit+0x98>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	4a1b      	ldr	r2, [pc, #108]	; (800403c <HAL_SPI_MspInit+0x98>)
 8003fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd6:	4b19      	ldr	r3, [pc, #100]	; (800403c <HAL_SPI_MspInit+0x98>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	4b15      	ldr	r3, [pc, #84]	; (800403c <HAL_SPI_MspInit+0x98>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	4a14      	ldr	r2, [pc, #80]	; (800403c <HAL_SPI_MspInit+0x98>)
 8003fec:	f043 0302 	orr.w	r3, r3, #2
 8003ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff2:	4b12      	ldr	r3, [pc, #72]	; (800403c <HAL_SPI_MspInit+0x98>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003ffe:	2338      	movs	r3, #56	; 0x38
 8004000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004002:	2302      	movs	r3, #2
 8004004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400a:	2303      	movs	r3, #3
 800400c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800400e:	2306      	movs	r3, #6
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004012:	f107 0314 	add.w	r3, r7, #20
 8004016:	4619      	mov	r1, r3
 8004018:	4809      	ldr	r0, [pc, #36]	; (8004040 <HAL_SPI_MspInit+0x9c>)
 800401a:	f001 fb13 	bl	8005644 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800401e:	2200      	movs	r2, #0
 8004020:	2100      	movs	r1, #0
 8004022:	2033      	movs	r0, #51	; 0x33
 8004024:	f000 fed5 	bl	8004dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004028:	2033      	movs	r0, #51	; 0x33
 800402a:	f000 feee 	bl	8004e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800402e:	bf00      	nop
 8004030:	3728      	adds	r7, #40	; 0x28
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40003c00 	.word	0x40003c00
 800403c:	40023800 	.word	0x40023800
 8004040:	40020400 	.word	0x40020400

08004044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004054:	d10e      	bne.n	8004074 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	4b24      	ldr	r3, [pc, #144]	; (80040ec <HAL_TIM_Base_MspInit+0xa8>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	4a23      	ldr	r2, [pc, #140]	; (80040ec <HAL_TIM_Base_MspInit+0xa8>)
 8004060:	f043 0301 	orr.w	r3, r3, #1
 8004064:	6413      	str	r3, [r2, #64]	; 0x40
 8004066:	4b21      	ldr	r3, [pc, #132]	; (80040ec <HAL_TIM_Base_MspInit+0xa8>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004072:	e036      	b.n	80040e2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1d      	ldr	r2, [pc, #116]	; (80040f0 <HAL_TIM_Base_MspInit+0xac>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d116      	bne.n	80040ac <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	4b1a      	ldr	r3, [pc, #104]	; (80040ec <HAL_TIM_Base_MspInit+0xa8>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	4a19      	ldr	r2, [pc, #100]	; (80040ec <HAL_TIM_Base_MspInit+0xa8>)
 8004088:	f043 0302 	orr.w	r3, r3, #2
 800408c:	6413      	str	r3, [r2, #64]	; 0x40
 800408e:	4b17      	ldr	r3, [pc, #92]	; (80040ec <HAL_TIM_Base_MspInit+0xa8>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800409a:	2200      	movs	r2, #0
 800409c:	2100      	movs	r1, #0
 800409e:	201d      	movs	r0, #29
 80040a0:	f000 fe97 	bl	8004dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80040a4:	201d      	movs	r0, #29
 80040a6:	f000 feb0 	bl	8004e0a <HAL_NVIC_EnableIRQ>
}
 80040aa:	e01a      	b.n	80040e2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a10      	ldr	r2, [pc, #64]	; (80040f4 <HAL_TIM_Base_MspInit+0xb0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d115      	bne.n	80040e2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <HAL_TIM_Base_MspInit+0xa8>)
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	4a0b      	ldr	r2, [pc, #44]	; (80040ec <HAL_TIM_Base_MspInit+0xa8>)
 80040c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040c4:	6453      	str	r3, [r2, #68]	; 0x44
 80040c6:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_TIM_Base_MspInit+0xa8>)
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80040d2:	2200      	movs	r2, #0
 80040d4:	2100      	movs	r1, #0
 80040d6:	201a      	movs	r0, #26
 80040d8:	f000 fe7b 	bl	8004dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80040dc:	201a      	movs	r0, #26
 80040de:	f000 fe94 	bl	8004e0a <HAL_NVIC_EnableIRQ>
}
 80040e2:	bf00      	nop
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40014800 	.word	0x40014800

080040f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08a      	sub	sp, #40	; 0x28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004100:	f107 0314 	add.w	r3, r7, #20
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	609a      	str	r2, [r3, #8]
 800410c:	60da      	str	r2, [r3, #12]
 800410e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1d      	ldr	r2, [pc, #116]	; (800418c <HAL_UART_MspInit+0x94>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d133      	bne.n	8004182 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800411a:	2300      	movs	r3, #0
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	4b1c      	ldr	r3, [pc, #112]	; (8004190 <HAL_UART_MspInit+0x98>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	4a1b      	ldr	r2, [pc, #108]	; (8004190 <HAL_UART_MspInit+0x98>)
 8004124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004128:	6413      	str	r3, [r2, #64]	; 0x40
 800412a:	4b19      	ldr	r3, [pc, #100]	; (8004190 <HAL_UART_MspInit+0x98>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	4b15      	ldr	r3, [pc, #84]	; (8004190 <HAL_UART_MspInit+0x98>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	4a14      	ldr	r2, [pc, #80]	; (8004190 <HAL_UART_MspInit+0x98>)
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	6313      	str	r3, [r2, #48]	; 0x30
 8004146:	4b12      	ldr	r3, [pc, #72]	; (8004190 <HAL_UART_MspInit+0x98>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004152:	230c      	movs	r3, #12
 8004154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004156:	2302      	movs	r3, #2
 8004158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800415e:	2303      	movs	r3, #3
 8004160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004162:	2307      	movs	r3, #7
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004166:	f107 0314 	add.w	r3, r7, #20
 800416a:	4619      	mov	r1, r3
 800416c:	4809      	ldr	r0, [pc, #36]	; (8004194 <HAL_UART_MspInit+0x9c>)
 800416e:	f001 fa69 	bl	8005644 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004172:	2200      	movs	r2, #0
 8004174:	2100      	movs	r1, #0
 8004176:	2026      	movs	r0, #38	; 0x26
 8004178:	f000 fe2b 	bl	8004dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800417c:	2026      	movs	r0, #38	; 0x26
 800417e:	f000 fe44 	bl	8004e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004182:	bf00      	nop
 8004184:	3728      	adds	r7, #40	; 0x28
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40004400 	.word	0x40004400
 8004190:	40023800 	.word	0x40023800
 8004194:	40020000 	.word	0x40020000

08004198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800419c:	e7fe      	b.n	800419c <NMI_Handler+0x4>

0800419e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800419e:	b480      	push	{r7}
 80041a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041a2:	e7fe      	b.n	80041a2 <HardFault_Handler+0x4>

080041a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041a8:	e7fe      	b.n	80041a8 <MemManage_Handler+0x4>

080041aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041aa:	b480      	push	{r7}
 80041ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041ae:	e7fe      	b.n	80041ae <BusFault_Handler+0x4>

080041b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041b4:	e7fe      	b.n	80041b4 <UsageFault_Handler+0x4>

080041b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041b6:	b480      	push	{r7}
 80041b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041ba:	bf00      	nop
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041c8:	bf00      	nop
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041d2:	b480      	push	{r7}
 80041d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041d6:	bf00      	nop
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041e4:	f000 f8f8 	bl	80043d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041e8:	bf00      	nop
 80041ea:	bd80      	pop	{r7, pc}

080041ec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80041f0:	4802      	ldr	r0, [pc, #8]	; (80041fc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80041f2:	f002 fd01 	bl	8006bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80041f6:	bf00      	nop
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	200002b8 	.word	0x200002b8

08004200 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004204:	4802      	ldr	r0, [pc, #8]	; (8004210 <TIM3_IRQHandler+0x10>)
 8004206:	f002 fcf7 	bl	8006bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800420a:	bf00      	nop
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	200001d0 	.word	0x200001d0

08004214 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004218:	4802      	ldr	r0, [pc, #8]	; (8004224 <USART2_IRQHandler+0x10>)
 800421a:	f003 f98d 	bl	8007538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800421e:	bf00      	nop
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000360 	.word	0x20000360

08004228 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800422c:	4802      	ldr	r0, [pc, #8]	; (8004238 <SPI3_IRQHandler+0x10>)
 800422e:	f002 f947 	bl	80064c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8004232:	bf00      	nop
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20000218 	.word	0x20000218

0800423c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004240:	4802      	ldr	r0, [pc, #8]	; (800424c <DMA2_Stream0_IRQHandler+0x10>)
 8004242:	f000 ff95 	bl	8005170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004246:	bf00      	nop
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000300 	.word	0x20000300

08004250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004258:	4a14      	ldr	r2, [pc, #80]	; (80042ac <_sbrk+0x5c>)
 800425a:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <_sbrk+0x60>)
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004264:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <_sbrk+0x64>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d102      	bne.n	8004272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800426c:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <_sbrk+0x64>)
 800426e:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <_sbrk+0x68>)
 8004270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <_sbrk+0x64>)
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	429a      	cmp	r2, r3
 800427e:	d207      	bcs.n	8004290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004280:	f003 febc 	bl	8007ffc <__errno>
 8004284:	4603      	mov	r3, r0
 8004286:	220c      	movs	r2, #12
 8004288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800428a:	f04f 33ff 	mov.w	r3, #4294967295
 800428e:	e009      	b.n	80042a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004290:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <_sbrk+0x64>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004296:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <_sbrk+0x64>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4413      	add	r3, r2
 800429e:	4a05      	ldr	r2, [pc, #20]	; (80042b4 <_sbrk+0x64>)
 80042a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042a2:	68fb      	ldr	r3, [r7, #12]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20020000 	.word	0x20020000
 80042b0:	00000400 	.word	0x00000400
 80042b4:	200001c4 	.word	0x200001c4
 80042b8:	200003b8 	.word	0x200003b8

080042bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <SystemInit+0x20>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	4a05      	ldr	r2, [pc, #20]	; (80042dc <SystemInit+0x20>)
 80042c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042d0:	bf00      	nop
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80042e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004318 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042e4:	480d      	ldr	r0, [pc, #52]	; (800431c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042e6:	490e      	ldr	r1, [pc, #56]	; (8004320 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042e8:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042ec:	e002      	b.n	80042f4 <LoopCopyDataInit>

080042ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042f2:	3304      	adds	r3, #4

080042f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042f8:	d3f9      	bcc.n	80042ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042fa:	4a0b      	ldr	r2, [pc, #44]	; (8004328 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80042fc:	4c0b      	ldr	r4, [pc, #44]	; (800432c <LoopFillZerobss+0x26>)
  movs r3, #0
 80042fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004300:	e001      	b.n	8004306 <LoopFillZerobss>

08004302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004304:	3204      	adds	r2, #4

08004306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004308:	d3fb      	bcc.n	8004302 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800430a:	f7ff ffd7 	bl	80042bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800430e:	f003 fe7b 	bl	8008008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004312:	f7fc fe29 	bl	8000f68 <main>
  bx  lr    
 8004316:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800431c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004320:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004324:	08009ea0 	.word	0x08009ea0
  ldr r2, =_sbss
 8004328:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800432c:	200003b8 	.word	0x200003b8

08004330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004330:	e7fe      	b.n	8004330 <ADC_IRQHandler>
	...

08004334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004338:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <HAL_Init+0x40>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a0d      	ldr	r2, [pc, #52]	; (8004374 <HAL_Init+0x40>)
 800433e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004342:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004344:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <HAL_Init+0x40>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a0a      	ldr	r2, [pc, #40]	; (8004374 <HAL_Init+0x40>)
 800434a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800434e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004350:	4b08      	ldr	r3, [pc, #32]	; (8004374 <HAL_Init+0x40>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a07      	ldr	r2, [pc, #28]	; (8004374 <HAL_Init+0x40>)
 8004356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800435c:	2003      	movs	r0, #3
 800435e:	f000 fd2d 	bl	8004dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004362:	2000      	movs	r0, #0
 8004364:	f000 f808 	bl	8004378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004368:	f7ff fd7c 	bl	8003e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40023c00 	.word	0x40023c00

08004378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004380:	4b12      	ldr	r3, [pc, #72]	; (80043cc <HAL_InitTick+0x54>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4b12      	ldr	r3, [pc, #72]	; (80043d0 <HAL_InitTick+0x58>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	4619      	mov	r1, r3
 800438a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800438e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004392:	fbb2 f3f3 	udiv	r3, r2, r3
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fd45 	bl	8004e26 <HAL_SYSTICK_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e00e      	b.n	80043c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b0f      	cmp	r3, #15
 80043aa:	d80a      	bhi.n	80043c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043ac:	2200      	movs	r2, #0
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295
 80043b4:	f000 fd0d 	bl	8004dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043b8:	4a06      	ldr	r2, [pc, #24]	; (80043d4 <HAL_InitTick+0x5c>)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20000004 	.word	0x20000004
 80043d0:	2000000c 	.word	0x2000000c
 80043d4:	20000008 	.word	0x20000008

080043d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_IncTick+0x20>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	4b06      	ldr	r3, [pc, #24]	; (80043fc <HAL_IncTick+0x24>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4413      	add	r3, r2
 80043e8:	4a04      	ldr	r2, [pc, #16]	; (80043fc <HAL_IncTick+0x24>)
 80043ea:	6013      	str	r3, [r2, #0]
}
 80043ec:	bf00      	nop
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	2000000c 	.word	0x2000000c
 80043fc:	200003a4 	.word	0x200003a4

08004400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return uwTick;
 8004404:	4b03      	ldr	r3, [pc, #12]	; (8004414 <HAL_GetTick+0x14>)
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	200003a4 	.word	0x200003a4

08004418 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e033      	b.n	8004496 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	d109      	bne.n	800444a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff fd3c 	bl	8003eb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b00      	cmp	r3, #0
 8004454:	d118      	bne.n	8004488 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800445e:	f023 0302 	bic.w	r3, r3, #2
 8004462:	f043 0202 	orr.w	r2, r3, #2
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fa58 	bl	8004920 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	f043 0201 	orr.w	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	641a      	str	r2, [r3, #64]	; 0x40
 8004486:	e001      	b.n	800448c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004494:	7bfb      	ldrb	r3, [r7, #15]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_ADC_Start_DMA+0x1e>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e0ce      	b.n	800465c <HAL_ADC_Start_DMA+0x1bc>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d018      	beq.n	8004506 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80044e4:	4b5f      	ldr	r3, [pc, #380]	; (8004664 <HAL_ADC_Start_DMA+0x1c4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a5f      	ldr	r2, [pc, #380]	; (8004668 <HAL_ADC_Start_DMA+0x1c8>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	0c9a      	lsrs	r2, r3, #18
 80044f0:	4613      	mov	r3, r2
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4413      	add	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80044f8:	e002      	b.n	8004500 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f9      	bne.n	80044fa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004514:	d107      	bne.n	8004526 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004524:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	f040 8086 	bne.w	8004642 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800453e:	f023 0301 	bic.w	r3, r3, #1
 8004542:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004560:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004574:	d106      	bne.n	8004584 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	f023 0206 	bic.w	r2, r3, #6
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	645a      	str	r2, [r3, #68]	; 0x44
 8004582:	e002      	b.n	800458a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004592:	4b36      	ldr	r3, [pc, #216]	; (800466c <HAL_ADC_Start_DMA+0x1cc>)
 8004594:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459a:	4a35      	ldr	r2, [pc, #212]	; (8004670 <HAL_ADC_Start_DMA+0x1d0>)
 800459c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	4a34      	ldr	r2, [pc, #208]	; (8004674 <HAL_ADC_Start_DMA+0x1d4>)
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	4a33      	ldr	r2, [pc, #204]	; (8004678 <HAL_ADC_Start_DMA+0x1d8>)
 80045ac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80045b6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80045c6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	334c      	adds	r3, #76	; 0x4c
 80045e2:	4619      	mov	r1, r3
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f000 fcd8 	bl	8004f9c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10f      	bne.n	8004618 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d129      	bne.n	800465a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004614:	609a      	str	r2, [r3, #8]
 8004616:	e020      	b.n	800465a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a17      	ldr	r2, [pc, #92]	; (800467c <HAL_ADC_Start_DMA+0x1dc>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d11b      	bne.n	800465a <HAL_ADC_Start_DMA+0x1ba>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d114      	bne.n	800465a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800463e:	609a      	str	r2, [r3, #8]
 8004640:	e00b      	b.n	800465a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f043 0210 	orr.w	r2, r3, #16
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	f043 0201 	orr.w	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3718      	adds	r7, #24
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	20000004 	.word	0x20000004
 8004668:	431bde83 	.word	0x431bde83
 800466c:	40012300 	.word	0x40012300
 8004670:	08004b19 	.word	0x08004b19
 8004674:	08004bd3 	.word	0x08004bd3
 8004678:	08004bef 	.word	0x08004bef
 800467c:	40012000 	.word	0x40012000

08004680 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_ADC_ConfigChannel+0x1c>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e113      	b.n	8004900 <HAL_ADC_ConfigChannel+0x244>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b09      	cmp	r3, #9
 80046e6:	d925      	bls.n	8004734 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68d9      	ldr	r1, [r3, #12]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	4613      	mov	r3, r2
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	4413      	add	r3, r2
 80046fc:	3b1e      	subs	r3, #30
 80046fe:	2207      	movs	r2, #7
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43da      	mvns	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	400a      	ands	r2, r1
 800470c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68d9      	ldr	r1, [r3, #12]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	4618      	mov	r0, r3
 8004720:	4603      	mov	r3, r0
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	4403      	add	r3, r0
 8004726:	3b1e      	subs	r3, #30
 8004728:	409a      	lsls	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	60da      	str	r2, [r3, #12]
 8004732:	e022      	b.n	800477a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6919      	ldr	r1, [r3, #16]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	b29b      	uxth	r3, r3
 8004740:	461a      	mov	r2, r3
 8004742:	4613      	mov	r3, r2
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	4413      	add	r3, r2
 8004748:	2207      	movs	r2, #7
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43da      	mvns	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	400a      	ands	r2, r1
 8004756:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6919      	ldr	r1, [r3, #16]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	4618      	mov	r0, r3
 800476a:	4603      	mov	r3, r0
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	4403      	add	r3, r0
 8004770:	409a      	lsls	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b06      	cmp	r3, #6
 8004780:	d824      	bhi.n	80047cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	3b05      	subs	r3, #5
 8004794:	221f      	movs	r2, #31
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43da      	mvns	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	400a      	ands	r2, r1
 80047a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	4618      	mov	r0, r3
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	3b05      	subs	r3, #5
 80047be:	fa00 f203 	lsl.w	r2, r0, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	635a      	str	r2, [r3, #52]	; 0x34
 80047ca:	e04c      	b.n	8004866 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b0c      	cmp	r3, #12
 80047d2:	d824      	bhi.n	800481e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	3b23      	subs	r3, #35	; 0x23
 80047e6:	221f      	movs	r2, #31
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43da      	mvns	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	400a      	ands	r2, r1
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	4618      	mov	r0, r3
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	3b23      	subs	r3, #35	; 0x23
 8004810:	fa00 f203 	lsl.w	r2, r0, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
 800481c:	e023      	b.n	8004866 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	3b41      	subs	r3, #65	; 0x41
 8004830:	221f      	movs	r2, #31
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	43da      	mvns	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	400a      	ands	r2, r1
 800483e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	b29b      	uxth	r3, r3
 800484c:	4618      	mov	r0, r3
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	3b41      	subs	r3, #65	; 0x41
 800485a:	fa00 f203 	lsl.w	r2, r0, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004866:	4b29      	ldr	r3, [pc, #164]	; (800490c <HAL_ADC_ConfigChannel+0x250>)
 8004868:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a28      	ldr	r2, [pc, #160]	; (8004910 <HAL_ADC_ConfigChannel+0x254>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d10f      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x1d8>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b12      	cmp	r3, #18
 800487a:	d10b      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a1d      	ldr	r2, [pc, #116]	; (8004910 <HAL_ADC_ConfigChannel+0x254>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d12b      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x23a>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a1c      	ldr	r2, [pc, #112]	; (8004914 <HAL_ADC_ConfigChannel+0x258>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d003      	beq.n	80048b0 <HAL_ADC_ConfigChannel+0x1f4>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b11      	cmp	r3, #17
 80048ae:	d122      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a11      	ldr	r2, [pc, #68]	; (8004914 <HAL_ADC_ConfigChannel+0x258>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d111      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048d2:	4b11      	ldr	r3, [pc, #68]	; (8004918 <HAL_ADC_ConfigChannel+0x25c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a11      	ldr	r2, [pc, #68]	; (800491c <HAL_ADC_ConfigChannel+0x260>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	0c9a      	lsrs	r2, r3, #18
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048e8:	e002      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f9      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	40012300 	.word	0x40012300
 8004910:	40012000 	.word	0x40012000
 8004914:	10000012 	.word	0x10000012
 8004918:	20000004 	.word	0x20000004
 800491c:	431bde83 	.word	0x431bde83

08004920 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004928:	4b79      	ldr	r3, [pc, #484]	; (8004b10 <ADC_Init+0x1f0>)
 800492a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	431a      	orrs	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004954:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6859      	ldr	r1, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	021a      	lsls	r2, r3, #8
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004978:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689a      	ldr	r2, [r3, #8]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800499a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6899      	ldr	r1, [r3, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	4a58      	ldr	r2, [pc, #352]	; (8004b14 <ADC_Init+0x1f4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d022      	beq.n	80049fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6899      	ldr	r1, [r3, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6899      	ldr	r1, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	609a      	str	r2, [r3, #8]
 80049fc:	e00f      	b.n	8004a1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0202 	bic.w	r2, r2, #2
 8004a2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6899      	ldr	r1, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	7e1b      	ldrb	r3, [r3, #24]
 8004a38:	005a      	lsls	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01b      	beq.n	8004a84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6859      	ldr	r1, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	3b01      	subs	r3, #1
 8004a78:	035a      	lsls	r2, r3, #13
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
 8004a82:	e007      	b.n	8004a94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	051a      	lsls	r2, r3, #20
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ac8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6899      	ldr	r1, [r3, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ad6:	025a      	lsls	r2, r3, #9
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6899      	ldr	r1, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	029a      	lsls	r2, r3, #10
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	609a      	str	r2, [r3, #8]
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	40012300 	.word	0x40012300
 8004b14:	0f000001 	.word	0x0f000001

08004b18 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d13c      	bne.n	8004bac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d12b      	bne.n	8004ba4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d127      	bne.n	8004ba4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d006      	beq.n	8004b70 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d119      	bne.n	8004ba4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0220 	bic.w	r2, r2, #32
 8004b7e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d105      	bne.n	8004ba4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	f043 0201 	orr.w	r2, r3, #1
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7ff fd6b 	bl	8004680 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004baa:	e00e      	b.n	8004bca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7ff fd75 	bl	80046a8 <HAL_ADC_ErrorCallback>
}
 8004bbe:	e004      	b.n	8004bca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	4798      	blx	r3
}
 8004bca:	bf00      	nop
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f7ff fd57 	bl	8004694 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2240      	movs	r2, #64	; 0x40
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	f043 0204 	orr.w	r2, r3, #4
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f7ff fd4a 	bl	80046a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c14:	bf00      	nop
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c2c:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <__NVIC_SetPriorityGrouping+0x44>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c38:	4013      	ands	r3, r2
 8004c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c4e:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <__NVIC_SetPriorityGrouping+0x44>)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	60d3      	str	r3, [r2, #12]
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	e000ed00 	.word	0xe000ed00

08004c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c68:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <__NVIC_GetPriorityGrouping+0x18>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	0a1b      	lsrs	r3, r3, #8
 8004c6e:	f003 0307 	and.w	r3, r3, #7
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	e000ed00 	.word	0xe000ed00

08004c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	db0b      	blt.n	8004caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	f003 021f 	and.w	r2, r3, #31
 8004c98:	4907      	ldr	r1, [pc, #28]	; (8004cb8 <__NVIC_EnableIRQ+0x38>)
 8004c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	e000e100 	.word	0xe000e100

08004cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	6039      	str	r1, [r7, #0]
 8004cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	db0a      	blt.n	8004ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	490c      	ldr	r1, [pc, #48]	; (8004d08 <__NVIC_SetPriority+0x4c>)
 8004cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cda:	0112      	lsls	r2, r2, #4
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	440b      	add	r3, r1
 8004ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ce4:	e00a      	b.n	8004cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	4908      	ldr	r1, [pc, #32]	; (8004d0c <__NVIC_SetPriority+0x50>)
 8004cec:	79fb      	ldrb	r3, [r7, #7]
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	3b04      	subs	r3, #4
 8004cf4:	0112      	lsls	r2, r2, #4
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	761a      	strb	r2, [r3, #24]
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	e000e100 	.word	0xe000e100
 8004d0c:	e000ed00 	.word	0xe000ed00

08004d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b089      	sub	sp, #36	; 0x24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f1c3 0307 	rsb	r3, r3, #7
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	bf28      	it	cs
 8004d2e:	2304      	movcs	r3, #4
 8004d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	3304      	adds	r3, #4
 8004d36:	2b06      	cmp	r3, #6
 8004d38:	d902      	bls.n	8004d40 <NVIC_EncodePriority+0x30>
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	3b03      	subs	r3, #3
 8004d3e:	e000      	b.n	8004d42 <NVIC_EncodePriority+0x32>
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d44:	f04f 32ff 	mov.w	r2, #4294967295
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	43da      	mvns	r2, r3
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	401a      	ands	r2, r3
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d58:	f04f 31ff 	mov.w	r1, #4294967295
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d62:	43d9      	mvns	r1, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d68:	4313      	orrs	r3, r2
         );
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3724      	adds	r7, #36	; 0x24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d88:	d301      	bcc.n	8004d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e00f      	b.n	8004dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d8e:	4a0a      	ldr	r2, [pc, #40]	; (8004db8 <SysTick_Config+0x40>)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d96:	210f      	movs	r1, #15
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	f7ff ff8e 	bl	8004cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004da0:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <SysTick_Config+0x40>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004da6:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <SysTick_Config+0x40>)
 8004da8:	2207      	movs	r2, #7
 8004daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	e000e010 	.word	0xe000e010

08004dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff ff29 	bl	8004c1c <__NVIC_SetPriorityGrouping>
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b086      	sub	sp, #24
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	4603      	mov	r3, r0
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
 8004dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004de4:	f7ff ff3e 	bl	8004c64 <__NVIC_GetPriorityGrouping>
 8004de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	68b9      	ldr	r1, [r7, #8]
 8004dee:	6978      	ldr	r0, [r7, #20]
 8004df0:	f7ff ff8e 	bl	8004d10 <NVIC_EncodePriority>
 8004df4:	4602      	mov	r2, r0
 8004df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7ff ff5d 	bl	8004cbc <__NVIC_SetPriority>
}
 8004e02:	bf00      	nop
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	4603      	mov	r3, r0
 8004e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff ff31 	bl	8004c80 <__NVIC_EnableIRQ>
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff ffa2 	bl	8004d78 <SysTick_Config>
 8004e34:	4603      	mov	r3, r0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e4c:	f7ff fad8 	bl	8004400 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e099      	b.n	8004f90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0201 	bic.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e7c:	e00f      	b.n	8004e9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e7e:	f7ff fabf 	bl	8004400 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b05      	cmp	r3, #5
 8004e8a:	d908      	bls.n	8004e9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2203      	movs	r2, #3
 8004e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e078      	b.n	8004f90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e8      	bne.n	8004e7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	4b38      	ldr	r3, [pc, #224]	; (8004f98 <HAL_DMA_Init+0x158>)
 8004eb8:	4013      	ands	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d107      	bne.n	8004f08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	4313      	orrs	r3, r2
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f023 0307 	bic.w	r3, r3, #7
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d117      	bne.n	8004f62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00e      	beq.n	8004f62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fb01 	bl	800554c <DMA_CheckFifoParam>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2240      	movs	r2, #64	; 0x40
 8004f54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e016      	b.n	8004f90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fab8 	bl	80054e0 <DMA_CalcBaseAndBitshift>
 8004f70:	4603      	mov	r3, r0
 8004f72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f78:	223f      	movs	r2, #63	; 0x3f
 8004f7a:	409a      	lsls	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	f010803f 	.word	0xf010803f

08004f9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d101      	bne.n	8004fc2 <HAL_DMA_Start_IT+0x26>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e040      	b.n	8005044 <HAL_DMA_Start_IT+0xa8>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d12f      	bne.n	8005036 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 fa4a 	bl	8005484 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff4:	223f      	movs	r2, #63	; 0x3f
 8004ff6:	409a      	lsls	r2, r3
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0216 	orr.w	r2, r2, #22
 800500a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d007      	beq.n	8005024 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0208 	orr.w	r2, r2, #8
 8005022:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	e005      	b.n	8005042 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800503e:	2302      	movs	r3, #2
 8005040:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005042:	7dfb      	ldrb	r3, [r7, #23]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005058:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800505a:	f7ff f9d1 	bl	8004400 <HAL_GetTick>
 800505e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d008      	beq.n	800507e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2280      	movs	r2, #128	; 0x80
 8005070:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e052      	b.n	8005124 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0216 	bic.w	r2, r2, #22
 800508c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695a      	ldr	r2, [r3, #20]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800509c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d103      	bne.n	80050ae <HAL_DMA_Abort+0x62>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d007      	beq.n	80050be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0208 	bic.w	r2, r2, #8
 80050bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0201 	bic.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050ce:	e013      	b.n	80050f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050d0:	f7ff f996 	bl	8004400 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b05      	cmp	r3, #5
 80050dc:	d90c      	bls.n	80050f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2220      	movs	r2, #32
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2203      	movs	r2, #3
 80050f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e015      	b.n	8005124 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e4      	bne.n	80050d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510a:	223f      	movs	r2, #63	; 0x3f
 800510c:	409a      	lsls	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d004      	beq.n	800514a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2280      	movs	r2, #128	; 0x80
 8005144:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e00c      	b.n	8005164 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2205      	movs	r2, #5
 800514e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0201 	bic.w	r2, r2, #1
 8005160:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800517c:	4b92      	ldr	r3, [pc, #584]	; (80053c8 <HAL_DMA_IRQHandler+0x258>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a92      	ldr	r2, [pc, #584]	; (80053cc <HAL_DMA_IRQHandler+0x25c>)
 8005182:	fba2 2303 	umull	r2, r3, r2, r3
 8005186:	0a9b      	lsrs	r3, r3, #10
 8005188:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800519a:	2208      	movs	r2, #8
 800519c:	409a      	lsls	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4013      	ands	r3, r2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01a      	beq.n	80051dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d013      	beq.n	80051dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0204 	bic.w	r2, r2, #4
 80051c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c8:	2208      	movs	r2, #8
 80051ca:	409a      	lsls	r2, r3
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d4:	f043 0201 	orr.w	r2, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e0:	2201      	movs	r2, #1
 80051e2:	409a      	lsls	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d012      	beq.n	8005212 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00b      	beq.n	8005212 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fe:	2201      	movs	r2, #1
 8005200:	409a      	lsls	r2, r3
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520a:	f043 0202 	orr.w	r2, r3, #2
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005216:	2204      	movs	r2, #4
 8005218:	409a      	lsls	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4013      	ands	r3, r2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d012      	beq.n	8005248 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005234:	2204      	movs	r2, #4
 8005236:	409a      	lsls	r2, r3
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005240:	f043 0204 	orr.w	r2, r3, #4
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524c:	2210      	movs	r2, #16
 800524e:	409a      	lsls	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4013      	ands	r3, r2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d043      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d03c      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526a:	2210      	movs	r2, #16
 800526c:	409a      	lsls	r2, r3
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d018      	beq.n	80052b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d108      	bne.n	80052a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	2b00      	cmp	r3, #0
 8005294:	d024      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	4798      	blx	r3
 800529e:	e01f      	b.n	80052e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01b      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	4798      	blx	r3
 80052b0:	e016      	b.n	80052e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d107      	bne.n	80052d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0208 	bic.w	r2, r2, #8
 80052ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e4:	2220      	movs	r2, #32
 80052e6:	409a      	lsls	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 808e 	beq.w	800540e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0310 	and.w	r3, r3, #16
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 8086 	beq.w	800540e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005306:	2220      	movs	r2, #32
 8005308:	409a      	lsls	r2, r3
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b05      	cmp	r3, #5
 8005318:	d136      	bne.n	8005388 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0216 	bic.w	r2, r2, #22
 8005328:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695a      	ldr	r2, [r3, #20]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005338:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <HAL_DMA_IRQHandler+0x1da>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005346:	2b00      	cmp	r3, #0
 8005348:	d007      	beq.n	800535a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0208 	bic.w	r2, r2, #8
 8005358:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800535e:	223f      	movs	r2, #63	; 0x3f
 8005360:	409a      	lsls	r2, r3
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537a:	2b00      	cmp	r3, #0
 800537c:	d07d      	beq.n	800547a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	4798      	blx	r3
        }
        return;
 8005386:	e078      	b.n	800547a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d01c      	beq.n	80053d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d108      	bne.n	80053b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d030      	beq.n	800540e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	4798      	blx	r3
 80053b4:	e02b      	b.n	800540e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d027      	beq.n	800540e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	4798      	blx	r3
 80053c6:	e022      	b.n	800540e <HAL_DMA_IRQHandler+0x29e>
 80053c8:	20000004 	.word	0x20000004
 80053cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10f      	bne.n	80053fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0210 	bic.w	r2, r2, #16
 80053ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	2b00      	cmp	r3, #0
 8005414:	d032      	beq.n	800547c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d022      	beq.n	8005468 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2205      	movs	r2, #5
 8005426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0201 	bic.w	r2, r2, #1
 8005438:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	3301      	adds	r3, #1
 800543e:	60bb      	str	r3, [r7, #8]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	429a      	cmp	r2, r3
 8005444:	d307      	bcc.n	8005456 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1f2      	bne.n	800543a <HAL_DMA_IRQHandler+0x2ca>
 8005454:	e000      	b.n	8005458 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005456:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800546c:	2b00      	cmp	r3, #0
 800546e:	d005      	beq.n	800547c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	4798      	blx	r3
 8005478:	e000      	b.n	800547c <HAL_DMA_IRQHandler+0x30c>
        return;
 800547a:	bf00      	nop
    }
  }
}
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop

08005484 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b40      	cmp	r3, #64	; 0x40
 80054b0:	d108      	bne.n	80054c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054c2:	e007      	b.n	80054d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	60da      	str	r2, [r3, #12]
}
 80054d4:	bf00      	nop
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	3b10      	subs	r3, #16
 80054f0:	4a14      	ldr	r2, [pc, #80]	; (8005544 <DMA_CalcBaseAndBitshift+0x64>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	091b      	lsrs	r3, r3, #4
 80054f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054fa:	4a13      	ldr	r2, [pc, #76]	; (8005548 <DMA_CalcBaseAndBitshift+0x68>)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b03      	cmp	r3, #3
 800550c:	d909      	bls.n	8005522 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005516:	f023 0303 	bic.w	r3, r3, #3
 800551a:	1d1a      	adds	r2, r3, #4
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	659a      	str	r2, [r3, #88]	; 0x58
 8005520:	e007      	b.n	8005532 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800552a:	f023 0303 	bic.w	r3, r3, #3
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	aaaaaaab 	.word	0xaaaaaaab
 8005548:	08009c78 	.word	0x08009c78

0800554c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d11f      	bne.n	80055a6 <DMA_CheckFifoParam+0x5a>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b03      	cmp	r3, #3
 800556a:	d856      	bhi.n	800561a <DMA_CheckFifoParam+0xce>
 800556c:	a201      	add	r2, pc, #4	; (adr r2, 8005574 <DMA_CheckFifoParam+0x28>)
 800556e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005572:	bf00      	nop
 8005574:	08005585 	.word	0x08005585
 8005578:	08005597 	.word	0x08005597
 800557c:	08005585 	.word	0x08005585
 8005580:	0800561b 	.word	0x0800561b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d046      	beq.n	800561e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005594:	e043      	b.n	800561e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800559e:	d140      	bne.n	8005622 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055a4:	e03d      	b.n	8005622 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ae:	d121      	bne.n	80055f4 <DMA_CheckFifoParam+0xa8>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d837      	bhi.n	8005626 <DMA_CheckFifoParam+0xda>
 80055b6:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <DMA_CheckFifoParam+0x70>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	080055cd 	.word	0x080055cd
 80055c0:	080055d3 	.word	0x080055d3
 80055c4:	080055cd 	.word	0x080055cd
 80055c8:	080055e5 	.word	0x080055e5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	73fb      	strb	r3, [r7, #15]
      break;
 80055d0:	e030      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d025      	beq.n	800562a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055e2:	e022      	b.n	800562a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055ec:	d11f      	bne.n	800562e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055f2:	e01c      	b.n	800562e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d903      	bls.n	8005602 <DMA_CheckFifoParam+0xb6>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d003      	beq.n	8005608 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005600:	e018      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	73fb      	strb	r3, [r7, #15]
      break;
 8005606:	e015      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00e      	beq.n	8005632 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
      break;
 8005618:	e00b      	b.n	8005632 <DMA_CheckFifoParam+0xe6>
      break;
 800561a:	bf00      	nop
 800561c:	e00a      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
      break;
 800561e:	bf00      	nop
 8005620:	e008      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
      break;
 8005622:	bf00      	nop
 8005624:	e006      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
      break;
 8005626:	bf00      	nop
 8005628:	e004      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
      break;
 800562a:	bf00      	nop
 800562c:	e002      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
      break;   
 800562e:	bf00      	nop
 8005630:	e000      	b.n	8005634 <DMA_CheckFifoParam+0xe8>
      break;
 8005632:	bf00      	nop
    }
  } 
  
  return status; 
 8005634:	7bfb      	ldrb	r3, [r7, #15]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop

08005644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005644:	b480      	push	{r7}
 8005646:	b089      	sub	sp, #36	; 0x24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005652:	2300      	movs	r3, #0
 8005654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005656:	2300      	movs	r3, #0
 8005658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800565a:	2300      	movs	r3, #0
 800565c:	61fb      	str	r3, [r7, #28]
 800565e:	e159      	b.n	8005914 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005660:	2201      	movs	r2, #1
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4013      	ands	r3, r2
 8005672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	429a      	cmp	r2, r3
 800567a:	f040 8148 	bne.w	800590e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	2b01      	cmp	r3, #1
 8005688:	d005      	beq.n	8005696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005692:	2b02      	cmp	r3, #2
 8005694:	d130      	bne.n	80056f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	2203      	movs	r2, #3
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	43db      	mvns	r3, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4013      	ands	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	4313      	orrs	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056cc:	2201      	movs	r2, #1
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	43db      	mvns	r3, r3
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	4013      	ands	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	091b      	lsrs	r3, r3, #4
 80056e2:	f003 0201 	and.w	r2, r3, #1
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f003 0303 	and.w	r3, r3, #3
 8005700:	2b03      	cmp	r3, #3
 8005702:	d017      	beq.n	8005734 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	2203      	movs	r2, #3
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	43db      	mvns	r3, r3
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4013      	ands	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	4313      	orrs	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f003 0303 	and.w	r3, r3, #3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d123      	bne.n	8005788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	08da      	lsrs	r2, r3, #3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3208      	adds	r2, #8
 8005748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	220f      	movs	r2, #15
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	43db      	mvns	r3, r3
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4013      	ands	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	4313      	orrs	r3, r2
 8005778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	08da      	lsrs	r2, r3, #3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3208      	adds	r2, #8
 8005782:	69b9      	ldr	r1, [r7, #24]
 8005784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	2203      	movs	r2, #3
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	43db      	mvns	r3, r3
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	4013      	ands	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f003 0203 	and.w	r2, r3, #3
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 80a2 	beq.w	800590e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	4b57      	ldr	r3, [pc, #348]	; (800592c <HAL_GPIO_Init+0x2e8>)
 80057d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d2:	4a56      	ldr	r2, [pc, #344]	; (800592c <HAL_GPIO_Init+0x2e8>)
 80057d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057d8:	6453      	str	r3, [r2, #68]	; 0x44
 80057da:	4b54      	ldr	r3, [pc, #336]	; (800592c <HAL_GPIO_Init+0x2e8>)
 80057dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057e6:	4a52      	ldr	r2, [pc, #328]	; (8005930 <HAL_GPIO_Init+0x2ec>)
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	089b      	lsrs	r3, r3, #2
 80057ec:	3302      	adds	r3, #2
 80057ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	220f      	movs	r2, #15
 80057fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005802:	43db      	mvns	r3, r3
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	4013      	ands	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a49      	ldr	r2, [pc, #292]	; (8005934 <HAL_GPIO_Init+0x2f0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d019      	beq.n	8005846 <HAL_GPIO_Init+0x202>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a48      	ldr	r2, [pc, #288]	; (8005938 <HAL_GPIO_Init+0x2f4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <HAL_GPIO_Init+0x1fe>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a47      	ldr	r2, [pc, #284]	; (800593c <HAL_GPIO_Init+0x2f8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00d      	beq.n	800583e <HAL_GPIO_Init+0x1fa>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a46      	ldr	r2, [pc, #280]	; (8005940 <HAL_GPIO_Init+0x2fc>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d007      	beq.n	800583a <HAL_GPIO_Init+0x1f6>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a45      	ldr	r2, [pc, #276]	; (8005944 <HAL_GPIO_Init+0x300>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d101      	bne.n	8005836 <HAL_GPIO_Init+0x1f2>
 8005832:	2304      	movs	r3, #4
 8005834:	e008      	b.n	8005848 <HAL_GPIO_Init+0x204>
 8005836:	2307      	movs	r3, #7
 8005838:	e006      	b.n	8005848 <HAL_GPIO_Init+0x204>
 800583a:	2303      	movs	r3, #3
 800583c:	e004      	b.n	8005848 <HAL_GPIO_Init+0x204>
 800583e:	2302      	movs	r3, #2
 8005840:	e002      	b.n	8005848 <HAL_GPIO_Init+0x204>
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <HAL_GPIO_Init+0x204>
 8005846:	2300      	movs	r3, #0
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	f002 0203 	and.w	r2, r2, #3
 800584e:	0092      	lsls	r2, r2, #2
 8005850:	4093      	lsls	r3, r2
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	4313      	orrs	r3, r2
 8005856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005858:	4935      	ldr	r1, [pc, #212]	; (8005930 <HAL_GPIO_Init+0x2ec>)
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	089b      	lsrs	r3, r3, #2
 800585e:	3302      	adds	r3, #2
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005866:	4b38      	ldr	r3, [pc, #224]	; (8005948 <HAL_GPIO_Init+0x304>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	43db      	mvns	r3, r3
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	4013      	ands	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	4313      	orrs	r3, r2
 8005888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800588a:	4a2f      	ldr	r2, [pc, #188]	; (8005948 <HAL_GPIO_Init+0x304>)
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005890:	4b2d      	ldr	r3, [pc, #180]	; (8005948 <HAL_GPIO_Init+0x304>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	43db      	mvns	r3, r3
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	4013      	ands	r3, r2
 800589e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058b4:	4a24      	ldr	r2, [pc, #144]	; (8005948 <HAL_GPIO_Init+0x304>)
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058ba:	4b23      	ldr	r3, [pc, #140]	; (8005948 <HAL_GPIO_Init+0x304>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	43db      	mvns	r3, r3
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	4013      	ands	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4313      	orrs	r3, r2
 80058dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058de:	4a1a      	ldr	r2, [pc, #104]	; (8005948 <HAL_GPIO_Init+0x304>)
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058e4:	4b18      	ldr	r3, [pc, #96]	; (8005948 <HAL_GPIO_Init+0x304>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	43db      	mvns	r3, r3
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	4013      	ands	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005908:	4a0f      	ldr	r2, [pc, #60]	; (8005948 <HAL_GPIO_Init+0x304>)
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	3301      	adds	r3, #1
 8005912:	61fb      	str	r3, [r7, #28]
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	2b0f      	cmp	r3, #15
 8005918:	f67f aea2 	bls.w	8005660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	3724      	adds	r7, #36	; 0x24
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40023800 	.word	0x40023800
 8005930:	40013800 	.word	0x40013800
 8005934:	40020000 	.word	0x40020000
 8005938:	40020400 	.word	0x40020400
 800593c:	40020800 	.word	0x40020800
 8005940:	40020c00 	.word	0x40020c00
 8005944:	40021000 	.word	0x40021000
 8005948:	40013c00 	.word	0x40013c00

0800594c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	887b      	ldrh	r3, [r7, #2]
 800595e:	4013      	ands	r3, r2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
 8005968:	e001      	b.n	800596e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800596e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	807b      	strh	r3, [r7, #2]
 8005988:	4613      	mov	r3, r2
 800598a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800598c:	787b      	ldrb	r3, [r7, #1]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005992:	887a      	ldrh	r2, [r7, #2]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005998:	e003      	b.n	80059a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800599a:	887b      	ldrh	r3, [r7, #2]
 800599c:	041a      	lsls	r2, r3, #16
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	619a      	str	r2, [r3, #24]
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e264      	b.n	8005e8c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d075      	beq.n	8005aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059ce:	4ba3      	ldr	r3, [pc, #652]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 030c 	and.w	r3, r3, #12
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d00c      	beq.n	80059f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059da:	4ba0      	ldr	r3, [pc, #640]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059e2:	2b08      	cmp	r3, #8
 80059e4:	d112      	bne.n	8005a0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059e6:	4b9d      	ldr	r3, [pc, #628]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059f2:	d10b      	bne.n	8005a0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059f4:	4b99      	ldr	r3, [pc, #612]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d05b      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x108>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d157      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e23f      	b.n	8005e8c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a14:	d106      	bne.n	8005a24 <HAL_RCC_OscConfig+0x74>
 8005a16:	4b91      	ldr	r3, [pc, #580]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a90      	ldr	r2, [pc, #576]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	e01d      	b.n	8005a60 <HAL_RCC_OscConfig+0xb0>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a2c:	d10c      	bne.n	8005a48 <HAL_RCC_OscConfig+0x98>
 8005a2e:	4b8b      	ldr	r3, [pc, #556]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a8a      	ldr	r2, [pc, #552]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	4b88      	ldr	r3, [pc, #544]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a87      	ldr	r2, [pc, #540]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	e00b      	b.n	8005a60 <HAL_RCC_OscConfig+0xb0>
 8005a48:	4b84      	ldr	r3, [pc, #528]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a83      	ldr	r2, [pc, #524]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	4b81      	ldr	r3, [pc, #516]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a80      	ldr	r2, [pc, #512]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d013      	beq.n	8005a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a68:	f7fe fcca 	bl	8004400 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a70:	f7fe fcc6 	bl	8004400 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b64      	cmp	r3, #100	; 0x64
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e204      	b.n	8005e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a82:	4b76      	ldr	r3, [pc, #472]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0f0      	beq.n	8005a70 <HAL_RCC_OscConfig+0xc0>
 8005a8e:	e014      	b.n	8005aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a90:	f7fe fcb6 	bl	8004400 <HAL_GetTick>
 8005a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a96:	e008      	b.n	8005aaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a98:	f7fe fcb2 	bl	8004400 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b64      	cmp	r3, #100	; 0x64
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e1f0      	b.n	8005e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aaa:	4b6c      	ldr	r3, [pc, #432]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1f0      	bne.n	8005a98 <HAL_RCC_OscConfig+0xe8>
 8005ab6:	e000      	b.n	8005aba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d063      	beq.n	8005b8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ac6:	4b65      	ldr	r3, [pc, #404]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 030c 	and.w	r3, r3, #12
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00b      	beq.n	8005aea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ad2:	4b62      	ldr	r3, [pc, #392]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	d11c      	bne.n	8005b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ade:	4b5f      	ldr	r3, [pc, #380]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d116      	bne.n	8005b18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aea:	4b5c      	ldr	r3, [pc, #368]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <HAL_RCC_OscConfig+0x152>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d001      	beq.n	8005b02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e1c4      	b.n	8005e8c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b02:	4b56      	ldr	r3, [pc, #344]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	4952      	ldr	r1, [pc, #328]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b16:	e03a      	b.n	8005b8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d020      	beq.n	8005b62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b20:	4b4f      	ldr	r3, [pc, #316]	; (8005c60 <HAL_RCC_OscConfig+0x2b0>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b26:	f7fe fc6b 	bl	8004400 <HAL_GetTick>
 8005b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b2e:	f7fe fc67 	bl	8004400 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e1a5      	b.n	8005e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b40:	4b46      	ldr	r3, [pc, #280]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0f0      	beq.n	8005b2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b4c:	4b43      	ldr	r3, [pc, #268]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	4940      	ldr	r1, [pc, #256]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	600b      	str	r3, [r1, #0]
 8005b60:	e015      	b.n	8005b8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b62:	4b3f      	ldr	r3, [pc, #252]	; (8005c60 <HAL_RCC_OscConfig+0x2b0>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b68:	f7fe fc4a 	bl	8004400 <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b6e:	e008      	b.n	8005b82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b70:	f7fe fc46 	bl	8004400 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e184      	b.n	8005e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b82:	4b36      	ldr	r3, [pc, #216]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f0      	bne.n	8005b70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d030      	beq.n	8005bfc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d016      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ba2:	4b30      	ldr	r3, [pc, #192]	; (8005c64 <HAL_RCC_OscConfig+0x2b4>)
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba8:	f7fe fc2a 	bl	8004400 <HAL_GetTick>
 8005bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bb0:	f7fe fc26 	bl	8004400 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e164      	b.n	8005e8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bc2:	4b26      	ldr	r3, [pc, #152]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d0f0      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x200>
 8005bce:	e015      	b.n	8005bfc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bd0:	4b24      	ldr	r3, [pc, #144]	; (8005c64 <HAL_RCC_OscConfig+0x2b4>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bd6:	f7fe fc13 	bl	8004400 <HAL_GetTick>
 8005bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bdc:	e008      	b.n	8005bf0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bde:	f7fe fc0f 	bl	8004400 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d901      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e14d      	b.n	8005e8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bf0:	4b1a      	ldr	r3, [pc, #104]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1f0      	bne.n	8005bde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80a0 	beq.w	8005d4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c0e:	4b13      	ldr	r3, [pc, #76]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10f      	bne.n	8005c3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60bb      	str	r3, [r7, #8]
 8005c1e:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	4a0e      	ldr	r2, [pc, #56]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c28:	6413      	str	r3, [r2, #64]	; 0x40
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <HAL_RCC_OscConfig+0x2ac>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c32:	60bb      	str	r3, [r7, #8]
 8005c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c36:	2301      	movs	r3, #1
 8005c38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3a:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <HAL_RCC_OscConfig+0x2b8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d121      	bne.n	8005c8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c46:	4b08      	ldr	r3, [pc, #32]	; (8005c68 <HAL_RCC_OscConfig+0x2b8>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a07      	ldr	r2, [pc, #28]	; (8005c68 <HAL_RCC_OscConfig+0x2b8>)
 8005c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c52:	f7fe fbd5 	bl	8004400 <HAL_GetTick>
 8005c56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c58:	e011      	b.n	8005c7e <HAL_RCC_OscConfig+0x2ce>
 8005c5a:	bf00      	nop
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	42470000 	.word	0x42470000
 8005c64:	42470e80 	.word	0x42470e80
 8005c68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c6c:	f7fe fbc8 	bl	8004400 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e106      	b.n	8005e8c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c7e:	4b85      	ldr	r3, [pc, #532]	; (8005e94 <HAL_RCC_OscConfig+0x4e4>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0f0      	beq.n	8005c6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d106      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x2f0>
 8005c92:	4b81      	ldr	r3, [pc, #516]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c96:	4a80      	ldr	r2, [pc, #512]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005c98:	f043 0301 	orr.w	r3, r3, #1
 8005c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c9e:	e01c      	b.n	8005cda <HAL_RCC_OscConfig+0x32a>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	2b05      	cmp	r3, #5
 8005ca6:	d10c      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x312>
 8005ca8:	4b7b      	ldr	r3, [pc, #492]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cac:	4a7a      	ldr	r2, [pc, #488]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005cae:	f043 0304 	orr.w	r3, r3, #4
 8005cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8005cb4:	4b78      	ldr	r3, [pc, #480]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb8:	4a77      	ldr	r2, [pc, #476]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005cba:	f043 0301 	orr.w	r3, r3, #1
 8005cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005cc0:	e00b      	b.n	8005cda <HAL_RCC_OscConfig+0x32a>
 8005cc2:	4b75      	ldr	r3, [pc, #468]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc6:	4a74      	ldr	r2, [pc, #464]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005cc8:	f023 0301 	bic.w	r3, r3, #1
 8005ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8005cce:	4b72      	ldr	r3, [pc, #456]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd2:	4a71      	ldr	r2, [pc, #452]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005cd4:	f023 0304 	bic.w	r3, r3, #4
 8005cd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d015      	beq.n	8005d0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce2:	f7fe fb8d 	bl	8004400 <HAL_GetTick>
 8005ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ce8:	e00a      	b.n	8005d00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cea:	f7fe fb89 	bl	8004400 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e0c5      	b.n	8005e8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d00:	4b65      	ldr	r3, [pc, #404]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0ee      	beq.n	8005cea <HAL_RCC_OscConfig+0x33a>
 8005d0c:	e014      	b.n	8005d38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d0e:	f7fe fb77 	bl	8004400 <HAL_GetTick>
 8005d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d14:	e00a      	b.n	8005d2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d16:	f7fe fb73 	bl	8004400 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e0af      	b.n	8005e8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d2c:	4b5a      	ldr	r3, [pc, #360]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1ee      	bne.n	8005d16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d105      	bne.n	8005d4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d3e:	4b56      	ldr	r3, [pc, #344]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	4a55      	ldr	r2, [pc, #340]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 809b 	beq.w	8005e8a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d54:	4b50      	ldr	r3, [pc, #320]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f003 030c 	and.w	r3, r3, #12
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d05c      	beq.n	8005e1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d141      	bne.n	8005dec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d68:	4b4c      	ldr	r3, [pc, #304]	; (8005e9c <HAL_RCC_OscConfig+0x4ec>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d6e:	f7fe fb47 	bl	8004400 <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d74:	e008      	b.n	8005d88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d76:	f7fe fb43 	bl	8004400 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e081      	b.n	8005e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d88:	4b43      	ldr	r3, [pc, #268]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1f0      	bne.n	8005d76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	69da      	ldr	r2, [r3, #28]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	019b      	lsls	r3, r3, #6
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005daa:	085b      	lsrs	r3, r3, #1
 8005dac:	3b01      	subs	r3, #1
 8005dae:	041b      	lsls	r3, r3, #16
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db6:	061b      	lsls	r3, r3, #24
 8005db8:	4937      	ldr	r1, [pc, #220]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dbe:	4b37      	ldr	r3, [pc, #220]	; (8005e9c <HAL_RCC_OscConfig+0x4ec>)
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc4:	f7fe fb1c 	bl	8004400 <HAL_GetTick>
 8005dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dcc:	f7fe fb18 	bl	8004400 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e056      	b.n	8005e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dde:	4b2e      	ldr	r3, [pc, #184]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0f0      	beq.n	8005dcc <HAL_RCC_OscConfig+0x41c>
 8005dea:	e04e      	b.n	8005e8a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dec:	4b2b      	ldr	r3, [pc, #172]	; (8005e9c <HAL_RCC_OscConfig+0x4ec>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df2:	f7fe fb05 	bl	8004400 <HAL_GetTick>
 8005df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df8:	e008      	b.n	8005e0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dfa:	f7fe fb01 	bl	8004400 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e03f      	b.n	8005e8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e0c:	4b22      	ldr	r3, [pc, #136]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1f0      	bne.n	8005dfa <HAL_RCC_OscConfig+0x44a>
 8005e18:	e037      	b.n	8005e8a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d101      	bne.n	8005e26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e032      	b.n	8005e8c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e26:	4b1c      	ldr	r3, [pc, #112]	; (8005e98 <HAL_RCC_OscConfig+0x4e8>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d028      	beq.n	8005e86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d121      	bne.n	8005e86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d11a      	bne.n	8005e86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e56:	4013      	ands	r3, r2
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d111      	bne.n	8005e86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6c:	085b      	lsrs	r3, r3, #1
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d107      	bne.n	8005e86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d001      	beq.n	8005e8a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	40007000 	.word	0x40007000
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	42470060 	.word	0x42470060

08005ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e0cc      	b.n	800604e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005eb4:	4b68      	ldr	r3, [pc, #416]	; (8006058 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d90c      	bls.n	8005edc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ec2:	4b65      	ldr	r3, [pc, #404]	; (8006058 <HAL_RCC_ClockConfig+0x1b8>)
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eca:	4b63      	ldr	r3, [pc, #396]	; (8006058 <HAL_RCC_ClockConfig+0x1b8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d001      	beq.n	8005edc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e0b8      	b.n	800604e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d020      	beq.n	8005f2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d005      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ef4:	4b59      	ldr	r3, [pc, #356]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	4a58      	ldr	r2, [pc, #352]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005efe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f0c:	4b53      	ldr	r3, [pc, #332]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	4a52      	ldr	r2, [pc, #328]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f18:	4b50      	ldr	r3, [pc, #320]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	494d      	ldr	r1, [pc, #308]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d044      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d107      	bne.n	8005f4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f3e:	4b47      	ldr	r3, [pc, #284]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d119      	bne.n	8005f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e07f      	b.n	800604e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d003      	beq.n	8005f5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d107      	bne.n	8005f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f5e:	4b3f      	ldr	r3, [pc, #252]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d109      	bne.n	8005f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e06f      	b.n	800604e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f6e:	4b3b      	ldr	r3, [pc, #236]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e067      	b.n	800604e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f7e:	4b37      	ldr	r3, [pc, #220]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f023 0203 	bic.w	r2, r3, #3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	4934      	ldr	r1, [pc, #208]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f90:	f7fe fa36 	bl	8004400 <HAL_GetTick>
 8005f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f96:	e00a      	b.n	8005fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f98:	f7fe fa32 	bl	8004400 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e04f      	b.n	800604e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fae:	4b2b      	ldr	r3, [pc, #172]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 020c 	and.w	r2, r3, #12
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d1eb      	bne.n	8005f98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fc0:	4b25      	ldr	r3, [pc, #148]	; (8006058 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d20c      	bcs.n	8005fe8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fce:	4b22      	ldr	r3, [pc, #136]	; (8006058 <HAL_RCC_ClockConfig+0x1b8>)
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	b2d2      	uxtb	r2, r2
 8005fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd6:	4b20      	ldr	r3, [pc, #128]	; (8006058 <HAL_RCC_ClockConfig+0x1b8>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d001      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e032      	b.n	800604e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d008      	beq.n	8006006 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ff4:	4b19      	ldr	r3, [pc, #100]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	4916      	ldr	r1, [pc, #88]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8006002:	4313      	orrs	r3, r2
 8006004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0308 	and.w	r3, r3, #8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d009      	beq.n	8006026 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006012:	4b12      	ldr	r3, [pc, #72]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	490e      	ldr	r1, [pc, #56]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 8006022:	4313      	orrs	r3, r2
 8006024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006026:	f000 f821 	bl	800606c <HAL_RCC_GetSysClockFreq>
 800602a:	4602      	mov	r2, r0
 800602c:	4b0b      	ldr	r3, [pc, #44]	; (800605c <HAL_RCC_ClockConfig+0x1bc>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	091b      	lsrs	r3, r3, #4
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	490a      	ldr	r1, [pc, #40]	; (8006060 <HAL_RCC_ClockConfig+0x1c0>)
 8006038:	5ccb      	ldrb	r3, [r1, r3]
 800603a:	fa22 f303 	lsr.w	r3, r2, r3
 800603e:	4a09      	ldr	r2, [pc, #36]	; (8006064 <HAL_RCC_ClockConfig+0x1c4>)
 8006040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006042:	4b09      	ldr	r3, [pc, #36]	; (8006068 <HAL_RCC_ClockConfig+0x1c8>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe f996 	bl	8004378 <HAL_InitTick>

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	40023c00 	.word	0x40023c00
 800605c:	40023800 	.word	0x40023800
 8006060:	08009c60 	.word	0x08009c60
 8006064:	20000004 	.word	0x20000004
 8006068:	20000008 	.word	0x20000008

0800606c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800606c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006070:	b084      	sub	sp, #16
 8006072:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	607b      	str	r3, [r7, #4]
 8006078:	2300      	movs	r3, #0
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	2300      	movs	r3, #0
 800607e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006084:	4b67      	ldr	r3, [pc, #412]	; (8006224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 030c 	and.w	r3, r3, #12
 800608c:	2b08      	cmp	r3, #8
 800608e:	d00d      	beq.n	80060ac <HAL_RCC_GetSysClockFreq+0x40>
 8006090:	2b08      	cmp	r3, #8
 8006092:	f200 80bd 	bhi.w	8006210 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <HAL_RCC_GetSysClockFreq+0x34>
 800609a:	2b04      	cmp	r3, #4
 800609c:	d003      	beq.n	80060a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800609e:	e0b7      	b.n	8006210 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060a0:	4b61      	ldr	r3, [pc, #388]	; (8006228 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80060a2:	60bb      	str	r3, [r7, #8]
       break;
 80060a4:	e0b7      	b.n	8006216 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060a6:	4b61      	ldr	r3, [pc, #388]	; (800622c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80060a8:	60bb      	str	r3, [r7, #8]
      break;
 80060aa:	e0b4      	b.n	8006216 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060ac:	4b5d      	ldr	r3, [pc, #372]	; (8006224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060b6:	4b5b      	ldr	r3, [pc, #364]	; (8006224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d04d      	beq.n	800615e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060c2:	4b58      	ldr	r3, [pc, #352]	; (8006224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	099b      	lsrs	r3, r3, #6
 80060c8:	461a      	mov	r2, r3
 80060ca:	f04f 0300 	mov.w	r3, #0
 80060ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80060d2:	f04f 0100 	mov.w	r1, #0
 80060d6:	ea02 0800 	and.w	r8, r2, r0
 80060da:	ea03 0901 	and.w	r9, r3, r1
 80060de:	4640      	mov	r0, r8
 80060e0:	4649      	mov	r1, r9
 80060e2:	f04f 0200 	mov.w	r2, #0
 80060e6:	f04f 0300 	mov.w	r3, #0
 80060ea:	014b      	lsls	r3, r1, #5
 80060ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80060f0:	0142      	lsls	r2, r0, #5
 80060f2:	4610      	mov	r0, r2
 80060f4:	4619      	mov	r1, r3
 80060f6:	ebb0 0008 	subs.w	r0, r0, r8
 80060fa:	eb61 0109 	sbc.w	r1, r1, r9
 80060fe:	f04f 0200 	mov.w	r2, #0
 8006102:	f04f 0300 	mov.w	r3, #0
 8006106:	018b      	lsls	r3, r1, #6
 8006108:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800610c:	0182      	lsls	r2, r0, #6
 800610e:	1a12      	subs	r2, r2, r0
 8006110:	eb63 0301 	sbc.w	r3, r3, r1
 8006114:	f04f 0000 	mov.w	r0, #0
 8006118:	f04f 0100 	mov.w	r1, #0
 800611c:	00d9      	lsls	r1, r3, #3
 800611e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006122:	00d0      	lsls	r0, r2, #3
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	eb12 0208 	adds.w	r2, r2, r8
 800612c:	eb43 0309 	adc.w	r3, r3, r9
 8006130:	f04f 0000 	mov.w	r0, #0
 8006134:	f04f 0100 	mov.w	r1, #0
 8006138:	0259      	lsls	r1, r3, #9
 800613a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800613e:	0250      	lsls	r0, r2, #9
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4610      	mov	r0, r2
 8006146:	4619      	mov	r1, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	461a      	mov	r2, r3
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	f7fa fd8c 	bl	8000c6c <__aeabi_uldivmod>
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	4613      	mov	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	e04a      	b.n	80061f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800615e:	4b31      	ldr	r3, [pc, #196]	; (8006224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	099b      	lsrs	r3, r3, #6
 8006164:	461a      	mov	r2, r3
 8006166:	f04f 0300 	mov.w	r3, #0
 800616a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800616e:	f04f 0100 	mov.w	r1, #0
 8006172:	ea02 0400 	and.w	r4, r2, r0
 8006176:	ea03 0501 	and.w	r5, r3, r1
 800617a:	4620      	mov	r0, r4
 800617c:	4629      	mov	r1, r5
 800617e:	f04f 0200 	mov.w	r2, #0
 8006182:	f04f 0300 	mov.w	r3, #0
 8006186:	014b      	lsls	r3, r1, #5
 8006188:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800618c:	0142      	lsls	r2, r0, #5
 800618e:	4610      	mov	r0, r2
 8006190:	4619      	mov	r1, r3
 8006192:	1b00      	subs	r0, r0, r4
 8006194:	eb61 0105 	sbc.w	r1, r1, r5
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	018b      	lsls	r3, r1, #6
 80061a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061a6:	0182      	lsls	r2, r0, #6
 80061a8:	1a12      	subs	r2, r2, r0
 80061aa:	eb63 0301 	sbc.w	r3, r3, r1
 80061ae:	f04f 0000 	mov.w	r0, #0
 80061b2:	f04f 0100 	mov.w	r1, #0
 80061b6:	00d9      	lsls	r1, r3, #3
 80061b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061bc:	00d0      	lsls	r0, r2, #3
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	1912      	adds	r2, r2, r4
 80061c4:	eb45 0303 	adc.w	r3, r5, r3
 80061c8:	f04f 0000 	mov.w	r0, #0
 80061cc:	f04f 0100 	mov.w	r1, #0
 80061d0:	0299      	lsls	r1, r3, #10
 80061d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80061d6:	0290      	lsls	r0, r2, #10
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4610      	mov	r0, r2
 80061de:	4619      	mov	r1, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	461a      	mov	r2, r3
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	f7fa fd40 	bl	8000c6c <__aeabi_uldivmod>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4613      	mov	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061f4:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	0c1b      	lsrs	r3, r3, #16
 80061fa:	f003 0303 	and.w	r3, r3, #3
 80061fe:	3301      	adds	r3, #1
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	fbb2 f3f3 	udiv	r3, r2, r3
 800620c:	60bb      	str	r3, [r7, #8]
      break;
 800620e:	e002      	b.n	8006216 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006210:	4b05      	ldr	r3, [pc, #20]	; (8006228 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006212:	60bb      	str	r3, [r7, #8]
      break;
 8006214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006216:	68bb      	ldr	r3, [r7, #8]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006222:	bf00      	nop
 8006224:	40023800 	.word	0x40023800
 8006228:	00f42400 	.word	0x00f42400
 800622c:	007a1200 	.word	0x007a1200

08006230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006230:	b480      	push	{r7}
 8006232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006234:	4b03      	ldr	r3, [pc, #12]	; (8006244 <HAL_RCC_GetHCLKFreq+0x14>)
 8006236:	681b      	ldr	r3, [r3, #0]
}
 8006238:	4618      	mov	r0, r3
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	20000004 	.word	0x20000004

08006248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800624c:	f7ff fff0 	bl	8006230 <HAL_RCC_GetHCLKFreq>
 8006250:	4602      	mov	r2, r0
 8006252:	4b05      	ldr	r3, [pc, #20]	; (8006268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	0a9b      	lsrs	r3, r3, #10
 8006258:	f003 0307 	and.w	r3, r3, #7
 800625c:	4903      	ldr	r1, [pc, #12]	; (800626c <HAL_RCC_GetPCLK1Freq+0x24>)
 800625e:	5ccb      	ldrb	r3, [r1, r3]
 8006260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006264:	4618      	mov	r0, r3
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40023800 	.word	0x40023800
 800626c:	08009c70 	.word	0x08009c70

08006270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006274:	f7ff ffdc 	bl	8006230 <HAL_RCC_GetHCLKFreq>
 8006278:	4602      	mov	r2, r0
 800627a:	4b05      	ldr	r3, [pc, #20]	; (8006290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	0b5b      	lsrs	r3, r3, #13
 8006280:	f003 0307 	and.w	r3, r3, #7
 8006284:	4903      	ldr	r1, [pc, #12]	; (8006294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006286:	5ccb      	ldrb	r3, [r1, r3]
 8006288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800628c:	4618      	mov	r0, r3
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40023800 	.word	0x40023800
 8006294:	08009c70 	.word	0x08009c70

08006298 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e07b      	b.n	80063a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d108      	bne.n	80062c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ba:	d009      	beq.n	80062d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	61da      	str	r2, [r3, #28]
 80062c2:	e005      	b.n	80062d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d106      	bne.n	80062f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7fd fe5a 	bl	8003fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006306:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006354:	ea42 0103 	orr.w	r1, r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	0c1b      	lsrs	r3, r3, #16
 800636e:	f003 0104 	and.w	r1, r3, #4
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	f003 0210 	and.w	r2, r3, #16
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69da      	ldr	r2, [r3, #28]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006390:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_SPI_Transmit_IT+0x20>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e06f      	b.n	80064ac <HAL_SPI_Transmit_IT+0x100>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_SPI_Transmit_IT+0x34>
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063e4:	e05d      	b.n	80064a2 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d002      	beq.n	80063f8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80063f2:	2302      	movs	r3, #2
 80063f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063f6:	e054      	b.n	80064a2 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2203      	movs	r2, #3
 80063fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	88fa      	ldrh	r2, [r7, #6]
 8006410:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4a1f      	ldr	r2, [pc, #124]	; (80064b8 <HAL_SPI_Transmit_IT+0x10c>)
 800643c:	645a      	str	r2, [r3, #68]	; 0x44
 800643e:	e002      	b.n	8006446 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4a1e      	ldr	r2, [pc, #120]	; (80064bc <HAL_SPI_Transmit_IT+0x110>)
 8006444:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800644e:	d10f      	bne.n	8006470 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800645e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800646e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800647e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b40      	cmp	r3, #64	; 0x40
 800648c:	d008      	beq.n	80064a0 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	e000      	b.n	80064a2 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80064a0:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	371c      	adds	r7, #28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	08006743 	.word	0x08006743
 80064bc:	080066fd 	.word	0x080066fd

080064c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b088      	sub	sp, #32
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	099b      	lsrs	r3, r3, #6
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10f      	bne.n	8006504 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	099b      	lsrs	r3, r3, #6
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	4798      	blx	r3
    return;
 8006502:	e0d7      	b.n	80066b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	085b      	lsrs	r3, r3, #1
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <HAL_SPI_IRQHandler+0x66>
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	09db      	lsrs	r3, r3, #7
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d004      	beq.n	8006526 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4798      	blx	r3
    return;
 8006524:	e0c6      	b.n	80066b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	095b      	lsrs	r3, r3, #5
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10c      	bne.n	800654c <HAL_SPI_IRQHandler+0x8c>
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	099b      	lsrs	r3, r3, #6
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	0a1b      	lsrs	r3, r3, #8
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 80b4 	beq.w	80066b4 <HAL_SPI_IRQHandler+0x1f4>
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	095b      	lsrs	r3, r3, #5
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 80ad 	beq.w	80066b4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	099b      	lsrs	r3, r3, #6
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d023      	beq.n	80065ae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b03      	cmp	r3, #3
 8006570:	d011      	beq.n	8006596 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006576:	f043 0204 	orr.w	r2, r3, #4
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800657e:	2300      	movs	r3, #0
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	e00b      	b.n	80065ae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006596:	2300      	movs	r3, #0
 8006598:	613b      	str	r3, [r7, #16]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	613b      	str	r3, [r7, #16]
 80065aa:	693b      	ldr	r3, [r7, #16]
        return;
 80065ac:	e082      	b.n	80066b4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	095b      	lsrs	r3, r3, #5
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d014      	beq.n	80065e4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065be:	f043 0201 	orr.w	r2, r3, #1
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	0a1b      	lsrs	r3, r3, #8
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00c      	beq.n	800660a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f4:	f043 0208 	orr.w	r2, r3, #8
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80065fc:	2300      	movs	r3, #0
 80065fe:	60bb      	str	r3, [r7, #8]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	60bb      	str	r3, [r7, #8]
 8006608:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660e:	2b00      	cmp	r3, #0
 8006610:	d04f      	beq.n	80066b2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006620:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d104      	bne.n	800663e <HAL_SPI_IRQHandler+0x17e>
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d034      	beq.n	80066a8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0203 	bic.w	r2, r2, #3
 800664c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006652:	2b00      	cmp	r3, #0
 8006654:	d011      	beq.n	800667a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800665a:	4a18      	ldr	r2, [pc, #96]	; (80066bc <HAL_SPI_IRQHandler+0x1fc>)
 800665c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe fd62 	bl	800512c <HAL_DMA_Abort_IT>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d005      	beq.n	800667a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006672:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800667e:	2b00      	cmp	r3, #0
 8006680:	d016      	beq.n	80066b0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006686:	4a0d      	ldr	r2, [pc, #52]	; (80066bc <HAL_SPI_IRQHandler+0x1fc>)
 8006688:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800668e:	4618      	mov	r0, r3
 8006690:	f7fe fd4c 	bl	800512c <HAL_DMA_Abort_IT>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80066a6:	e003      	b.n	80066b0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f809 	bl	80066c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80066ae:	e000      	b.n	80066b2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80066b0:	bf00      	nop
    return;
 80066b2:	bf00      	nop
  }
}
 80066b4:	3720      	adds	r7, #32
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	080066d5 	.word	0x080066d5

080066c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7ff ffe6 	bl	80066c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066f4:	bf00      	nop
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	330c      	adds	r3, #12
 800670e:	7812      	ldrb	r2, [r2, #0]
 8006710:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d102      	bne.n	800673a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f8f1 	bl	800691c <SPI_CloseTx_ISR>
  }
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674e:	881a      	ldrh	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675a:	1c9a      	adds	r2, r3, #2
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006764:	b29b      	uxth	r3, r3
 8006766:	3b01      	subs	r3, #1
 8006768:	b29a      	uxth	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006772:	b29b      	uxth	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	d102      	bne.n	800677e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f8cf 	bl	800691c <SPI_CloseTx_ISR>
  }
}
 800677e:	bf00      	nop
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b088      	sub	sp, #32
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	603b      	str	r3, [r7, #0]
 8006794:	4613      	mov	r3, r2
 8006796:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006798:	f7fd fe32 	bl	8004400 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	4413      	add	r3, r2
 80067a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067a8:	f7fd fe2a 	bl	8004400 <HAL_GetTick>
 80067ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067ae:	4b39      	ldr	r3, [pc, #228]	; (8006894 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	015b      	lsls	r3, r3, #5
 80067b4:	0d1b      	lsrs	r3, r3, #20
 80067b6:	69fa      	ldr	r2, [r7, #28]
 80067b8:	fb02 f303 	mul.w	r3, r2, r3
 80067bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067be:	e054      	b.n	800686a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c6:	d050      	beq.n	800686a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067c8:	f7fd fe1a 	bl	8004400 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d902      	bls.n	80067de <SPI_WaitFlagStateUntilTimeout+0x56>
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d13d      	bne.n	800685a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067f6:	d111      	bne.n	800681c <SPI_WaitFlagStateUntilTimeout+0x94>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006800:	d004      	beq.n	800680c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800680a:	d107      	bne.n	800681c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800681a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006824:	d10f      	bne.n	8006846 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006844:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e017      	b.n	800688a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	3b01      	subs	r3, #1
 8006868:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	4013      	ands	r3, r2
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	429a      	cmp	r2, r3
 8006878:	bf0c      	ite	eq
 800687a:	2301      	moveq	r3, #1
 800687c:	2300      	movne	r3, #0
 800687e:	b2db      	uxtb	r3, r3
 8006880:	461a      	mov	r2, r3
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	429a      	cmp	r2, r3
 8006886:	d19b      	bne.n	80067c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3720      	adds	r7, #32
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20000004 	.word	0x20000004

08006898 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af02      	add	r7, sp, #8
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80068a4:	4b1b      	ldr	r3, [pc, #108]	; (8006914 <SPI_EndRxTxTransaction+0x7c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a1b      	ldr	r2, [pc, #108]	; (8006918 <SPI_EndRxTxTransaction+0x80>)
 80068aa:	fba2 2303 	umull	r2, r3, r2, r3
 80068ae:	0d5b      	lsrs	r3, r3, #21
 80068b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068b4:	fb02 f303 	mul.w	r3, r2, r3
 80068b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068c2:	d112      	bne.n	80068ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2200      	movs	r2, #0
 80068cc:	2180      	movs	r1, #128	; 0x80
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f7ff ff5a 	bl	8006788 <SPI_WaitFlagStateUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d016      	beq.n	8006908 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068de:	f043 0220 	orr.w	r2, r3, #32
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e00f      	b.n	800690a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00a      	beq.n	8006906 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006900:	2b80      	cmp	r3, #128	; 0x80
 8006902:	d0f2      	beq.n	80068ea <SPI_EndRxTxTransaction+0x52>
 8006904:	e000      	b.n	8006908 <SPI_EndRxTxTransaction+0x70>
        break;
 8006906:	bf00      	nop
  }

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20000004 	.word	0x20000004
 8006918:	165e9f81 	.word	0x165e9f81

0800691c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006924:	4b2c      	ldr	r3, [pc, #176]	; (80069d8 <SPI_CloseTx_ISR+0xbc>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a2c      	ldr	r2, [pc, #176]	; (80069dc <SPI_CloseTx_ISR+0xc0>)
 800692a:	fba2 2303 	umull	r2, r3, r2, r3
 800692e:	0a5b      	lsrs	r3, r3, #9
 8006930:	2264      	movs	r2, #100	; 0x64
 8006932:	fb02 f303 	mul.w	r3, r2, r3
 8006936:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006938:	f7fd fd62 	bl	8004400 <HAL_GetTick>
 800693c:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d106      	bne.n	8006952 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006948:	f043 0220 	orr.w	r2, r3, #32
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006950:	e009      	b.n	8006966 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	3b01      	subs	r3, #1
 8006956:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0eb      	beq.n	800693e <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006974:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	2164      	movs	r1, #100	; 0x64
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff ff8c 	bl	8006898 <SPI_EndRxTxTransaction>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d005      	beq.n	8006992 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800698a:	f043 0220 	orr.w	r2, r3, #32
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10a      	bne.n	80069b0 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff fe7d 	bl	80066c0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80069c6:	e002      	b.n	80069ce <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7fd f9c7 	bl	8003d5c <HAL_SPI_TxCpltCallback>
}
 80069ce:	bf00      	nop
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20000004 	.word	0x20000004
 80069dc:	057619f1 	.word	0x057619f1

080069e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e041      	b.n	8006a76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7fd fb1c 	bl	8004044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4610      	mov	r0, r2
 8006a20:	f000 fade 	bl	8006fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d001      	beq.n	8006a98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e03c      	b.n	8006b12 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a1e      	ldr	r2, [pc, #120]	; (8006b20 <HAL_TIM_Base_Start+0xa0>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d018      	beq.n	8006adc <HAL_TIM_Base_Start+0x5c>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab2:	d013      	beq.n	8006adc <HAL_TIM_Base_Start+0x5c>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a1a      	ldr	r2, [pc, #104]	; (8006b24 <HAL_TIM_Base_Start+0xa4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d00e      	beq.n	8006adc <HAL_TIM_Base_Start+0x5c>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a19      	ldr	r2, [pc, #100]	; (8006b28 <HAL_TIM_Base_Start+0xa8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d009      	beq.n	8006adc <HAL_TIM_Base_Start+0x5c>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a17      	ldr	r2, [pc, #92]	; (8006b2c <HAL_TIM_Base_Start+0xac>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d004      	beq.n	8006adc <HAL_TIM_Base_Start+0x5c>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a16      	ldr	r2, [pc, #88]	; (8006b30 <HAL_TIM_Base_Start+0xb0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d111      	bne.n	8006b00 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b06      	cmp	r3, #6
 8006aec:	d010      	beq.n	8006b10 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0201 	orr.w	r2, r2, #1
 8006afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006afe:	e007      	b.n	8006b10 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0201 	orr.w	r2, r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	40010000 	.word	0x40010000
 8006b24:	40000400 	.word	0x40000400
 8006b28:	40000800 	.word	0x40000800
 8006b2c:	40000c00 	.word	0x40000c00
 8006b30:	40014000 	.word	0x40014000

08006b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d001      	beq.n	8006b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e044      	b.n	8006bd6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f042 0201 	orr.w	r2, r2, #1
 8006b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a1e      	ldr	r2, [pc, #120]	; (8006be4 <HAL_TIM_Base_Start_IT+0xb0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d018      	beq.n	8006ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b76:	d013      	beq.n	8006ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a1a      	ldr	r2, [pc, #104]	; (8006be8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d00e      	beq.n	8006ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a19      	ldr	r2, [pc, #100]	; (8006bec <HAL_TIM_Base_Start_IT+0xb8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d009      	beq.n	8006ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a17      	ldr	r2, [pc, #92]	; (8006bf0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d004      	beq.n	8006ba0 <HAL_TIM_Base_Start_IT+0x6c>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a16      	ldr	r2, [pc, #88]	; (8006bf4 <HAL_TIM_Base_Start_IT+0xc0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d111      	bne.n	8006bc4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b06      	cmp	r3, #6
 8006bb0:	d010      	beq.n	8006bd4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f042 0201 	orr.w	r2, r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc2:	e007      	b.n	8006bd4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0201 	orr.w	r2, r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	40010000 	.word	0x40010000
 8006be8:	40000400 	.word	0x40000400
 8006bec:	40000800 	.word	0x40000800
 8006bf0:	40000c00 	.word	0x40000c00
 8006bf4:	40014000 	.word	0x40014000

08006bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d122      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d11b      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f06f 0202 	mvn.w	r2, #2
 8006c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f9b2 	bl	8006fa4 <HAL_TIM_IC_CaptureCallback>
 8006c40:	e005      	b.n	8006c4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f9a4 	bl	8006f90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f9b5 	bl	8006fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f003 0304 	and.w	r3, r3, #4
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d122      	bne.n	8006ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d11b      	bne.n	8006ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f06f 0204 	mvn.w	r2, #4
 8006c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f988 	bl	8006fa4 <HAL_TIM_IC_CaptureCallback>
 8006c94:	e005      	b.n	8006ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f97a 	bl	8006f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f98b 	bl	8006fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f003 0308 	and.w	r3, r3, #8
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d122      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d11b      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f06f 0208 	mvn.w	r2, #8
 8006ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	f003 0303 	and.w	r3, r3, #3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f95e 	bl	8006fa4 <HAL_TIM_IC_CaptureCallback>
 8006ce8:	e005      	b.n	8006cf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f950 	bl	8006f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f961 	bl	8006fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f003 0310 	and.w	r3, r3, #16
 8006d06:	2b10      	cmp	r3, #16
 8006d08:	d122      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f003 0310 	and.w	r3, r3, #16
 8006d14:	2b10      	cmp	r3, #16
 8006d16:	d11b      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f06f 0210 	mvn.w	r2, #16
 8006d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2208      	movs	r2, #8
 8006d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f934 	bl	8006fa4 <HAL_TIM_IC_CaptureCallback>
 8006d3c:	e005      	b.n	8006d4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f926 	bl	8006f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f937 	bl	8006fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d10e      	bne.n	8006d7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d107      	bne.n	8006d7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f06f 0201 	mvn.w	r2, #1
 8006d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fd f836 	bl	8003de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d86:	2b80      	cmp	r3, #128	; 0x80
 8006d88:	d10e      	bne.n	8006da8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d94:	2b80      	cmp	r3, #128	; 0x80
 8006d96:	d107      	bne.n	8006da8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 faae 	bl	8007304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db2:	2b40      	cmp	r3, #64	; 0x40
 8006db4:	d10e      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b40      	cmp	r3, #64	; 0x40
 8006dc2:	d107      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f8fc 	bl	8006fcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d10e      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	d107      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f06f 0220 	mvn.w	r2, #32
 8006df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa78 	bl	80072f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d101      	bne.n	8006e20 <HAL_TIM_ConfigClockSource+0x18>
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	e0b3      	b.n	8006f88 <HAL_TIM_ConfigClockSource+0x180>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e58:	d03e      	beq.n	8006ed8 <HAL_TIM_ConfigClockSource+0xd0>
 8006e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e5e:	f200 8087 	bhi.w	8006f70 <HAL_TIM_ConfigClockSource+0x168>
 8006e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e66:	f000 8085 	beq.w	8006f74 <HAL_TIM_ConfigClockSource+0x16c>
 8006e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e6e:	d87f      	bhi.n	8006f70 <HAL_TIM_ConfigClockSource+0x168>
 8006e70:	2b70      	cmp	r3, #112	; 0x70
 8006e72:	d01a      	beq.n	8006eaa <HAL_TIM_ConfigClockSource+0xa2>
 8006e74:	2b70      	cmp	r3, #112	; 0x70
 8006e76:	d87b      	bhi.n	8006f70 <HAL_TIM_ConfigClockSource+0x168>
 8006e78:	2b60      	cmp	r3, #96	; 0x60
 8006e7a:	d050      	beq.n	8006f1e <HAL_TIM_ConfigClockSource+0x116>
 8006e7c:	2b60      	cmp	r3, #96	; 0x60
 8006e7e:	d877      	bhi.n	8006f70 <HAL_TIM_ConfigClockSource+0x168>
 8006e80:	2b50      	cmp	r3, #80	; 0x50
 8006e82:	d03c      	beq.n	8006efe <HAL_TIM_ConfigClockSource+0xf6>
 8006e84:	2b50      	cmp	r3, #80	; 0x50
 8006e86:	d873      	bhi.n	8006f70 <HAL_TIM_ConfigClockSource+0x168>
 8006e88:	2b40      	cmp	r3, #64	; 0x40
 8006e8a:	d058      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x136>
 8006e8c:	2b40      	cmp	r3, #64	; 0x40
 8006e8e:	d86f      	bhi.n	8006f70 <HAL_TIM_ConfigClockSource+0x168>
 8006e90:	2b30      	cmp	r3, #48	; 0x30
 8006e92:	d064      	beq.n	8006f5e <HAL_TIM_ConfigClockSource+0x156>
 8006e94:	2b30      	cmp	r3, #48	; 0x30
 8006e96:	d86b      	bhi.n	8006f70 <HAL_TIM_ConfigClockSource+0x168>
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d060      	beq.n	8006f5e <HAL_TIM_ConfigClockSource+0x156>
 8006e9c:	2b20      	cmp	r3, #32
 8006e9e:	d867      	bhi.n	8006f70 <HAL_TIM_ConfigClockSource+0x168>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d05c      	beq.n	8006f5e <HAL_TIM_ConfigClockSource+0x156>
 8006ea4:	2b10      	cmp	r3, #16
 8006ea6:	d05a      	beq.n	8006f5e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006ea8:	e062      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6818      	ldr	r0, [r3, #0]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	6899      	ldr	r1, [r3, #8]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f000 f98b 	bl	80071d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ecc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	609a      	str	r2, [r3, #8]
      break;
 8006ed6:	e04e      	b.n	8006f76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6818      	ldr	r0, [r3, #0]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	6899      	ldr	r1, [r3, #8]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f000 f974 	bl	80071d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689a      	ldr	r2, [r3, #8]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006efa:	609a      	str	r2, [r3, #8]
      break;
 8006efc:	e03b      	b.n	8006f76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6818      	ldr	r0, [r3, #0]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	6859      	ldr	r1, [r3, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f000 f8e8 	bl	80070e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2150      	movs	r1, #80	; 0x50
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 f941 	bl	800719e <TIM_ITRx_SetConfig>
      break;
 8006f1c:	e02b      	b.n	8006f76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	6859      	ldr	r1, [r3, #4]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f000 f907 	bl	800713e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2160      	movs	r1, #96	; 0x60
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 f931 	bl	800719e <TIM_ITRx_SetConfig>
      break;
 8006f3c:	e01b      	b.n	8006f76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	6859      	ldr	r1, [r3, #4]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f000 f8c8 	bl	80070e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2140      	movs	r1, #64	; 0x40
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 f921 	bl	800719e <TIM_ITRx_SetConfig>
      break;
 8006f5c:	e00b      	b.n	8006f76 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4619      	mov	r1, r3
 8006f68:	4610      	mov	r0, r2
 8006f6a:	f000 f918 	bl	800719e <TIM_ITRx_SetConfig>
        break;
 8006f6e:	e002      	b.n	8006f76 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006f70:	bf00      	nop
 8006f72:	e000      	b.n	8006f76 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006f74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a34      	ldr	r2, [pc, #208]	; (80070c4 <TIM_Base_SetConfig+0xe4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00f      	beq.n	8007018 <TIM_Base_SetConfig+0x38>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ffe:	d00b      	beq.n	8007018 <TIM_Base_SetConfig+0x38>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a31      	ldr	r2, [pc, #196]	; (80070c8 <TIM_Base_SetConfig+0xe8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d007      	beq.n	8007018 <TIM_Base_SetConfig+0x38>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a30      	ldr	r2, [pc, #192]	; (80070cc <TIM_Base_SetConfig+0xec>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d003      	beq.n	8007018 <TIM_Base_SetConfig+0x38>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a2f      	ldr	r2, [pc, #188]	; (80070d0 <TIM_Base_SetConfig+0xf0>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d108      	bne.n	800702a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4313      	orrs	r3, r2
 8007028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a25      	ldr	r2, [pc, #148]	; (80070c4 <TIM_Base_SetConfig+0xe4>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d01b      	beq.n	800706a <TIM_Base_SetConfig+0x8a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007038:	d017      	beq.n	800706a <TIM_Base_SetConfig+0x8a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a22      	ldr	r2, [pc, #136]	; (80070c8 <TIM_Base_SetConfig+0xe8>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d013      	beq.n	800706a <TIM_Base_SetConfig+0x8a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a21      	ldr	r2, [pc, #132]	; (80070cc <TIM_Base_SetConfig+0xec>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00f      	beq.n	800706a <TIM_Base_SetConfig+0x8a>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a20      	ldr	r2, [pc, #128]	; (80070d0 <TIM_Base_SetConfig+0xf0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00b      	beq.n	800706a <TIM_Base_SetConfig+0x8a>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a1f      	ldr	r2, [pc, #124]	; (80070d4 <TIM_Base_SetConfig+0xf4>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d007      	beq.n	800706a <TIM_Base_SetConfig+0x8a>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a1e      	ldr	r2, [pc, #120]	; (80070d8 <TIM_Base_SetConfig+0xf8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d003      	beq.n	800706a <TIM_Base_SetConfig+0x8a>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a1d      	ldr	r2, [pc, #116]	; (80070dc <TIM_Base_SetConfig+0xfc>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d108      	bne.n	800707c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	4313      	orrs	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a08      	ldr	r2, [pc, #32]	; (80070c4 <TIM_Base_SetConfig+0xe4>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d103      	bne.n	80070b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	691a      	ldr	r2, [r3, #16]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	615a      	str	r2, [r3, #20]
}
 80070b6:	bf00      	nop
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	40010000 	.word	0x40010000
 80070c8:	40000400 	.word	0x40000400
 80070cc:	40000800 	.word	0x40000800
 80070d0:	40000c00 	.word	0x40000c00
 80070d4:	40014000 	.word	0x40014000
 80070d8:	40014400 	.word	0x40014400
 80070dc:	40014800 	.word	0x40014800

080070e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	f023 0201 	bic.w	r2, r3, #1
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800710a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	4313      	orrs	r3, r2
 8007114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f023 030a 	bic.w	r3, r3, #10
 800711c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	621a      	str	r2, [r3, #32]
}
 8007132:	bf00      	nop
 8007134:	371c      	adds	r7, #28
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800713e:	b480      	push	{r7}
 8007140:	b087      	sub	sp, #28
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	f023 0210 	bic.w	r2, r3, #16
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	031b      	lsls	r3, r3, #12
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	4313      	orrs	r3, r2
 8007172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800717a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	011b      	lsls	r3, r3, #4
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	4313      	orrs	r3, r2
 8007184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	621a      	str	r2, [r3, #32]
}
 8007192:	bf00      	nop
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800719e:	b480      	push	{r7}
 80071a0:	b085      	sub	sp, #20
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	f043 0307 	orr.w	r3, r3, #7
 80071c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	609a      	str	r2, [r3, #8]
}
 80071c8:	bf00      	nop
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
 80071e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	021a      	lsls	r2, r3, #8
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	431a      	orrs	r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	4313      	orrs	r3, r2
 8007200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	609a      	str	r2, [r3, #8]
}
 8007208:	bf00      	nop
 800720a:	371c      	adds	r7, #28
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007228:	2302      	movs	r3, #2
 800722a:	e050      	b.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a1c      	ldr	r2, [pc, #112]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d018      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007278:	d013      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a18      	ldr	r2, [pc, #96]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d00e      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a16      	ldr	r2, [pc, #88]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d009      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a15      	ldr	r2, [pc, #84]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d004      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a13      	ldr	r2, [pc, #76]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d10c      	bne.n	80072bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40010000 	.word	0x40010000
 80072e0:	40000400 	.word	0x40000400
 80072e4:	40000800 	.word	0x40000800
 80072e8:	40000c00 	.word	0x40000c00
 80072ec:	40014000 	.word	0x40014000

080072f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e03f      	b.n	80073aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d106      	bne.n	8007344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7fc feda 	bl	80040f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2224      	movs	r2, #36	; 0x24
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800735a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fc85 	bl	8007c6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	691a      	ldr	r2, [r3, #16]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695a      	ldr	r2, [r3, #20]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68da      	ldr	r2, [r3, #12]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2220      	movs	r2, #32
 800739c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b08a      	sub	sp, #40	; 0x28
 80073b6:	af02      	add	r7, sp, #8
 80073b8:	60f8      	str	r0, [r7, #12]
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	603b      	str	r3, [r7, #0]
 80073be:	4613      	mov	r3, r2
 80073c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b20      	cmp	r3, #32
 80073d0:	d17c      	bne.n	80074cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <HAL_UART_Transmit+0x2c>
 80073d8:	88fb      	ldrh	r3, [r7, #6]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e075      	b.n	80074ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d101      	bne.n	80073f0 <HAL_UART_Transmit+0x3e>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e06e      	b.n	80074ce <HAL_UART_Transmit+0x11c>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2221      	movs	r2, #33	; 0x21
 8007402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007406:	f7fc fffb 	bl	8004400 <HAL_GetTick>
 800740a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	88fa      	ldrh	r2, [r7, #6]
 8007410:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	88fa      	ldrh	r2, [r7, #6]
 8007416:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007420:	d108      	bne.n	8007434 <HAL_UART_Transmit+0x82>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d104      	bne.n	8007434 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800742a:	2300      	movs	r3, #0
 800742c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	61bb      	str	r3, [r7, #24]
 8007432:	e003      	b.n	800743c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007438:	2300      	movs	r3, #0
 800743a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007444:	e02a      	b.n	800749c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2200      	movs	r2, #0
 800744e:	2180      	movs	r1, #128	; 0x80
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 fa47 	bl	80078e4 <UART_WaitOnFlagUntilTimeout>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e036      	b.n	80074ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10b      	bne.n	800747e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007474:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	3302      	adds	r3, #2
 800747a:	61bb      	str	r3, [r7, #24]
 800747c:	e007      	b.n	800748e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	781a      	ldrb	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	3301      	adds	r3, #1
 800748c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007492:	b29b      	uxth	r3, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	b29a      	uxth	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1cf      	bne.n	8007446 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2200      	movs	r2, #0
 80074ae:	2140      	movs	r1, #64	; 0x40
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 fa17 	bl	80078e4 <UART_WaitOnFlagUntilTimeout>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e006      	b.n	80074ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	e000      	b.n	80074ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80074cc:	2302      	movs	r3, #2
  }
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3720      	adds	r7, #32
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	4613      	mov	r3, r2
 80074e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	d11d      	bne.n	800752c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <HAL_UART_Receive_IT+0x26>
 80074f6:	88fb      	ldrh	r3, [r7, #6]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e016      	b.n	800752e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007506:	2b01      	cmp	r3, #1
 8007508:	d101      	bne.n	800750e <HAL_UART_Receive_IT+0x38>
 800750a:	2302      	movs	r3, #2
 800750c:	e00f      	b.n	800752e <HAL_UART_Receive_IT+0x58>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800751c:	88fb      	ldrh	r3, [r7, #6]
 800751e:	461a      	mov	r2, r3
 8007520:	68b9      	ldr	r1, [r7, #8]
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 fa28 	bl	8007978 <UART_Start_Receive_IT>
 8007528:	4603      	mov	r3, r0
 800752a:	e000      	b.n	800752e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800752c:	2302      	movs	r3, #2
  }
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
	...

08007538 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08a      	sub	sp, #40	; 0x28
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007558:	2300      	movs	r3, #0
 800755a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800755c:	2300      	movs	r3, #0
 800755e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10d      	bne.n	800758a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	f003 0320 	and.w	r3, r3, #32
 8007574:	2b00      	cmp	r3, #0
 8007576:	d008      	beq.n	800758a <HAL_UART_IRQHandler+0x52>
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	f003 0320 	and.w	r3, r3, #32
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fadb 	bl	8007b3e <UART_Receive_IT>
      return;
 8007588:	e17c      	b.n	8007884 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 80b1 	beq.w	80076f4 <HAL_UART_IRQHandler+0x1bc>
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d105      	bne.n	80075a8 <HAL_UART_IRQHandler+0x70>
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 80a6 	beq.w	80076f4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00a      	beq.n	80075c8 <HAL_UART_IRQHandler+0x90>
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d005      	beq.n	80075c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c0:	f043 0201 	orr.w	r2, r3, #1
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	f003 0304 	and.w	r3, r3, #4
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <HAL_UART_IRQHandler+0xb0>
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d005      	beq.n	80075e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e0:	f043 0202 	orr.w	r2, r3, #2
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <HAL_UART_IRQHandler+0xd0>
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007600:	f043 0204 	orr.w	r2, r3, #4
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	f003 0308 	and.w	r3, r3, #8
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00f      	beq.n	8007632 <HAL_UART_IRQHandler+0xfa>
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	f003 0320 	and.w	r3, r3, #32
 8007618:	2b00      	cmp	r3, #0
 800761a:	d104      	bne.n	8007626 <HAL_UART_IRQHandler+0xee>
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	f043 0208 	orr.w	r2, r3, #8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 811f 	beq.w	800787a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b00      	cmp	r3, #0
 8007644:	d007      	beq.n	8007656 <HAL_UART_IRQHandler+0x11e>
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	f003 0320 	and.w	r3, r3, #32
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fa74 	bl	8007b3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	695b      	ldr	r3, [r3, #20]
 800765c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007660:	2b40      	cmp	r3, #64	; 0x40
 8007662:	bf0c      	ite	eq
 8007664:	2301      	moveq	r3, #1
 8007666:	2300      	movne	r3, #0
 8007668:	b2db      	uxtb	r3, r3
 800766a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007670:	f003 0308 	and.w	r3, r3, #8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d102      	bne.n	800767e <HAL_UART_IRQHandler+0x146>
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d031      	beq.n	80076e2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f9b4 	bl	80079ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768e:	2b40      	cmp	r3, #64	; 0x40
 8007690:	d123      	bne.n	80076da <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	695a      	ldr	r2, [r3, #20]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d013      	beq.n	80076d2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	4a77      	ldr	r2, [pc, #476]	; (800788c <HAL_UART_IRQHandler+0x354>)
 80076b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fd fd38 	bl	800512c <HAL_DMA_Abort_IT>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d016      	beq.n	80076f0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076cc:	4610      	mov	r0, r2
 80076ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d0:	e00e      	b.n	80076f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f8f0 	bl	80078b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d8:	e00a      	b.n	80076f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f8ec 	bl	80078b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e0:	e006      	b.n	80076f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f8e8 	bl	80078b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80076ee:	e0c4      	b.n	800787a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f0:	bf00      	nop
    return;
 80076f2:	e0c2      	b.n	800787a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	f040 80a2 	bne.w	8007842 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	f003 0310 	and.w	r3, r3, #16
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 809c 	beq.w	8007842 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	f003 0310 	and.w	r3, r3, #16
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 8096 	beq.w	8007842 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	60fb      	str	r3, [r7, #12]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007736:	2b40      	cmp	r3, #64	; 0x40
 8007738:	d14f      	bne.n	80077da <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007744:	8a3b      	ldrh	r3, [r7, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 8099 	beq.w	800787e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007750:	8a3a      	ldrh	r2, [r7, #16]
 8007752:	429a      	cmp	r2, r3
 8007754:	f080 8093 	bcs.w	800787e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	8a3a      	ldrh	r2, [r7, #16]
 800775c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007768:	d02b      	beq.n	80077c2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007778:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695a      	ldr	r2, [r3, #20]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0201 	bic.w	r2, r2, #1
 8007788:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	695a      	ldr	r2, [r3, #20]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007798:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2220      	movs	r2, #32
 800779e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0210 	bic.w	r2, r2, #16
 80077b6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fd fc45 	bl	800504c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f87a 	bl	80078cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80077d8:	e051      	b.n	800787e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d047      	beq.n	8007882 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80077f2:	8a7b      	ldrh	r3, [r7, #18]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d044      	beq.n	8007882 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68da      	ldr	r2, [r3, #12]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007806:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	695a      	ldr	r2, [r3, #20]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 0201 	bic.w	r2, r2, #1
 8007816:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2220      	movs	r2, #32
 800781c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f022 0210 	bic.w	r2, r2, #16
 8007834:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007836:	8a7b      	ldrh	r3, [r7, #18]
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f846 	bl	80078cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007840:	e01f      	b.n	8007882 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007848:	2b00      	cmp	r3, #0
 800784a:	d008      	beq.n	800785e <HAL_UART_IRQHandler+0x326>
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f909 	bl	8007a6e <UART_Transmit_IT>
    return;
 800785c:	e012      	b.n	8007884 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00d      	beq.n	8007884 <HAL_UART_IRQHandler+0x34c>
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786e:	2b00      	cmp	r3, #0
 8007870:	d008      	beq.n	8007884 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f94b 	bl	8007b0e <UART_EndTransmit_IT>
    return;
 8007878:	e004      	b.n	8007884 <HAL_UART_IRQHandler+0x34c>
    return;
 800787a:	bf00      	nop
 800787c:	e002      	b.n	8007884 <HAL_UART_IRQHandler+0x34c>
      return;
 800787e:	bf00      	nop
 8007880:	e000      	b.n	8007884 <HAL_UART_IRQHandler+0x34c>
      return;
 8007882:	bf00      	nop
  }
}
 8007884:	3728      	adds	r7, #40	; 0x28
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	08007a47 	.word	0x08007a47

08007890 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	4613      	mov	r3, r2
 80078f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078f4:	e02c      	b.n	8007950 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fc:	d028      	beq.n	8007950 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d007      	beq.n	8007914 <UART_WaitOnFlagUntilTimeout+0x30>
 8007904:	f7fc fd7c 	bl	8004400 <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	429a      	cmp	r2, r3
 8007912:	d21d      	bcs.n	8007950 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68da      	ldr	r2, [r3, #12]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007922:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	695a      	ldr	r2, [r3, #20]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f022 0201 	bic.w	r2, r2, #1
 8007932:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2220      	movs	r2, #32
 8007938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2220      	movs	r2, #32
 8007940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e00f      	b.n	8007970 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	4013      	ands	r3, r2
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	429a      	cmp	r2, r3
 800795e:	bf0c      	ite	eq
 8007960:	2301      	moveq	r3, #1
 8007962:	2300      	movne	r3, #0
 8007964:	b2db      	uxtb	r3, r3
 8007966:	461a      	mov	r2, r3
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	429a      	cmp	r2, r3
 800796c:	d0c3      	beq.n	80078f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	4613      	mov	r3, r2
 8007984:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	88fa      	ldrh	r2, [r7, #6]
 8007990:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	88fa      	ldrh	r2, [r7, #6]
 8007996:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2222      	movs	r2, #34	; 0x22
 80079a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68da      	ldr	r2, [r3, #12]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079bc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	695a      	ldr	r2, [r3, #20]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f042 0201 	orr.w	r2, r2, #1
 80079cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68da      	ldr	r2, [r3, #12]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f042 0220 	orr.w	r2, r2, #32
 80079dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a02:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	695a      	ldr	r2, [r3, #20]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 0201 	bic.w	r2, r2, #1
 8007a12:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d107      	bne.n	8007a2c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68da      	ldr	r2, [r3, #12]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 0210 	bic.w	r2, r2, #16
 8007a2a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2220      	movs	r2, #32
 8007a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a3a:	bf00      	nop
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f7ff ff29 	bl	80078b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a66:	bf00      	nop
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b085      	sub	sp, #20
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b21      	cmp	r3, #33	; 0x21
 8007a80:	d13e      	bne.n	8007b00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a8a:	d114      	bne.n	8007ab6 <UART_Transmit_IT+0x48>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d110      	bne.n	8007ab6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a1b      	ldr	r3, [r3, #32]
 8007a98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aa8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	1c9a      	adds	r2, r3, #2
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	621a      	str	r2, [r3, #32]
 8007ab4:	e008      	b.n	8007ac8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	1c59      	adds	r1, r3, #1
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	6211      	str	r1, [r2, #32]
 8007ac0:	781a      	ldrb	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10f      	bne.n	8007afc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007aea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007afa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	e000      	b.n	8007b02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b00:	2302      	movs	r3, #2
  }
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7ff feae 	bl	8007890 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b22      	cmp	r3, #34	; 0x22
 8007b50:	f040 8087 	bne.w	8007c62 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b5c:	d117      	bne.n	8007b8e <UART_Receive_IT+0x50>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d113      	bne.n	8007b8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b66:	2300      	movs	r3, #0
 8007b68:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b86:	1c9a      	adds	r2, r3, #2
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	629a      	str	r2, [r3, #40]	; 0x28
 8007b8c:	e026      	b.n	8007bdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b92:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007b94:	2300      	movs	r3, #0
 8007b96:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba0:	d007      	beq.n	8007bb2 <UART_Receive_IT+0x74>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <UART_Receive_IT+0x82>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	701a      	strb	r2, [r3, #0]
 8007bbe:	e008      	b.n	8007bd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	3b01      	subs	r3, #1
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	4619      	mov	r1, r3
 8007bea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d136      	bne.n	8007c5e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0220 	bic.w	r2, r2, #32
 8007bfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	695a      	ldr	r2, [r3, #20]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0201 	bic.w	r2, r2, #1
 8007c1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d10e      	bne.n	8007c4e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 0210 	bic.w	r2, r2, #16
 8007c3e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c44:	4619      	mov	r1, r3
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7ff fe40 	bl	80078cc <HAL_UARTEx_RxEventCallback>
 8007c4c:	e002      	b.n	8007c54 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7ff fe28 	bl	80078a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	e002      	b.n	8007c64 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	e000      	b.n	8007c64 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007c62:	2302      	movs	r3, #2
  }
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c70:	b09f      	sub	sp, #124	; 0x7c
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c82:	68d9      	ldr	r1, [r3, #12]
 8007c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	ea40 0301 	orr.w	r3, r0, r1
 8007c8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c90:	689a      	ldr	r2, [r3, #8]
 8007c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	431a      	orrs	r2, r3
 8007c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	431a      	orrs	r2, r3
 8007c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007cb0:	f021 010c 	bic.w	r1, r1, #12
 8007cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cba:	430b      	orrs	r3, r1
 8007cbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cca:	6999      	ldr	r1, [r3, #24]
 8007ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	ea40 0301 	orr.w	r3, r0, r1
 8007cd4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	4bc5      	ldr	r3, [pc, #788]	; (8007ff0 <UART_SetConfig+0x384>)
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d004      	beq.n	8007cea <UART_SetConfig+0x7e>
 8007ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	4bc3      	ldr	r3, [pc, #780]	; (8007ff4 <UART_SetConfig+0x388>)
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d103      	bne.n	8007cf2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cea:	f7fe fac1 	bl	8006270 <HAL_RCC_GetPCLK2Freq>
 8007cee:	6778      	str	r0, [r7, #116]	; 0x74
 8007cf0:	e002      	b.n	8007cf8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cf2:	f7fe faa9 	bl	8006248 <HAL_RCC_GetPCLK1Freq>
 8007cf6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d00:	f040 80b6 	bne.w	8007e70 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d06:	461c      	mov	r4, r3
 8007d08:	f04f 0500 	mov.w	r5, #0
 8007d0c:	4622      	mov	r2, r4
 8007d0e:	462b      	mov	r3, r5
 8007d10:	1891      	adds	r1, r2, r2
 8007d12:	6439      	str	r1, [r7, #64]	; 0x40
 8007d14:	415b      	adcs	r3, r3
 8007d16:	647b      	str	r3, [r7, #68]	; 0x44
 8007d18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d1c:	1912      	adds	r2, r2, r4
 8007d1e:	eb45 0303 	adc.w	r3, r5, r3
 8007d22:	f04f 0000 	mov.w	r0, #0
 8007d26:	f04f 0100 	mov.w	r1, #0
 8007d2a:	00d9      	lsls	r1, r3, #3
 8007d2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d30:	00d0      	lsls	r0, r2, #3
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	1911      	adds	r1, r2, r4
 8007d38:	6639      	str	r1, [r7, #96]	; 0x60
 8007d3a:	416b      	adcs	r3, r5
 8007d3c:	667b      	str	r3, [r7, #100]	; 0x64
 8007d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	461a      	mov	r2, r3
 8007d44:	f04f 0300 	mov.w	r3, #0
 8007d48:	1891      	adds	r1, r2, r2
 8007d4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d4c:	415b      	adcs	r3, r3
 8007d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d54:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007d58:	f7f8 ff88 	bl	8000c6c <__aeabi_uldivmod>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4ba5      	ldr	r3, [pc, #660]	; (8007ff8 <UART_SetConfig+0x38c>)
 8007d62:	fba3 2302 	umull	r2, r3, r3, r2
 8007d66:	095b      	lsrs	r3, r3, #5
 8007d68:	011e      	lsls	r6, r3, #4
 8007d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d6c:	461c      	mov	r4, r3
 8007d6e:	f04f 0500 	mov.w	r5, #0
 8007d72:	4622      	mov	r2, r4
 8007d74:	462b      	mov	r3, r5
 8007d76:	1891      	adds	r1, r2, r2
 8007d78:	6339      	str	r1, [r7, #48]	; 0x30
 8007d7a:	415b      	adcs	r3, r3
 8007d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007d82:	1912      	adds	r2, r2, r4
 8007d84:	eb45 0303 	adc.w	r3, r5, r3
 8007d88:	f04f 0000 	mov.w	r0, #0
 8007d8c:	f04f 0100 	mov.w	r1, #0
 8007d90:	00d9      	lsls	r1, r3, #3
 8007d92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d96:	00d0      	lsls	r0, r2, #3
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	1911      	adds	r1, r2, r4
 8007d9e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007da0:	416b      	adcs	r3, r5
 8007da2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	461a      	mov	r2, r3
 8007daa:	f04f 0300 	mov.w	r3, #0
 8007dae:	1891      	adds	r1, r2, r2
 8007db0:	62b9      	str	r1, [r7, #40]	; 0x28
 8007db2:	415b      	adcs	r3, r3
 8007db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007db6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007dba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007dbe:	f7f8 ff55 	bl	8000c6c <__aeabi_uldivmod>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4b8c      	ldr	r3, [pc, #560]	; (8007ff8 <UART_SetConfig+0x38c>)
 8007dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8007dcc:	095b      	lsrs	r3, r3, #5
 8007dce:	2164      	movs	r1, #100	; 0x64
 8007dd0:	fb01 f303 	mul.w	r3, r1, r3
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	3332      	adds	r3, #50	; 0x32
 8007dda:	4a87      	ldr	r2, [pc, #540]	; (8007ff8 <UART_SetConfig+0x38c>)
 8007ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8007de0:	095b      	lsrs	r3, r3, #5
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007de8:	441e      	add	r6, r3
 8007dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dec:	4618      	mov	r0, r3
 8007dee:	f04f 0100 	mov.w	r1, #0
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	1894      	adds	r4, r2, r2
 8007df8:	623c      	str	r4, [r7, #32]
 8007dfa:	415b      	adcs	r3, r3
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8007dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e02:	1812      	adds	r2, r2, r0
 8007e04:	eb41 0303 	adc.w	r3, r1, r3
 8007e08:	f04f 0400 	mov.w	r4, #0
 8007e0c:	f04f 0500 	mov.w	r5, #0
 8007e10:	00dd      	lsls	r5, r3, #3
 8007e12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e16:	00d4      	lsls	r4, r2, #3
 8007e18:	4622      	mov	r2, r4
 8007e1a:	462b      	mov	r3, r5
 8007e1c:	1814      	adds	r4, r2, r0
 8007e1e:	653c      	str	r4, [r7, #80]	; 0x50
 8007e20:	414b      	adcs	r3, r1
 8007e22:	657b      	str	r3, [r7, #84]	; 0x54
 8007e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	f04f 0300 	mov.w	r3, #0
 8007e2e:	1891      	adds	r1, r2, r2
 8007e30:	61b9      	str	r1, [r7, #24]
 8007e32:	415b      	adcs	r3, r3
 8007e34:	61fb      	str	r3, [r7, #28]
 8007e36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e3a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007e3e:	f7f8 ff15 	bl	8000c6c <__aeabi_uldivmod>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	4b6c      	ldr	r3, [pc, #432]	; (8007ff8 <UART_SetConfig+0x38c>)
 8007e48:	fba3 1302 	umull	r1, r3, r3, r2
 8007e4c:	095b      	lsrs	r3, r3, #5
 8007e4e:	2164      	movs	r1, #100	; 0x64
 8007e50:	fb01 f303 	mul.w	r3, r1, r3
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	3332      	adds	r3, #50	; 0x32
 8007e5a:	4a67      	ldr	r2, [pc, #412]	; (8007ff8 <UART_SetConfig+0x38c>)
 8007e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e60:	095b      	lsrs	r3, r3, #5
 8007e62:	f003 0207 	and.w	r2, r3, #7
 8007e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4432      	add	r2, r6
 8007e6c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e6e:	e0b9      	b.n	8007fe4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e72:	461c      	mov	r4, r3
 8007e74:	f04f 0500 	mov.w	r5, #0
 8007e78:	4622      	mov	r2, r4
 8007e7a:	462b      	mov	r3, r5
 8007e7c:	1891      	adds	r1, r2, r2
 8007e7e:	6139      	str	r1, [r7, #16]
 8007e80:	415b      	adcs	r3, r3
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007e88:	1912      	adds	r2, r2, r4
 8007e8a:	eb45 0303 	adc.w	r3, r5, r3
 8007e8e:	f04f 0000 	mov.w	r0, #0
 8007e92:	f04f 0100 	mov.w	r1, #0
 8007e96:	00d9      	lsls	r1, r3, #3
 8007e98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e9c:	00d0      	lsls	r0, r2, #3
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	eb12 0804 	adds.w	r8, r2, r4
 8007ea6:	eb43 0905 	adc.w	r9, r3, r5
 8007eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f04f 0100 	mov.w	r1, #0
 8007eb4:	f04f 0200 	mov.w	r2, #0
 8007eb8:	f04f 0300 	mov.w	r3, #0
 8007ebc:	008b      	lsls	r3, r1, #2
 8007ebe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007ec2:	0082      	lsls	r2, r0, #2
 8007ec4:	4640      	mov	r0, r8
 8007ec6:	4649      	mov	r1, r9
 8007ec8:	f7f8 fed0 	bl	8000c6c <__aeabi_uldivmod>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4b49      	ldr	r3, [pc, #292]	; (8007ff8 <UART_SetConfig+0x38c>)
 8007ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ed6:	095b      	lsrs	r3, r3, #5
 8007ed8:	011e      	lsls	r6, r3, #4
 8007eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007edc:	4618      	mov	r0, r3
 8007ede:	f04f 0100 	mov.w	r1, #0
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	1894      	adds	r4, r2, r2
 8007ee8:	60bc      	str	r4, [r7, #8]
 8007eea:	415b      	adcs	r3, r3
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ef2:	1812      	adds	r2, r2, r0
 8007ef4:	eb41 0303 	adc.w	r3, r1, r3
 8007ef8:	f04f 0400 	mov.w	r4, #0
 8007efc:	f04f 0500 	mov.w	r5, #0
 8007f00:	00dd      	lsls	r5, r3, #3
 8007f02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f06:	00d4      	lsls	r4, r2, #3
 8007f08:	4622      	mov	r2, r4
 8007f0a:	462b      	mov	r3, r5
 8007f0c:	1814      	adds	r4, r2, r0
 8007f0e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007f10:	414b      	adcs	r3, r1
 8007f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f04f 0100 	mov.w	r1, #0
 8007f1e:	f04f 0200 	mov.w	r2, #0
 8007f22:	f04f 0300 	mov.w	r3, #0
 8007f26:	008b      	lsls	r3, r1, #2
 8007f28:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f2c:	0082      	lsls	r2, r0, #2
 8007f2e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007f32:	f7f8 fe9b 	bl	8000c6c <__aeabi_uldivmod>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4b2f      	ldr	r3, [pc, #188]	; (8007ff8 <UART_SetConfig+0x38c>)
 8007f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f40:	095b      	lsrs	r3, r3, #5
 8007f42:	2164      	movs	r1, #100	; 0x64
 8007f44:	fb01 f303 	mul.w	r3, r1, r3
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	011b      	lsls	r3, r3, #4
 8007f4c:	3332      	adds	r3, #50	; 0x32
 8007f4e:	4a2a      	ldr	r2, [pc, #168]	; (8007ff8 <UART_SetConfig+0x38c>)
 8007f50:	fba2 2303 	umull	r2, r3, r2, r3
 8007f54:	095b      	lsrs	r3, r3, #5
 8007f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f5a:	441e      	add	r6, r3
 8007f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f04f 0100 	mov.w	r1, #0
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	1894      	adds	r4, r2, r2
 8007f6a:	603c      	str	r4, [r7, #0]
 8007f6c:	415b      	adcs	r3, r3
 8007f6e:	607b      	str	r3, [r7, #4]
 8007f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f74:	1812      	adds	r2, r2, r0
 8007f76:	eb41 0303 	adc.w	r3, r1, r3
 8007f7a:	f04f 0400 	mov.w	r4, #0
 8007f7e:	f04f 0500 	mov.w	r5, #0
 8007f82:	00dd      	lsls	r5, r3, #3
 8007f84:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f88:	00d4      	lsls	r4, r2, #3
 8007f8a:	4622      	mov	r2, r4
 8007f8c:	462b      	mov	r3, r5
 8007f8e:	eb12 0a00 	adds.w	sl, r2, r0
 8007f92:	eb43 0b01 	adc.w	fp, r3, r1
 8007f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f04f 0100 	mov.w	r1, #0
 8007fa0:	f04f 0200 	mov.w	r2, #0
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	008b      	lsls	r3, r1, #2
 8007faa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007fae:	0082      	lsls	r2, r0, #2
 8007fb0:	4650      	mov	r0, sl
 8007fb2:	4659      	mov	r1, fp
 8007fb4:	f7f8 fe5a 	bl	8000c6c <__aeabi_uldivmod>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	460b      	mov	r3, r1
 8007fbc:	4b0e      	ldr	r3, [pc, #56]	; (8007ff8 <UART_SetConfig+0x38c>)
 8007fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8007fc2:	095b      	lsrs	r3, r3, #5
 8007fc4:	2164      	movs	r1, #100	; 0x64
 8007fc6:	fb01 f303 	mul.w	r3, r1, r3
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	3332      	adds	r3, #50	; 0x32
 8007fd0:	4a09      	ldr	r2, [pc, #36]	; (8007ff8 <UART_SetConfig+0x38c>)
 8007fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd6:	095b      	lsrs	r3, r3, #5
 8007fd8:	f003 020f 	and.w	r2, r3, #15
 8007fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4432      	add	r2, r6
 8007fe2:	609a      	str	r2, [r3, #8]
}
 8007fe4:	bf00      	nop
 8007fe6:	377c      	adds	r7, #124	; 0x7c
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fee:	bf00      	nop
 8007ff0:	40011000 	.word	0x40011000
 8007ff4:	40011400 	.word	0x40011400
 8007ff8:	51eb851f 	.word	0x51eb851f

08007ffc <__errno>:
 8007ffc:	4b01      	ldr	r3, [pc, #4]	; (8008004 <__errno+0x8>)
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	20000010 	.word	0x20000010

08008008 <__libc_init_array>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	4d0d      	ldr	r5, [pc, #52]	; (8008040 <__libc_init_array+0x38>)
 800800c:	4c0d      	ldr	r4, [pc, #52]	; (8008044 <__libc_init_array+0x3c>)
 800800e:	1b64      	subs	r4, r4, r5
 8008010:	10a4      	asrs	r4, r4, #2
 8008012:	2600      	movs	r6, #0
 8008014:	42a6      	cmp	r6, r4
 8008016:	d109      	bne.n	800802c <__libc_init_array+0x24>
 8008018:	4d0b      	ldr	r5, [pc, #44]	; (8008048 <__libc_init_array+0x40>)
 800801a:	4c0c      	ldr	r4, [pc, #48]	; (800804c <__libc_init_array+0x44>)
 800801c:	f001 fc86 	bl	800992c <_init>
 8008020:	1b64      	subs	r4, r4, r5
 8008022:	10a4      	asrs	r4, r4, #2
 8008024:	2600      	movs	r6, #0
 8008026:	42a6      	cmp	r6, r4
 8008028:	d105      	bne.n	8008036 <__libc_init_array+0x2e>
 800802a:	bd70      	pop	{r4, r5, r6, pc}
 800802c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008030:	4798      	blx	r3
 8008032:	3601      	adds	r6, #1
 8008034:	e7ee      	b.n	8008014 <__libc_init_array+0xc>
 8008036:	f855 3b04 	ldr.w	r3, [r5], #4
 800803a:	4798      	blx	r3
 800803c:	3601      	adds	r6, #1
 800803e:	e7f2      	b.n	8008026 <__libc_init_array+0x1e>
 8008040:	08009e98 	.word	0x08009e98
 8008044:	08009e98 	.word	0x08009e98
 8008048:	08009e98 	.word	0x08009e98
 800804c:	08009e9c 	.word	0x08009e9c

08008050 <memset>:
 8008050:	4402      	add	r2, r0
 8008052:	4603      	mov	r3, r0
 8008054:	4293      	cmp	r3, r2
 8008056:	d100      	bne.n	800805a <memset+0xa>
 8008058:	4770      	bx	lr
 800805a:	f803 1b01 	strb.w	r1, [r3], #1
 800805e:	e7f9      	b.n	8008054 <memset+0x4>

08008060 <siprintf>:
 8008060:	b40e      	push	{r1, r2, r3}
 8008062:	b500      	push	{lr}
 8008064:	b09c      	sub	sp, #112	; 0x70
 8008066:	ab1d      	add	r3, sp, #116	; 0x74
 8008068:	9002      	str	r0, [sp, #8]
 800806a:	9006      	str	r0, [sp, #24]
 800806c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008070:	4809      	ldr	r0, [pc, #36]	; (8008098 <siprintf+0x38>)
 8008072:	9107      	str	r1, [sp, #28]
 8008074:	9104      	str	r1, [sp, #16]
 8008076:	4909      	ldr	r1, [pc, #36]	; (800809c <siprintf+0x3c>)
 8008078:	f853 2b04 	ldr.w	r2, [r3], #4
 800807c:	9105      	str	r1, [sp, #20]
 800807e:	6800      	ldr	r0, [r0, #0]
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	a902      	add	r1, sp, #8
 8008084:	f000 f868 	bl	8008158 <_svfiprintf_r>
 8008088:	9b02      	ldr	r3, [sp, #8]
 800808a:	2200      	movs	r2, #0
 800808c:	701a      	strb	r2, [r3, #0]
 800808e:	b01c      	add	sp, #112	; 0x70
 8008090:	f85d eb04 	ldr.w	lr, [sp], #4
 8008094:	b003      	add	sp, #12
 8008096:	4770      	bx	lr
 8008098:	20000010 	.word	0x20000010
 800809c:	ffff0208 	.word	0xffff0208

080080a0 <__ssputs_r>:
 80080a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a4:	688e      	ldr	r6, [r1, #8]
 80080a6:	429e      	cmp	r6, r3
 80080a8:	4682      	mov	sl, r0
 80080aa:	460c      	mov	r4, r1
 80080ac:	4690      	mov	r8, r2
 80080ae:	461f      	mov	r7, r3
 80080b0:	d838      	bhi.n	8008124 <__ssputs_r+0x84>
 80080b2:	898a      	ldrh	r2, [r1, #12]
 80080b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080b8:	d032      	beq.n	8008120 <__ssputs_r+0x80>
 80080ba:	6825      	ldr	r5, [r4, #0]
 80080bc:	6909      	ldr	r1, [r1, #16]
 80080be:	eba5 0901 	sub.w	r9, r5, r1
 80080c2:	6965      	ldr	r5, [r4, #20]
 80080c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080cc:	3301      	adds	r3, #1
 80080ce:	444b      	add	r3, r9
 80080d0:	106d      	asrs	r5, r5, #1
 80080d2:	429d      	cmp	r5, r3
 80080d4:	bf38      	it	cc
 80080d6:	461d      	movcc	r5, r3
 80080d8:	0553      	lsls	r3, r2, #21
 80080da:	d531      	bpl.n	8008140 <__ssputs_r+0xa0>
 80080dc:	4629      	mov	r1, r5
 80080de:	f000 fb47 	bl	8008770 <_malloc_r>
 80080e2:	4606      	mov	r6, r0
 80080e4:	b950      	cbnz	r0, 80080fc <__ssputs_r+0x5c>
 80080e6:	230c      	movs	r3, #12
 80080e8:	f8ca 3000 	str.w	r3, [sl]
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f2:	81a3      	strh	r3, [r4, #12]
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fc:	6921      	ldr	r1, [r4, #16]
 80080fe:	464a      	mov	r2, r9
 8008100:	f000 fabe 	bl	8008680 <memcpy>
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800810a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800810e:	81a3      	strh	r3, [r4, #12]
 8008110:	6126      	str	r6, [r4, #16]
 8008112:	6165      	str	r5, [r4, #20]
 8008114:	444e      	add	r6, r9
 8008116:	eba5 0509 	sub.w	r5, r5, r9
 800811a:	6026      	str	r6, [r4, #0]
 800811c:	60a5      	str	r5, [r4, #8]
 800811e:	463e      	mov	r6, r7
 8008120:	42be      	cmp	r6, r7
 8008122:	d900      	bls.n	8008126 <__ssputs_r+0x86>
 8008124:	463e      	mov	r6, r7
 8008126:	4632      	mov	r2, r6
 8008128:	6820      	ldr	r0, [r4, #0]
 800812a:	4641      	mov	r1, r8
 800812c:	f000 fab6 	bl	800869c <memmove>
 8008130:	68a3      	ldr	r3, [r4, #8]
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	1b9b      	subs	r3, r3, r6
 8008136:	4432      	add	r2, r6
 8008138:	60a3      	str	r3, [r4, #8]
 800813a:	6022      	str	r2, [r4, #0]
 800813c:	2000      	movs	r0, #0
 800813e:	e7db      	b.n	80080f8 <__ssputs_r+0x58>
 8008140:	462a      	mov	r2, r5
 8008142:	f000 fb6f 	bl	8008824 <_realloc_r>
 8008146:	4606      	mov	r6, r0
 8008148:	2800      	cmp	r0, #0
 800814a:	d1e1      	bne.n	8008110 <__ssputs_r+0x70>
 800814c:	6921      	ldr	r1, [r4, #16]
 800814e:	4650      	mov	r0, sl
 8008150:	f000 fabe 	bl	80086d0 <_free_r>
 8008154:	e7c7      	b.n	80080e6 <__ssputs_r+0x46>
	...

08008158 <_svfiprintf_r>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	4698      	mov	r8, r3
 800815e:	898b      	ldrh	r3, [r1, #12]
 8008160:	061b      	lsls	r3, r3, #24
 8008162:	b09d      	sub	sp, #116	; 0x74
 8008164:	4607      	mov	r7, r0
 8008166:	460d      	mov	r5, r1
 8008168:	4614      	mov	r4, r2
 800816a:	d50e      	bpl.n	800818a <_svfiprintf_r+0x32>
 800816c:	690b      	ldr	r3, [r1, #16]
 800816e:	b963      	cbnz	r3, 800818a <_svfiprintf_r+0x32>
 8008170:	2140      	movs	r1, #64	; 0x40
 8008172:	f000 fafd 	bl	8008770 <_malloc_r>
 8008176:	6028      	str	r0, [r5, #0]
 8008178:	6128      	str	r0, [r5, #16]
 800817a:	b920      	cbnz	r0, 8008186 <_svfiprintf_r+0x2e>
 800817c:	230c      	movs	r3, #12
 800817e:	603b      	str	r3, [r7, #0]
 8008180:	f04f 30ff 	mov.w	r0, #4294967295
 8008184:	e0d1      	b.n	800832a <_svfiprintf_r+0x1d2>
 8008186:	2340      	movs	r3, #64	; 0x40
 8008188:	616b      	str	r3, [r5, #20]
 800818a:	2300      	movs	r3, #0
 800818c:	9309      	str	r3, [sp, #36]	; 0x24
 800818e:	2320      	movs	r3, #32
 8008190:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008194:	f8cd 800c 	str.w	r8, [sp, #12]
 8008198:	2330      	movs	r3, #48	; 0x30
 800819a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008344 <_svfiprintf_r+0x1ec>
 800819e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081a2:	f04f 0901 	mov.w	r9, #1
 80081a6:	4623      	mov	r3, r4
 80081a8:	469a      	mov	sl, r3
 80081aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ae:	b10a      	cbz	r2, 80081b4 <_svfiprintf_r+0x5c>
 80081b0:	2a25      	cmp	r2, #37	; 0x25
 80081b2:	d1f9      	bne.n	80081a8 <_svfiprintf_r+0x50>
 80081b4:	ebba 0b04 	subs.w	fp, sl, r4
 80081b8:	d00b      	beq.n	80081d2 <_svfiprintf_r+0x7a>
 80081ba:	465b      	mov	r3, fp
 80081bc:	4622      	mov	r2, r4
 80081be:	4629      	mov	r1, r5
 80081c0:	4638      	mov	r0, r7
 80081c2:	f7ff ff6d 	bl	80080a0 <__ssputs_r>
 80081c6:	3001      	adds	r0, #1
 80081c8:	f000 80aa 	beq.w	8008320 <_svfiprintf_r+0x1c8>
 80081cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081ce:	445a      	add	r2, fp
 80081d0:	9209      	str	r2, [sp, #36]	; 0x24
 80081d2:	f89a 3000 	ldrb.w	r3, [sl]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f000 80a2 	beq.w	8008320 <_svfiprintf_r+0x1c8>
 80081dc:	2300      	movs	r3, #0
 80081de:	f04f 32ff 	mov.w	r2, #4294967295
 80081e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081e6:	f10a 0a01 	add.w	sl, sl, #1
 80081ea:	9304      	str	r3, [sp, #16]
 80081ec:	9307      	str	r3, [sp, #28]
 80081ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081f2:	931a      	str	r3, [sp, #104]	; 0x68
 80081f4:	4654      	mov	r4, sl
 80081f6:	2205      	movs	r2, #5
 80081f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081fc:	4851      	ldr	r0, [pc, #324]	; (8008344 <_svfiprintf_r+0x1ec>)
 80081fe:	f7f7 fff7 	bl	80001f0 <memchr>
 8008202:	9a04      	ldr	r2, [sp, #16]
 8008204:	b9d8      	cbnz	r0, 800823e <_svfiprintf_r+0xe6>
 8008206:	06d0      	lsls	r0, r2, #27
 8008208:	bf44      	itt	mi
 800820a:	2320      	movmi	r3, #32
 800820c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008210:	0711      	lsls	r1, r2, #28
 8008212:	bf44      	itt	mi
 8008214:	232b      	movmi	r3, #43	; 0x2b
 8008216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800821a:	f89a 3000 	ldrb.w	r3, [sl]
 800821e:	2b2a      	cmp	r3, #42	; 0x2a
 8008220:	d015      	beq.n	800824e <_svfiprintf_r+0xf6>
 8008222:	9a07      	ldr	r2, [sp, #28]
 8008224:	4654      	mov	r4, sl
 8008226:	2000      	movs	r0, #0
 8008228:	f04f 0c0a 	mov.w	ip, #10
 800822c:	4621      	mov	r1, r4
 800822e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008232:	3b30      	subs	r3, #48	; 0x30
 8008234:	2b09      	cmp	r3, #9
 8008236:	d94e      	bls.n	80082d6 <_svfiprintf_r+0x17e>
 8008238:	b1b0      	cbz	r0, 8008268 <_svfiprintf_r+0x110>
 800823a:	9207      	str	r2, [sp, #28]
 800823c:	e014      	b.n	8008268 <_svfiprintf_r+0x110>
 800823e:	eba0 0308 	sub.w	r3, r0, r8
 8008242:	fa09 f303 	lsl.w	r3, r9, r3
 8008246:	4313      	orrs	r3, r2
 8008248:	9304      	str	r3, [sp, #16]
 800824a:	46a2      	mov	sl, r4
 800824c:	e7d2      	b.n	80081f4 <_svfiprintf_r+0x9c>
 800824e:	9b03      	ldr	r3, [sp, #12]
 8008250:	1d19      	adds	r1, r3, #4
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	9103      	str	r1, [sp, #12]
 8008256:	2b00      	cmp	r3, #0
 8008258:	bfbb      	ittet	lt
 800825a:	425b      	neglt	r3, r3
 800825c:	f042 0202 	orrlt.w	r2, r2, #2
 8008260:	9307      	strge	r3, [sp, #28]
 8008262:	9307      	strlt	r3, [sp, #28]
 8008264:	bfb8      	it	lt
 8008266:	9204      	strlt	r2, [sp, #16]
 8008268:	7823      	ldrb	r3, [r4, #0]
 800826a:	2b2e      	cmp	r3, #46	; 0x2e
 800826c:	d10c      	bne.n	8008288 <_svfiprintf_r+0x130>
 800826e:	7863      	ldrb	r3, [r4, #1]
 8008270:	2b2a      	cmp	r3, #42	; 0x2a
 8008272:	d135      	bne.n	80082e0 <_svfiprintf_r+0x188>
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	1d1a      	adds	r2, r3, #4
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	9203      	str	r2, [sp, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	bfb8      	it	lt
 8008280:	f04f 33ff 	movlt.w	r3, #4294967295
 8008284:	3402      	adds	r4, #2
 8008286:	9305      	str	r3, [sp, #20]
 8008288:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008354 <_svfiprintf_r+0x1fc>
 800828c:	7821      	ldrb	r1, [r4, #0]
 800828e:	2203      	movs	r2, #3
 8008290:	4650      	mov	r0, sl
 8008292:	f7f7 ffad 	bl	80001f0 <memchr>
 8008296:	b140      	cbz	r0, 80082aa <_svfiprintf_r+0x152>
 8008298:	2340      	movs	r3, #64	; 0x40
 800829a:	eba0 000a 	sub.w	r0, r0, sl
 800829e:	fa03 f000 	lsl.w	r0, r3, r0
 80082a2:	9b04      	ldr	r3, [sp, #16]
 80082a4:	4303      	orrs	r3, r0
 80082a6:	3401      	adds	r4, #1
 80082a8:	9304      	str	r3, [sp, #16]
 80082aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ae:	4826      	ldr	r0, [pc, #152]	; (8008348 <_svfiprintf_r+0x1f0>)
 80082b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082b4:	2206      	movs	r2, #6
 80082b6:	f7f7 ff9b 	bl	80001f0 <memchr>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d038      	beq.n	8008330 <_svfiprintf_r+0x1d8>
 80082be:	4b23      	ldr	r3, [pc, #140]	; (800834c <_svfiprintf_r+0x1f4>)
 80082c0:	bb1b      	cbnz	r3, 800830a <_svfiprintf_r+0x1b2>
 80082c2:	9b03      	ldr	r3, [sp, #12]
 80082c4:	3307      	adds	r3, #7
 80082c6:	f023 0307 	bic.w	r3, r3, #7
 80082ca:	3308      	adds	r3, #8
 80082cc:	9303      	str	r3, [sp, #12]
 80082ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d0:	4433      	add	r3, r6
 80082d2:	9309      	str	r3, [sp, #36]	; 0x24
 80082d4:	e767      	b.n	80081a6 <_svfiprintf_r+0x4e>
 80082d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80082da:	460c      	mov	r4, r1
 80082dc:	2001      	movs	r0, #1
 80082de:	e7a5      	b.n	800822c <_svfiprintf_r+0xd4>
 80082e0:	2300      	movs	r3, #0
 80082e2:	3401      	adds	r4, #1
 80082e4:	9305      	str	r3, [sp, #20]
 80082e6:	4619      	mov	r1, r3
 80082e8:	f04f 0c0a 	mov.w	ip, #10
 80082ec:	4620      	mov	r0, r4
 80082ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082f2:	3a30      	subs	r2, #48	; 0x30
 80082f4:	2a09      	cmp	r2, #9
 80082f6:	d903      	bls.n	8008300 <_svfiprintf_r+0x1a8>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d0c5      	beq.n	8008288 <_svfiprintf_r+0x130>
 80082fc:	9105      	str	r1, [sp, #20]
 80082fe:	e7c3      	b.n	8008288 <_svfiprintf_r+0x130>
 8008300:	fb0c 2101 	mla	r1, ip, r1, r2
 8008304:	4604      	mov	r4, r0
 8008306:	2301      	movs	r3, #1
 8008308:	e7f0      	b.n	80082ec <_svfiprintf_r+0x194>
 800830a:	ab03      	add	r3, sp, #12
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	462a      	mov	r2, r5
 8008310:	4b0f      	ldr	r3, [pc, #60]	; (8008350 <_svfiprintf_r+0x1f8>)
 8008312:	a904      	add	r1, sp, #16
 8008314:	4638      	mov	r0, r7
 8008316:	f3af 8000 	nop.w
 800831a:	1c42      	adds	r2, r0, #1
 800831c:	4606      	mov	r6, r0
 800831e:	d1d6      	bne.n	80082ce <_svfiprintf_r+0x176>
 8008320:	89ab      	ldrh	r3, [r5, #12]
 8008322:	065b      	lsls	r3, r3, #25
 8008324:	f53f af2c 	bmi.w	8008180 <_svfiprintf_r+0x28>
 8008328:	9809      	ldr	r0, [sp, #36]	; 0x24
 800832a:	b01d      	add	sp, #116	; 0x74
 800832c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008330:	ab03      	add	r3, sp, #12
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	462a      	mov	r2, r5
 8008336:	4b06      	ldr	r3, [pc, #24]	; (8008350 <_svfiprintf_r+0x1f8>)
 8008338:	a904      	add	r1, sp, #16
 800833a:	4638      	mov	r0, r7
 800833c:	f000 f87a 	bl	8008434 <_printf_i>
 8008340:	e7eb      	b.n	800831a <_svfiprintf_r+0x1c2>
 8008342:	bf00      	nop
 8008344:	08009c80 	.word	0x08009c80
 8008348:	08009c8a 	.word	0x08009c8a
 800834c:	00000000 	.word	0x00000000
 8008350:	080080a1 	.word	0x080080a1
 8008354:	08009c86 	.word	0x08009c86

08008358 <_printf_common>:
 8008358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800835c:	4616      	mov	r6, r2
 800835e:	4699      	mov	r9, r3
 8008360:	688a      	ldr	r2, [r1, #8]
 8008362:	690b      	ldr	r3, [r1, #16]
 8008364:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008368:	4293      	cmp	r3, r2
 800836a:	bfb8      	it	lt
 800836c:	4613      	movlt	r3, r2
 800836e:	6033      	str	r3, [r6, #0]
 8008370:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008374:	4607      	mov	r7, r0
 8008376:	460c      	mov	r4, r1
 8008378:	b10a      	cbz	r2, 800837e <_printf_common+0x26>
 800837a:	3301      	adds	r3, #1
 800837c:	6033      	str	r3, [r6, #0]
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	0699      	lsls	r1, r3, #26
 8008382:	bf42      	ittt	mi
 8008384:	6833      	ldrmi	r3, [r6, #0]
 8008386:	3302      	addmi	r3, #2
 8008388:	6033      	strmi	r3, [r6, #0]
 800838a:	6825      	ldr	r5, [r4, #0]
 800838c:	f015 0506 	ands.w	r5, r5, #6
 8008390:	d106      	bne.n	80083a0 <_printf_common+0x48>
 8008392:	f104 0a19 	add.w	sl, r4, #25
 8008396:	68e3      	ldr	r3, [r4, #12]
 8008398:	6832      	ldr	r2, [r6, #0]
 800839a:	1a9b      	subs	r3, r3, r2
 800839c:	42ab      	cmp	r3, r5
 800839e:	dc26      	bgt.n	80083ee <_printf_common+0x96>
 80083a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083a4:	1e13      	subs	r3, r2, #0
 80083a6:	6822      	ldr	r2, [r4, #0]
 80083a8:	bf18      	it	ne
 80083aa:	2301      	movne	r3, #1
 80083ac:	0692      	lsls	r2, r2, #26
 80083ae:	d42b      	bmi.n	8008408 <_printf_common+0xb0>
 80083b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083b4:	4649      	mov	r1, r9
 80083b6:	4638      	mov	r0, r7
 80083b8:	47c0      	blx	r8
 80083ba:	3001      	adds	r0, #1
 80083bc:	d01e      	beq.n	80083fc <_printf_common+0xa4>
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	68e5      	ldr	r5, [r4, #12]
 80083c2:	6832      	ldr	r2, [r6, #0]
 80083c4:	f003 0306 	and.w	r3, r3, #6
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	bf08      	it	eq
 80083cc:	1aad      	subeq	r5, r5, r2
 80083ce:	68a3      	ldr	r3, [r4, #8]
 80083d0:	6922      	ldr	r2, [r4, #16]
 80083d2:	bf0c      	ite	eq
 80083d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083d8:	2500      	movne	r5, #0
 80083da:	4293      	cmp	r3, r2
 80083dc:	bfc4      	itt	gt
 80083de:	1a9b      	subgt	r3, r3, r2
 80083e0:	18ed      	addgt	r5, r5, r3
 80083e2:	2600      	movs	r6, #0
 80083e4:	341a      	adds	r4, #26
 80083e6:	42b5      	cmp	r5, r6
 80083e8:	d11a      	bne.n	8008420 <_printf_common+0xc8>
 80083ea:	2000      	movs	r0, #0
 80083ec:	e008      	b.n	8008400 <_printf_common+0xa8>
 80083ee:	2301      	movs	r3, #1
 80083f0:	4652      	mov	r2, sl
 80083f2:	4649      	mov	r1, r9
 80083f4:	4638      	mov	r0, r7
 80083f6:	47c0      	blx	r8
 80083f8:	3001      	adds	r0, #1
 80083fa:	d103      	bne.n	8008404 <_printf_common+0xac>
 80083fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008404:	3501      	adds	r5, #1
 8008406:	e7c6      	b.n	8008396 <_printf_common+0x3e>
 8008408:	18e1      	adds	r1, r4, r3
 800840a:	1c5a      	adds	r2, r3, #1
 800840c:	2030      	movs	r0, #48	; 0x30
 800840e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008412:	4422      	add	r2, r4
 8008414:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008418:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800841c:	3302      	adds	r3, #2
 800841e:	e7c7      	b.n	80083b0 <_printf_common+0x58>
 8008420:	2301      	movs	r3, #1
 8008422:	4622      	mov	r2, r4
 8008424:	4649      	mov	r1, r9
 8008426:	4638      	mov	r0, r7
 8008428:	47c0      	blx	r8
 800842a:	3001      	adds	r0, #1
 800842c:	d0e6      	beq.n	80083fc <_printf_common+0xa4>
 800842e:	3601      	adds	r6, #1
 8008430:	e7d9      	b.n	80083e6 <_printf_common+0x8e>
	...

08008434 <_printf_i>:
 8008434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008438:	460c      	mov	r4, r1
 800843a:	4691      	mov	r9, r2
 800843c:	7e27      	ldrb	r7, [r4, #24]
 800843e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008440:	2f78      	cmp	r7, #120	; 0x78
 8008442:	4680      	mov	r8, r0
 8008444:	469a      	mov	sl, r3
 8008446:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800844a:	d807      	bhi.n	800845c <_printf_i+0x28>
 800844c:	2f62      	cmp	r7, #98	; 0x62
 800844e:	d80a      	bhi.n	8008466 <_printf_i+0x32>
 8008450:	2f00      	cmp	r7, #0
 8008452:	f000 80d8 	beq.w	8008606 <_printf_i+0x1d2>
 8008456:	2f58      	cmp	r7, #88	; 0x58
 8008458:	f000 80a3 	beq.w	80085a2 <_printf_i+0x16e>
 800845c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008460:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008464:	e03a      	b.n	80084dc <_printf_i+0xa8>
 8008466:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800846a:	2b15      	cmp	r3, #21
 800846c:	d8f6      	bhi.n	800845c <_printf_i+0x28>
 800846e:	a001      	add	r0, pc, #4	; (adr r0, 8008474 <_printf_i+0x40>)
 8008470:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008474:	080084cd 	.word	0x080084cd
 8008478:	080084e1 	.word	0x080084e1
 800847c:	0800845d 	.word	0x0800845d
 8008480:	0800845d 	.word	0x0800845d
 8008484:	0800845d 	.word	0x0800845d
 8008488:	0800845d 	.word	0x0800845d
 800848c:	080084e1 	.word	0x080084e1
 8008490:	0800845d 	.word	0x0800845d
 8008494:	0800845d 	.word	0x0800845d
 8008498:	0800845d 	.word	0x0800845d
 800849c:	0800845d 	.word	0x0800845d
 80084a0:	080085ed 	.word	0x080085ed
 80084a4:	08008511 	.word	0x08008511
 80084a8:	080085cf 	.word	0x080085cf
 80084ac:	0800845d 	.word	0x0800845d
 80084b0:	0800845d 	.word	0x0800845d
 80084b4:	0800860f 	.word	0x0800860f
 80084b8:	0800845d 	.word	0x0800845d
 80084bc:	08008511 	.word	0x08008511
 80084c0:	0800845d 	.word	0x0800845d
 80084c4:	0800845d 	.word	0x0800845d
 80084c8:	080085d7 	.word	0x080085d7
 80084cc:	680b      	ldr	r3, [r1, #0]
 80084ce:	1d1a      	adds	r2, r3, #4
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	600a      	str	r2, [r1, #0]
 80084d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084dc:	2301      	movs	r3, #1
 80084de:	e0a3      	b.n	8008628 <_printf_i+0x1f4>
 80084e0:	6825      	ldr	r5, [r4, #0]
 80084e2:	6808      	ldr	r0, [r1, #0]
 80084e4:	062e      	lsls	r6, r5, #24
 80084e6:	f100 0304 	add.w	r3, r0, #4
 80084ea:	d50a      	bpl.n	8008502 <_printf_i+0xce>
 80084ec:	6805      	ldr	r5, [r0, #0]
 80084ee:	600b      	str	r3, [r1, #0]
 80084f0:	2d00      	cmp	r5, #0
 80084f2:	da03      	bge.n	80084fc <_printf_i+0xc8>
 80084f4:	232d      	movs	r3, #45	; 0x2d
 80084f6:	426d      	negs	r5, r5
 80084f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084fc:	485e      	ldr	r0, [pc, #376]	; (8008678 <_printf_i+0x244>)
 80084fe:	230a      	movs	r3, #10
 8008500:	e019      	b.n	8008536 <_printf_i+0x102>
 8008502:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008506:	6805      	ldr	r5, [r0, #0]
 8008508:	600b      	str	r3, [r1, #0]
 800850a:	bf18      	it	ne
 800850c:	b22d      	sxthne	r5, r5
 800850e:	e7ef      	b.n	80084f0 <_printf_i+0xbc>
 8008510:	680b      	ldr	r3, [r1, #0]
 8008512:	6825      	ldr	r5, [r4, #0]
 8008514:	1d18      	adds	r0, r3, #4
 8008516:	6008      	str	r0, [r1, #0]
 8008518:	0628      	lsls	r0, r5, #24
 800851a:	d501      	bpl.n	8008520 <_printf_i+0xec>
 800851c:	681d      	ldr	r5, [r3, #0]
 800851e:	e002      	b.n	8008526 <_printf_i+0xf2>
 8008520:	0669      	lsls	r1, r5, #25
 8008522:	d5fb      	bpl.n	800851c <_printf_i+0xe8>
 8008524:	881d      	ldrh	r5, [r3, #0]
 8008526:	4854      	ldr	r0, [pc, #336]	; (8008678 <_printf_i+0x244>)
 8008528:	2f6f      	cmp	r7, #111	; 0x6f
 800852a:	bf0c      	ite	eq
 800852c:	2308      	moveq	r3, #8
 800852e:	230a      	movne	r3, #10
 8008530:	2100      	movs	r1, #0
 8008532:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008536:	6866      	ldr	r6, [r4, #4]
 8008538:	60a6      	str	r6, [r4, #8]
 800853a:	2e00      	cmp	r6, #0
 800853c:	bfa2      	ittt	ge
 800853e:	6821      	ldrge	r1, [r4, #0]
 8008540:	f021 0104 	bicge.w	r1, r1, #4
 8008544:	6021      	strge	r1, [r4, #0]
 8008546:	b90d      	cbnz	r5, 800854c <_printf_i+0x118>
 8008548:	2e00      	cmp	r6, #0
 800854a:	d04d      	beq.n	80085e8 <_printf_i+0x1b4>
 800854c:	4616      	mov	r6, r2
 800854e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008552:	fb03 5711 	mls	r7, r3, r1, r5
 8008556:	5dc7      	ldrb	r7, [r0, r7]
 8008558:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800855c:	462f      	mov	r7, r5
 800855e:	42bb      	cmp	r3, r7
 8008560:	460d      	mov	r5, r1
 8008562:	d9f4      	bls.n	800854e <_printf_i+0x11a>
 8008564:	2b08      	cmp	r3, #8
 8008566:	d10b      	bne.n	8008580 <_printf_i+0x14c>
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	07df      	lsls	r7, r3, #31
 800856c:	d508      	bpl.n	8008580 <_printf_i+0x14c>
 800856e:	6923      	ldr	r3, [r4, #16]
 8008570:	6861      	ldr	r1, [r4, #4]
 8008572:	4299      	cmp	r1, r3
 8008574:	bfde      	ittt	le
 8008576:	2330      	movle	r3, #48	; 0x30
 8008578:	f806 3c01 	strble.w	r3, [r6, #-1]
 800857c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008580:	1b92      	subs	r2, r2, r6
 8008582:	6122      	str	r2, [r4, #16]
 8008584:	f8cd a000 	str.w	sl, [sp]
 8008588:	464b      	mov	r3, r9
 800858a:	aa03      	add	r2, sp, #12
 800858c:	4621      	mov	r1, r4
 800858e:	4640      	mov	r0, r8
 8008590:	f7ff fee2 	bl	8008358 <_printf_common>
 8008594:	3001      	adds	r0, #1
 8008596:	d14c      	bne.n	8008632 <_printf_i+0x1fe>
 8008598:	f04f 30ff 	mov.w	r0, #4294967295
 800859c:	b004      	add	sp, #16
 800859e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a2:	4835      	ldr	r0, [pc, #212]	; (8008678 <_printf_i+0x244>)
 80085a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	680e      	ldr	r6, [r1, #0]
 80085ac:	061f      	lsls	r7, r3, #24
 80085ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80085b2:	600e      	str	r6, [r1, #0]
 80085b4:	d514      	bpl.n	80085e0 <_printf_i+0x1ac>
 80085b6:	07d9      	lsls	r1, r3, #31
 80085b8:	bf44      	itt	mi
 80085ba:	f043 0320 	orrmi.w	r3, r3, #32
 80085be:	6023      	strmi	r3, [r4, #0]
 80085c0:	b91d      	cbnz	r5, 80085ca <_printf_i+0x196>
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	f023 0320 	bic.w	r3, r3, #32
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	2310      	movs	r3, #16
 80085cc:	e7b0      	b.n	8008530 <_printf_i+0xfc>
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	f043 0320 	orr.w	r3, r3, #32
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	2378      	movs	r3, #120	; 0x78
 80085d8:	4828      	ldr	r0, [pc, #160]	; (800867c <_printf_i+0x248>)
 80085da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085de:	e7e3      	b.n	80085a8 <_printf_i+0x174>
 80085e0:	065e      	lsls	r6, r3, #25
 80085e2:	bf48      	it	mi
 80085e4:	b2ad      	uxthmi	r5, r5
 80085e6:	e7e6      	b.n	80085b6 <_printf_i+0x182>
 80085e8:	4616      	mov	r6, r2
 80085ea:	e7bb      	b.n	8008564 <_printf_i+0x130>
 80085ec:	680b      	ldr	r3, [r1, #0]
 80085ee:	6826      	ldr	r6, [r4, #0]
 80085f0:	6960      	ldr	r0, [r4, #20]
 80085f2:	1d1d      	adds	r5, r3, #4
 80085f4:	600d      	str	r5, [r1, #0]
 80085f6:	0635      	lsls	r5, r6, #24
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	d501      	bpl.n	8008600 <_printf_i+0x1cc>
 80085fc:	6018      	str	r0, [r3, #0]
 80085fe:	e002      	b.n	8008606 <_printf_i+0x1d2>
 8008600:	0671      	lsls	r1, r6, #25
 8008602:	d5fb      	bpl.n	80085fc <_printf_i+0x1c8>
 8008604:	8018      	strh	r0, [r3, #0]
 8008606:	2300      	movs	r3, #0
 8008608:	6123      	str	r3, [r4, #16]
 800860a:	4616      	mov	r6, r2
 800860c:	e7ba      	b.n	8008584 <_printf_i+0x150>
 800860e:	680b      	ldr	r3, [r1, #0]
 8008610:	1d1a      	adds	r2, r3, #4
 8008612:	600a      	str	r2, [r1, #0]
 8008614:	681e      	ldr	r6, [r3, #0]
 8008616:	6862      	ldr	r2, [r4, #4]
 8008618:	2100      	movs	r1, #0
 800861a:	4630      	mov	r0, r6
 800861c:	f7f7 fde8 	bl	80001f0 <memchr>
 8008620:	b108      	cbz	r0, 8008626 <_printf_i+0x1f2>
 8008622:	1b80      	subs	r0, r0, r6
 8008624:	6060      	str	r0, [r4, #4]
 8008626:	6863      	ldr	r3, [r4, #4]
 8008628:	6123      	str	r3, [r4, #16]
 800862a:	2300      	movs	r3, #0
 800862c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008630:	e7a8      	b.n	8008584 <_printf_i+0x150>
 8008632:	6923      	ldr	r3, [r4, #16]
 8008634:	4632      	mov	r2, r6
 8008636:	4649      	mov	r1, r9
 8008638:	4640      	mov	r0, r8
 800863a:	47d0      	blx	sl
 800863c:	3001      	adds	r0, #1
 800863e:	d0ab      	beq.n	8008598 <_printf_i+0x164>
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	079b      	lsls	r3, r3, #30
 8008644:	d413      	bmi.n	800866e <_printf_i+0x23a>
 8008646:	68e0      	ldr	r0, [r4, #12]
 8008648:	9b03      	ldr	r3, [sp, #12]
 800864a:	4298      	cmp	r0, r3
 800864c:	bfb8      	it	lt
 800864e:	4618      	movlt	r0, r3
 8008650:	e7a4      	b.n	800859c <_printf_i+0x168>
 8008652:	2301      	movs	r3, #1
 8008654:	4632      	mov	r2, r6
 8008656:	4649      	mov	r1, r9
 8008658:	4640      	mov	r0, r8
 800865a:	47d0      	blx	sl
 800865c:	3001      	adds	r0, #1
 800865e:	d09b      	beq.n	8008598 <_printf_i+0x164>
 8008660:	3501      	adds	r5, #1
 8008662:	68e3      	ldr	r3, [r4, #12]
 8008664:	9903      	ldr	r1, [sp, #12]
 8008666:	1a5b      	subs	r3, r3, r1
 8008668:	42ab      	cmp	r3, r5
 800866a:	dcf2      	bgt.n	8008652 <_printf_i+0x21e>
 800866c:	e7eb      	b.n	8008646 <_printf_i+0x212>
 800866e:	2500      	movs	r5, #0
 8008670:	f104 0619 	add.w	r6, r4, #25
 8008674:	e7f5      	b.n	8008662 <_printf_i+0x22e>
 8008676:	bf00      	nop
 8008678:	08009c91 	.word	0x08009c91
 800867c:	08009ca2 	.word	0x08009ca2

08008680 <memcpy>:
 8008680:	440a      	add	r2, r1
 8008682:	4291      	cmp	r1, r2
 8008684:	f100 33ff 	add.w	r3, r0, #4294967295
 8008688:	d100      	bne.n	800868c <memcpy+0xc>
 800868a:	4770      	bx	lr
 800868c:	b510      	push	{r4, lr}
 800868e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008696:	4291      	cmp	r1, r2
 8008698:	d1f9      	bne.n	800868e <memcpy+0xe>
 800869a:	bd10      	pop	{r4, pc}

0800869c <memmove>:
 800869c:	4288      	cmp	r0, r1
 800869e:	b510      	push	{r4, lr}
 80086a0:	eb01 0402 	add.w	r4, r1, r2
 80086a4:	d902      	bls.n	80086ac <memmove+0x10>
 80086a6:	4284      	cmp	r4, r0
 80086a8:	4623      	mov	r3, r4
 80086aa:	d807      	bhi.n	80086bc <memmove+0x20>
 80086ac:	1e43      	subs	r3, r0, #1
 80086ae:	42a1      	cmp	r1, r4
 80086b0:	d008      	beq.n	80086c4 <memmove+0x28>
 80086b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086ba:	e7f8      	b.n	80086ae <memmove+0x12>
 80086bc:	4402      	add	r2, r0
 80086be:	4601      	mov	r1, r0
 80086c0:	428a      	cmp	r2, r1
 80086c2:	d100      	bne.n	80086c6 <memmove+0x2a>
 80086c4:	bd10      	pop	{r4, pc}
 80086c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086ce:	e7f7      	b.n	80086c0 <memmove+0x24>

080086d0 <_free_r>:
 80086d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086d2:	2900      	cmp	r1, #0
 80086d4:	d048      	beq.n	8008768 <_free_r+0x98>
 80086d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086da:	9001      	str	r0, [sp, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f1a1 0404 	sub.w	r4, r1, #4
 80086e2:	bfb8      	it	lt
 80086e4:	18e4      	addlt	r4, r4, r3
 80086e6:	f000 f8d3 	bl	8008890 <__malloc_lock>
 80086ea:	4a20      	ldr	r2, [pc, #128]	; (800876c <_free_r+0x9c>)
 80086ec:	9801      	ldr	r0, [sp, #4]
 80086ee:	6813      	ldr	r3, [r2, #0]
 80086f0:	4615      	mov	r5, r2
 80086f2:	b933      	cbnz	r3, 8008702 <_free_r+0x32>
 80086f4:	6063      	str	r3, [r4, #4]
 80086f6:	6014      	str	r4, [r2, #0]
 80086f8:	b003      	add	sp, #12
 80086fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086fe:	f000 b8cd 	b.w	800889c <__malloc_unlock>
 8008702:	42a3      	cmp	r3, r4
 8008704:	d90b      	bls.n	800871e <_free_r+0x4e>
 8008706:	6821      	ldr	r1, [r4, #0]
 8008708:	1862      	adds	r2, r4, r1
 800870a:	4293      	cmp	r3, r2
 800870c:	bf04      	itt	eq
 800870e:	681a      	ldreq	r2, [r3, #0]
 8008710:	685b      	ldreq	r3, [r3, #4]
 8008712:	6063      	str	r3, [r4, #4]
 8008714:	bf04      	itt	eq
 8008716:	1852      	addeq	r2, r2, r1
 8008718:	6022      	streq	r2, [r4, #0]
 800871a:	602c      	str	r4, [r5, #0]
 800871c:	e7ec      	b.n	80086f8 <_free_r+0x28>
 800871e:	461a      	mov	r2, r3
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	b10b      	cbz	r3, 8008728 <_free_r+0x58>
 8008724:	42a3      	cmp	r3, r4
 8008726:	d9fa      	bls.n	800871e <_free_r+0x4e>
 8008728:	6811      	ldr	r1, [r2, #0]
 800872a:	1855      	adds	r5, r2, r1
 800872c:	42a5      	cmp	r5, r4
 800872e:	d10b      	bne.n	8008748 <_free_r+0x78>
 8008730:	6824      	ldr	r4, [r4, #0]
 8008732:	4421      	add	r1, r4
 8008734:	1854      	adds	r4, r2, r1
 8008736:	42a3      	cmp	r3, r4
 8008738:	6011      	str	r1, [r2, #0]
 800873a:	d1dd      	bne.n	80086f8 <_free_r+0x28>
 800873c:	681c      	ldr	r4, [r3, #0]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	6053      	str	r3, [r2, #4]
 8008742:	4421      	add	r1, r4
 8008744:	6011      	str	r1, [r2, #0]
 8008746:	e7d7      	b.n	80086f8 <_free_r+0x28>
 8008748:	d902      	bls.n	8008750 <_free_r+0x80>
 800874a:	230c      	movs	r3, #12
 800874c:	6003      	str	r3, [r0, #0]
 800874e:	e7d3      	b.n	80086f8 <_free_r+0x28>
 8008750:	6825      	ldr	r5, [r4, #0]
 8008752:	1961      	adds	r1, r4, r5
 8008754:	428b      	cmp	r3, r1
 8008756:	bf04      	itt	eq
 8008758:	6819      	ldreq	r1, [r3, #0]
 800875a:	685b      	ldreq	r3, [r3, #4]
 800875c:	6063      	str	r3, [r4, #4]
 800875e:	bf04      	itt	eq
 8008760:	1949      	addeq	r1, r1, r5
 8008762:	6021      	streq	r1, [r4, #0]
 8008764:	6054      	str	r4, [r2, #4]
 8008766:	e7c7      	b.n	80086f8 <_free_r+0x28>
 8008768:	b003      	add	sp, #12
 800876a:	bd30      	pop	{r4, r5, pc}
 800876c:	200001c8 	.word	0x200001c8

08008770 <_malloc_r>:
 8008770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008772:	1ccd      	adds	r5, r1, #3
 8008774:	f025 0503 	bic.w	r5, r5, #3
 8008778:	3508      	adds	r5, #8
 800877a:	2d0c      	cmp	r5, #12
 800877c:	bf38      	it	cc
 800877e:	250c      	movcc	r5, #12
 8008780:	2d00      	cmp	r5, #0
 8008782:	4606      	mov	r6, r0
 8008784:	db01      	blt.n	800878a <_malloc_r+0x1a>
 8008786:	42a9      	cmp	r1, r5
 8008788:	d903      	bls.n	8008792 <_malloc_r+0x22>
 800878a:	230c      	movs	r3, #12
 800878c:	6033      	str	r3, [r6, #0]
 800878e:	2000      	movs	r0, #0
 8008790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008792:	f000 f87d 	bl	8008890 <__malloc_lock>
 8008796:	4921      	ldr	r1, [pc, #132]	; (800881c <_malloc_r+0xac>)
 8008798:	680a      	ldr	r2, [r1, #0]
 800879a:	4614      	mov	r4, r2
 800879c:	b99c      	cbnz	r4, 80087c6 <_malloc_r+0x56>
 800879e:	4f20      	ldr	r7, [pc, #128]	; (8008820 <_malloc_r+0xb0>)
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	b923      	cbnz	r3, 80087ae <_malloc_r+0x3e>
 80087a4:	4621      	mov	r1, r4
 80087a6:	4630      	mov	r0, r6
 80087a8:	f000 f862 	bl	8008870 <_sbrk_r>
 80087ac:	6038      	str	r0, [r7, #0]
 80087ae:	4629      	mov	r1, r5
 80087b0:	4630      	mov	r0, r6
 80087b2:	f000 f85d 	bl	8008870 <_sbrk_r>
 80087b6:	1c43      	adds	r3, r0, #1
 80087b8:	d123      	bne.n	8008802 <_malloc_r+0x92>
 80087ba:	230c      	movs	r3, #12
 80087bc:	6033      	str	r3, [r6, #0]
 80087be:	4630      	mov	r0, r6
 80087c0:	f000 f86c 	bl	800889c <__malloc_unlock>
 80087c4:	e7e3      	b.n	800878e <_malloc_r+0x1e>
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	1b5b      	subs	r3, r3, r5
 80087ca:	d417      	bmi.n	80087fc <_malloc_r+0x8c>
 80087cc:	2b0b      	cmp	r3, #11
 80087ce:	d903      	bls.n	80087d8 <_malloc_r+0x68>
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	441c      	add	r4, r3
 80087d4:	6025      	str	r5, [r4, #0]
 80087d6:	e004      	b.n	80087e2 <_malloc_r+0x72>
 80087d8:	6863      	ldr	r3, [r4, #4]
 80087da:	42a2      	cmp	r2, r4
 80087dc:	bf0c      	ite	eq
 80087de:	600b      	streq	r3, [r1, #0]
 80087e0:	6053      	strne	r3, [r2, #4]
 80087e2:	4630      	mov	r0, r6
 80087e4:	f000 f85a 	bl	800889c <__malloc_unlock>
 80087e8:	f104 000b 	add.w	r0, r4, #11
 80087ec:	1d23      	adds	r3, r4, #4
 80087ee:	f020 0007 	bic.w	r0, r0, #7
 80087f2:	1ac2      	subs	r2, r0, r3
 80087f4:	d0cc      	beq.n	8008790 <_malloc_r+0x20>
 80087f6:	1a1b      	subs	r3, r3, r0
 80087f8:	50a3      	str	r3, [r4, r2]
 80087fa:	e7c9      	b.n	8008790 <_malloc_r+0x20>
 80087fc:	4622      	mov	r2, r4
 80087fe:	6864      	ldr	r4, [r4, #4]
 8008800:	e7cc      	b.n	800879c <_malloc_r+0x2c>
 8008802:	1cc4      	adds	r4, r0, #3
 8008804:	f024 0403 	bic.w	r4, r4, #3
 8008808:	42a0      	cmp	r0, r4
 800880a:	d0e3      	beq.n	80087d4 <_malloc_r+0x64>
 800880c:	1a21      	subs	r1, r4, r0
 800880e:	4630      	mov	r0, r6
 8008810:	f000 f82e 	bl	8008870 <_sbrk_r>
 8008814:	3001      	adds	r0, #1
 8008816:	d1dd      	bne.n	80087d4 <_malloc_r+0x64>
 8008818:	e7cf      	b.n	80087ba <_malloc_r+0x4a>
 800881a:	bf00      	nop
 800881c:	200001c8 	.word	0x200001c8
 8008820:	200001cc 	.word	0x200001cc

08008824 <_realloc_r>:
 8008824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008826:	4607      	mov	r7, r0
 8008828:	4614      	mov	r4, r2
 800882a:	460e      	mov	r6, r1
 800882c:	b921      	cbnz	r1, 8008838 <_realloc_r+0x14>
 800882e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008832:	4611      	mov	r1, r2
 8008834:	f7ff bf9c 	b.w	8008770 <_malloc_r>
 8008838:	b922      	cbnz	r2, 8008844 <_realloc_r+0x20>
 800883a:	f7ff ff49 	bl	80086d0 <_free_r>
 800883e:	4625      	mov	r5, r4
 8008840:	4628      	mov	r0, r5
 8008842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008844:	f000 f830 	bl	80088a8 <_malloc_usable_size_r>
 8008848:	42a0      	cmp	r0, r4
 800884a:	d20f      	bcs.n	800886c <_realloc_r+0x48>
 800884c:	4621      	mov	r1, r4
 800884e:	4638      	mov	r0, r7
 8008850:	f7ff ff8e 	bl	8008770 <_malloc_r>
 8008854:	4605      	mov	r5, r0
 8008856:	2800      	cmp	r0, #0
 8008858:	d0f2      	beq.n	8008840 <_realloc_r+0x1c>
 800885a:	4631      	mov	r1, r6
 800885c:	4622      	mov	r2, r4
 800885e:	f7ff ff0f 	bl	8008680 <memcpy>
 8008862:	4631      	mov	r1, r6
 8008864:	4638      	mov	r0, r7
 8008866:	f7ff ff33 	bl	80086d0 <_free_r>
 800886a:	e7e9      	b.n	8008840 <_realloc_r+0x1c>
 800886c:	4635      	mov	r5, r6
 800886e:	e7e7      	b.n	8008840 <_realloc_r+0x1c>

08008870 <_sbrk_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	4d06      	ldr	r5, [pc, #24]	; (800888c <_sbrk_r+0x1c>)
 8008874:	2300      	movs	r3, #0
 8008876:	4604      	mov	r4, r0
 8008878:	4608      	mov	r0, r1
 800887a:	602b      	str	r3, [r5, #0]
 800887c:	f7fb fce8 	bl	8004250 <_sbrk>
 8008880:	1c43      	adds	r3, r0, #1
 8008882:	d102      	bne.n	800888a <_sbrk_r+0x1a>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	b103      	cbz	r3, 800888a <_sbrk_r+0x1a>
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	bd38      	pop	{r3, r4, r5, pc}
 800888c:	200003a8 	.word	0x200003a8

08008890 <__malloc_lock>:
 8008890:	4801      	ldr	r0, [pc, #4]	; (8008898 <__malloc_lock+0x8>)
 8008892:	f000 b811 	b.w	80088b8 <__retarget_lock_acquire_recursive>
 8008896:	bf00      	nop
 8008898:	200003b0 	.word	0x200003b0

0800889c <__malloc_unlock>:
 800889c:	4801      	ldr	r0, [pc, #4]	; (80088a4 <__malloc_unlock+0x8>)
 800889e:	f000 b80c 	b.w	80088ba <__retarget_lock_release_recursive>
 80088a2:	bf00      	nop
 80088a4:	200003b0 	.word	0x200003b0

080088a8 <_malloc_usable_size_r>:
 80088a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088ac:	1f18      	subs	r0, r3, #4
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	bfbc      	itt	lt
 80088b2:	580b      	ldrlt	r3, [r1, r0]
 80088b4:	18c0      	addlt	r0, r0, r3
 80088b6:	4770      	bx	lr

080088b8 <__retarget_lock_acquire_recursive>:
 80088b8:	4770      	bx	lr

080088ba <__retarget_lock_release_recursive>:
 80088ba:	4770      	bx	lr
 80088bc:	0000      	movs	r0, r0
	...

080088c0 <sin>:
 80088c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088c2:	ec53 2b10 	vmov	r2, r3, d0
 80088c6:	4826      	ldr	r0, [pc, #152]	; (8008960 <sin+0xa0>)
 80088c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80088cc:	4281      	cmp	r1, r0
 80088ce:	dc07      	bgt.n	80088e0 <sin+0x20>
 80088d0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008958 <sin+0x98>
 80088d4:	2000      	movs	r0, #0
 80088d6:	f000 fe5b 	bl	8009590 <__kernel_sin>
 80088da:	ec51 0b10 	vmov	r0, r1, d0
 80088de:	e007      	b.n	80088f0 <sin+0x30>
 80088e0:	4820      	ldr	r0, [pc, #128]	; (8008964 <sin+0xa4>)
 80088e2:	4281      	cmp	r1, r0
 80088e4:	dd09      	ble.n	80088fa <sin+0x3a>
 80088e6:	ee10 0a10 	vmov	r0, s0
 80088ea:	4619      	mov	r1, r3
 80088ec:	f7f7 fcd4 	bl	8000298 <__aeabi_dsub>
 80088f0:	ec41 0b10 	vmov	d0, r0, r1
 80088f4:	b005      	add	sp, #20
 80088f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80088fa:	4668      	mov	r0, sp
 80088fc:	f000 f834 	bl	8008968 <__ieee754_rem_pio2>
 8008900:	f000 0003 	and.w	r0, r0, #3
 8008904:	2801      	cmp	r0, #1
 8008906:	d008      	beq.n	800891a <sin+0x5a>
 8008908:	2802      	cmp	r0, #2
 800890a:	d00d      	beq.n	8008928 <sin+0x68>
 800890c:	b9d0      	cbnz	r0, 8008944 <sin+0x84>
 800890e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008912:	ed9d 0b00 	vldr	d0, [sp]
 8008916:	2001      	movs	r0, #1
 8008918:	e7dd      	b.n	80088d6 <sin+0x16>
 800891a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800891e:	ed9d 0b00 	vldr	d0, [sp]
 8008922:	f000 fa2d 	bl	8008d80 <__kernel_cos>
 8008926:	e7d8      	b.n	80088da <sin+0x1a>
 8008928:	ed9d 1b02 	vldr	d1, [sp, #8]
 800892c:	ed9d 0b00 	vldr	d0, [sp]
 8008930:	2001      	movs	r0, #1
 8008932:	f000 fe2d 	bl	8009590 <__kernel_sin>
 8008936:	ec53 2b10 	vmov	r2, r3, d0
 800893a:	ee10 0a10 	vmov	r0, s0
 800893e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008942:	e7d5      	b.n	80088f0 <sin+0x30>
 8008944:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008948:	ed9d 0b00 	vldr	d0, [sp]
 800894c:	f000 fa18 	bl	8008d80 <__kernel_cos>
 8008950:	e7f1      	b.n	8008936 <sin+0x76>
 8008952:	bf00      	nop
 8008954:	f3af 8000 	nop.w
	...
 8008960:	3fe921fb 	.word	0x3fe921fb
 8008964:	7fefffff 	.word	0x7fefffff

08008968 <__ieee754_rem_pio2>:
 8008968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	ed2d 8b02 	vpush	{d8}
 8008970:	ec55 4b10 	vmov	r4, r5, d0
 8008974:	4bca      	ldr	r3, [pc, #808]	; (8008ca0 <__ieee754_rem_pio2+0x338>)
 8008976:	b08b      	sub	sp, #44	; 0x2c
 8008978:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800897c:	4598      	cmp	r8, r3
 800897e:	4682      	mov	sl, r0
 8008980:	9502      	str	r5, [sp, #8]
 8008982:	dc08      	bgt.n	8008996 <__ieee754_rem_pio2+0x2e>
 8008984:	2200      	movs	r2, #0
 8008986:	2300      	movs	r3, #0
 8008988:	ed80 0b00 	vstr	d0, [r0]
 800898c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008990:	f04f 0b00 	mov.w	fp, #0
 8008994:	e028      	b.n	80089e8 <__ieee754_rem_pio2+0x80>
 8008996:	4bc3      	ldr	r3, [pc, #780]	; (8008ca4 <__ieee754_rem_pio2+0x33c>)
 8008998:	4598      	cmp	r8, r3
 800899a:	dc78      	bgt.n	8008a8e <__ieee754_rem_pio2+0x126>
 800899c:	9b02      	ldr	r3, [sp, #8]
 800899e:	4ec2      	ldr	r6, [pc, #776]	; (8008ca8 <__ieee754_rem_pio2+0x340>)
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	ee10 0a10 	vmov	r0, s0
 80089a6:	a3b0      	add	r3, pc, #704	; (adr r3, 8008c68 <__ieee754_rem_pio2+0x300>)
 80089a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ac:	4629      	mov	r1, r5
 80089ae:	dd39      	ble.n	8008a24 <__ieee754_rem_pio2+0xbc>
 80089b0:	f7f7 fc72 	bl	8000298 <__aeabi_dsub>
 80089b4:	45b0      	cmp	r8, r6
 80089b6:	4604      	mov	r4, r0
 80089b8:	460d      	mov	r5, r1
 80089ba:	d01b      	beq.n	80089f4 <__ieee754_rem_pio2+0x8c>
 80089bc:	a3ac      	add	r3, pc, #688	; (adr r3, 8008c70 <__ieee754_rem_pio2+0x308>)
 80089be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c2:	f7f7 fc69 	bl	8000298 <__aeabi_dsub>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	e9ca 2300 	strd	r2, r3, [sl]
 80089ce:	4620      	mov	r0, r4
 80089d0:	4629      	mov	r1, r5
 80089d2:	f7f7 fc61 	bl	8000298 <__aeabi_dsub>
 80089d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8008c70 <__ieee754_rem_pio2+0x308>)
 80089d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089dc:	f7f7 fc5c 	bl	8000298 <__aeabi_dsub>
 80089e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80089e4:	f04f 0b01 	mov.w	fp, #1
 80089e8:	4658      	mov	r0, fp
 80089ea:	b00b      	add	sp, #44	; 0x2c
 80089ec:	ecbd 8b02 	vpop	{d8}
 80089f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f4:	a3a0      	add	r3, pc, #640	; (adr r3, 8008c78 <__ieee754_rem_pio2+0x310>)
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	f7f7 fc4d 	bl	8000298 <__aeabi_dsub>
 80089fe:	a3a0      	add	r3, pc, #640	; (adr r3, 8008c80 <__ieee754_rem_pio2+0x318>)
 8008a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a04:	4604      	mov	r4, r0
 8008a06:	460d      	mov	r5, r1
 8008a08:	f7f7 fc46 	bl	8000298 <__aeabi_dsub>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	e9ca 2300 	strd	r2, r3, [sl]
 8008a14:	4620      	mov	r0, r4
 8008a16:	4629      	mov	r1, r5
 8008a18:	f7f7 fc3e 	bl	8000298 <__aeabi_dsub>
 8008a1c:	a398      	add	r3, pc, #608	; (adr r3, 8008c80 <__ieee754_rem_pio2+0x318>)
 8008a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a22:	e7db      	b.n	80089dc <__ieee754_rem_pio2+0x74>
 8008a24:	f7f7 fc3a 	bl	800029c <__adddf3>
 8008a28:	45b0      	cmp	r8, r6
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	460d      	mov	r5, r1
 8008a2e:	d016      	beq.n	8008a5e <__ieee754_rem_pio2+0xf6>
 8008a30:	a38f      	add	r3, pc, #572	; (adr r3, 8008c70 <__ieee754_rem_pio2+0x308>)
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	f7f7 fc31 	bl	800029c <__adddf3>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	e9ca 2300 	strd	r2, r3, [sl]
 8008a42:	4620      	mov	r0, r4
 8008a44:	4629      	mov	r1, r5
 8008a46:	f7f7 fc27 	bl	8000298 <__aeabi_dsub>
 8008a4a:	a389      	add	r3, pc, #548	; (adr r3, 8008c70 <__ieee754_rem_pio2+0x308>)
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	f7f7 fc24 	bl	800029c <__adddf3>
 8008a54:	f04f 3bff 	mov.w	fp, #4294967295
 8008a58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008a5c:	e7c4      	b.n	80089e8 <__ieee754_rem_pio2+0x80>
 8008a5e:	a386      	add	r3, pc, #536	; (adr r3, 8008c78 <__ieee754_rem_pio2+0x310>)
 8008a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a64:	f7f7 fc1a 	bl	800029c <__adddf3>
 8008a68:	a385      	add	r3, pc, #532	; (adr r3, 8008c80 <__ieee754_rem_pio2+0x318>)
 8008a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6e:	4604      	mov	r4, r0
 8008a70:	460d      	mov	r5, r1
 8008a72:	f7f7 fc13 	bl	800029c <__adddf3>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	e9ca 2300 	strd	r2, r3, [sl]
 8008a7e:	4620      	mov	r0, r4
 8008a80:	4629      	mov	r1, r5
 8008a82:	f7f7 fc09 	bl	8000298 <__aeabi_dsub>
 8008a86:	a37e      	add	r3, pc, #504	; (adr r3, 8008c80 <__ieee754_rem_pio2+0x318>)
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	e7e0      	b.n	8008a50 <__ieee754_rem_pio2+0xe8>
 8008a8e:	4b87      	ldr	r3, [pc, #540]	; (8008cac <__ieee754_rem_pio2+0x344>)
 8008a90:	4598      	cmp	r8, r3
 8008a92:	f300 80d9 	bgt.w	8008c48 <__ieee754_rem_pio2+0x2e0>
 8008a96:	f000 fe39 	bl	800970c <fabs>
 8008a9a:	ec55 4b10 	vmov	r4, r5, d0
 8008a9e:	ee10 0a10 	vmov	r0, s0
 8008aa2:	a379      	add	r3, pc, #484	; (adr r3, 8008c88 <__ieee754_rem_pio2+0x320>)
 8008aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	f7f7 fdad 	bl	8000608 <__aeabi_dmul>
 8008aae:	4b80      	ldr	r3, [pc, #512]	; (8008cb0 <__ieee754_rem_pio2+0x348>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f7f7 fbf3 	bl	800029c <__adddf3>
 8008ab6:	f7f8 f841 	bl	8000b3c <__aeabi_d2iz>
 8008aba:	4683      	mov	fp, r0
 8008abc:	f7f7 fd3a 	bl	8000534 <__aeabi_i2d>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	ec43 2b18 	vmov	d8, r2, r3
 8008ac8:	a367      	add	r3, pc, #412	; (adr r3, 8008c68 <__ieee754_rem_pio2+0x300>)
 8008aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ace:	f7f7 fd9b 	bl	8000608 <__aeabi_dmul>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	4629      	mov	r1, r5
 8008ada:	f7f7 fbdd 	bl	8000298 <__aeabi_dsub>
 8008ade:	a364      	add	r3, pc, #400	; (adr r3, 8008c70 <__ieee754_rem_pio2+0x308>)
 8008ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	460f      	mov	r7, r1
 8008ae8:	ec51 0b18 	vmov	r0, r1, d8
 8008aec:	f7f7 fd8c 	bl	8000608 <__aeabi_dmul>
 8008af0:	f1bb 0f1f 	cmp.w	fp, #31
 8008af4:	4604      	mov	r4, r0
 8008af6:	460d      	mov	r5, r1
 8008af8:	dc0d      	bgt.n	8008b16 <__ieee754_rem_pio2+0x1ae>
 8008afa:	4b6e      	ldr	r3, [pc, #440]	; (8008cb4 <__ieee754_rem_pio2+0x34c>)
 8008afc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b04:	4543      	cmp	r3, r8
 8008b06:	d006      	beq.n	8008b16 <__ieee754_rem_pio2+0x1ae>
 8008b08:	4622      	mov	r2, r4
 8008b0a:	462b      	mov	r3, r5
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	4639      	mov	r1, r7
 8008b10:	f7f7 fbc2 	bl	8000298 <__aeabi_dsub>
 8008b14:	e00f      	b.n	8008b36 <__ieee754_rem_pio2+0x1ce>
 8008b16:	462b      	mov	r3, r5
 8008b18:	4622      	mov	r2, r4
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	4639      	mov	r1, r7
 8008b1e:	f7f7 fbbb 	bl	8000298 <__aeabi_dsub>
 8008b22:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008b26:	9303      	str	r3, [sp, #12]
 8008b28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008b2c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008b30:	f1b8 0f10 	cmp.w	r8, #16
 8008b34:	dc02      	bgt.n	8008b3c <__ieee754_rem_pio2+0x1d4>
 8008b36:	e9ca 0100 	strd	r0, r1, [sl]
 8008b3a:	e039      	b.n	8008bb0 <__ieee754_rem_pio2+0x248>
 8008b3c:	a34e      	add	r3, pc, #312	; (adr r3, 8008c78 <__ieee754_rem_pio2+0x310>)
 8008b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b42:	ec51 0b18 	vmov	r0, r1, d8
 8008b46:	f7f7 fd5f 	bl	8000608 <__aeabi_dmul>
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	460d      	mov	r5, r1
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	4630      	mov	r0, r6
 8008b54:	4639      	mov	r1, r7
 8008b56:	f7f7 fb9f 	bl	8000298 <__aeabi_dsub>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4680      	mov	r8, r0
 8008b60:	4689      	mov	r9, r1
 8008b62:	4630      	mov	r0, r6
 8008b64:	4639      	mov	r1, r7
 8008b66:	f7f7 fb97 	bl	8000298 <__aeabi_dsub>
 8008b6a:	4622      	mov	r2, r4
 8008b6c:	462b      	mov	r3, r5
 8008b6e:	f7f7 fb93 	bl	8000298 <__aeabi_dsub>
 8008b72:	a343      	add	r3, pc, #268	; (adr r3, 8008c80 <__ieee754_rem_pio2+0x318>)
 8008b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b78:	4604      	mov	r4, r0
 8008b7a:	460d      	mov	r5, r1
 8008b7c:	ec51 0b18 	vmov	r0, r1, d8
 8008b80:	f7f7 fd42 	bl	8000608 <__aeabi_dmul>
 8008b84:	4622      	mov	r2, r4
 8008b86:	462b      	mov	r3, r5
 8008b88:	f7f7 fb86 	bl	8000298 <__aeabi_dsub>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4604      	mov	r4, r0
 8008b92:	460d      	mov	r5, r1
 8008b94:	4640      	mov	r0, r8
 8008b96:	4649      	mov	r1, r9
 8008b98:	f7f7 fb7e 	bl	8000298 <__aeabi_dsub>
 8008b9c:	9a03      	ldr	r2, [sp, #12]
 8008b9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	2b31      	cmp	r3, #49	; 0x31
 8008ba6:	dc24      	bgt.n	8008bf2 <__ieee754_rem_pio2+0x28a>
 8008ba8:	e9ca 0100 	strd	r0, r1, [sl]
 8008bac:	4646      	mov	r6, r8
 8008bae:	464f      	mov	r7, r9
 8008bb0:	e9da 8900 	ldrd	r8, r9, [sl]
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	4642      	mov	r2, r8
 8008bb8:	464b      	mov	r3, r9
 8008bba:	4639      	mov	r1, r7
 8008bbc:	f7f7 fb6c 	bl	8000298 <__aeabi_dsub>
 8008bc0:	462b      	mov	r3, r5
 8008bc2:	4622      	mov	r2, r4
 8008bc4:	f7f7 fb68 	bl	8000298 <__aeabi_dsub>
 8008bc8:	9b02      	ldr	r3, [sp, #8]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008bd0:	f6bf af0a 	bge.w	80089e8 <__ieee754_rem_pio2+0x80>
 8008bd4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008bd8:	f8ca 3004 	str.w	r3, [sl, #4]
 8008bdc:	f8ca 8000 	str.w	r8, [sl]
 8008be0:	f8ca 0008 	str.w	r0, [sl, #8]
 8008be4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008be8:	f8ca 300c 	str.w	r3, [sl, #12]
 8008bec:	f1cb 0b00 	rsb	fp, fp, #0
 8008bf0:	e6fa      	b.n	80089e8 <__ieee754_rem_pio2+0x80>
 8008bf2:	a327      	add	r3, pc, #156	; (adr r3, 8008c90 <__ieee754_rem_pio2+0x328>)
 8008bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf8:	ec51 0b18 	vmov	r0, r1, d8
 8008bfc:	f7f7 fd04 	bl	8000608 <__aeabi_dmul>
 8008c00:	4604      	mov	r4, r0
 8008c02:	460d      	mov	r5, r1
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	4640      	mov	r0, r8
 8008c0a:	4649      	mov	r1, r9
 8008c0c:	f7f7 fb44 	bl	8000298 <__aeabi_dsub>
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	4606      	mov	r6, r0
 8008c16:	460f      	mov	r7, r1
 8008c18:	4640      	mov	r0, r8
 8008c1a:	4649      	mov	r1, r9
 8008c1c:	f7f7 fb3c 	bl	8000298 <__aeabi_dsub>
 8008c20:	4622      	mov	r2, r4
 8008c22:	462b      	mov	r3, r5
 8008c24:	f7f7 fb38 	bl	8000298 <__aeabi_dsub>
 8008c28:	a31b      	add	r3, pc, #108	; (adr r3, 8008c98 <__ieee754_rem_pio2+0x330>)
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	4604      	mov	r4, r0
 8008c30:	460d      	mov	r5, r1
 8008c32:	ec51 0b18 	vmov	r0, r1, d8
 8008c36:	f7f7 fce7 	bl	8000608 <__aeabi_dmul>
 8008c3a:	4622      	mov	r2, r4
 8008c3c:	462b      	mov	r3, r5
 8008c3e:	f7f7 fb2b 	bl	8000298 <__aeabi_dsub>
 8008c42:	4604      	mov	r4, r0
 8008c44:	460d      	mov	r5, r1
 8008c46:	e75f      	b.n	8008b08 <__ieee754_rem_pio2+0x1a0>
 8008c48:	4b1b      	ldr	r3, [pc, #108]	; (8008cb8 <__ieee754_rem_pio2+0x350>)
 8008c4a:	4598      	cmp	r8, r3
 8008c4c:	dd36      	ble.n	8008cbc <__ieee754_rem_pio2+0x354>
 8008c4e:	ee10 2a10 	vmov	r2, s0
 8008c52:	462b      	mov	r3, r5
 8008c54:	4620      	mov	r0, r4
 8008c56:	4629      	mov	r1, r5
 8008c58:	f7f7 fb1e 	bl	8000298 <__aeabi_dsub>
 8008c5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008c60:	e9ca 0100 	strd	r0, r1, [sl]
 8008c64:	e694      	b.n	8008990 <__ieee754_rem_pio2+0x28>
 8008c66:	bf00      	nop
 8008c68:	54400000 	.word	0x54400000
 8008c6c:	3ff921fb 	.word	0x3ff921fb
 8008c70:	1a626331 	.word	0x1a626331
 8008c74:	3dd0b461 	.word	0x3dd0b461
 8008c78:	1a600000 	.word	0x1a600000
 8008c7c:	3dd0b461 	.word	0x3dd0b461
 8008c80:	2e037073 	.word	0x2e037073
 8008c84:	3ba3198a 	.word	0x3ba3198a
 8008c88:	6dc9c883 	.word	0x6dc9c883
 8008c8c:	3fe45f30 	.word	0x3fe45f30
 8008c90:	2e000000 	.word	0x2e000000
 8008c94:	3ba3198a 	.word	0x3ba3198a
 8008c98:	252049c1 	.word	0x252049c1
 8008c9c:	397b839a 	.word	0x397b839a
 8008ca0:	3fe921fb 	.word	0x3fe921fb
 8008ca4:	4002d97b 	.word	0x4002d97b
 8008ca8:	3ff921fb 	.word	0x3ff921fb
 8008cac:	413921fb 	.word	0x413921fb
 8008cb0:	3fe00000 	.word	0x3fe00000
 8008cb4:	08009cb4 	.word	0x08009cb4
 8008cb8:	7fefffff 	.word	0x7fefffff
 8008cbc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008cc0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008cc4:	ee10 0a10 	vmov	r0, s0
 8008cc8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008ccc:	ee10 6a10 	vmov	r6, s0
 8008cd0:	460f      	mov	r7, r1
 8008cd2:	f7f7 ff33 	bl	8000b3c <__aeabi_d2iz>
 8008cd6:	f7f7 fc2d 	bl	8000534 <__aeabi_i2d>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4630      	mov	r0, r6
 8008ce0:	4639      	mov	r1, r7
 8008ce2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ce6:	f7f7 fad7 	bl	8000298 <__aeabi_dsub>
 8008cea:	4b22      	ldr	r3, [pc, #136]	; (8008d74 <__ieee754_rem_pio2+0x40c>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	f7f7 fc8b 	bl	8000608 <__aeabi_dmul>
 8008cf2:	460f      	mov	r7, r1
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	f7f7 ff21 	bl	8000b3c <__aeabi_d2iz>
 8008cfa:	f7f7 fc1b 	bl	8000534 <__aeabi_i2d>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	4630      	mov	r0, r6
 8008d04:	4639      	mov	r1, r7
 8008d06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d0a:	f7f7 fac5 	bl	8000298 <__aeabi_dsub>
 8008d0e:	4b19      	ldr	r3, [pc, #100]	; (8008d74 <__ieee754_rem_pio2+0x40c>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	f7f7 fc79 	bl	8000608 <__aeabi_dmul>
 8008d16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d1a:	ad04      	add	r5, sp, #16
 8008d1c:	f04f 0803 	mov.w	r8, #3
 8008d20:	46a9      	mov	r9, r5
 8008d22:	2600      	movs	r6, #0
 8008d24:	2700      	movs	r7, #0
 8008d26:	4632      	mov	r2, r6
 8008d28:	463b      	mov	r3, r7
 8008d2a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008d2e:	46c3      	mov	fp, r8
 8008d30:	3d08      	subs	r5, #8
 8008d32:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d36:	f7f7 fecf 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d1f3      	bne.n	8008d26 <__ieee754_rem_pio2+0x3be>
 8008d3e:	4b0e      	ldr	r3, [pc, #56]	; (8008d78 <__ieee754_rem_pio2+0x410>)
 8008d40:	9301      	str	r3, [sp, #4]
 8008d42:	2302      	movs	r3, #2
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	4622      	mov	r2, r4
 8008d48:	465b      	mov	r3, fp
 8008d4a:	4651      	mov	r1, sl
 8008d4c:	4648      	mov	r0, r9
 8008d4e:	f000 f8df 	bl	8008f10 <__kernel_rem_pio2>
 8008d52:	9b02      	ldr	r3, [sp, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	4683      	mov	fp, r0
 8008d58:	f6bf ae46 	bge.w	80089e8 <__ieee754_rem_pio2+0x80>
 8008d5c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008d60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d64:	f8ca 3004 	str.w	r3, [sl, #4]
 8008d68:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008d6c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d70:	e73a      	b.n	8008be8 <__ieee754_rem_pio2+0x280>
 8008d72:	bf00      	nop
 8008d74:	41700000 	.word	0x41700000
 8008d78:	08009d34 	.word	0x08009d34
 8008d7c:	00000000 	.word	0x00000000

08008d80 <__kernel_cos>:
 8008d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d84:	ec57 6b10 	vmov	r6, r7, d0
 8008d88:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008d8c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008d90:	ed8d 1b00 	vstr	d1, [sp]
 8008d94:	da07      	bge.n	8008da6 <__kernel_cos+0x26>
 8008d96:	ee10 0a10 	vmov	r0, s0
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	f7f7 fece 	bl	8000b3c <__aeabi_d2iz>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	f000 8088 	beq.w	8008eb6 <__kernel_cos+0x136>
 8008da6:	4632      	mov	r2, r6
 8008da8:	463b      	mov	r3, r7
 8008daa:	4630      	mov	r0, r6
 8008dac:	4639      	mov	r1, r7
 8008dae:	f7f7 fc2b 	bl	8000608 <__aeabi_dmul>
 8008db2:	4b51      	ldr	r3, [pc, #324]	; (8008ef8 <__kernel_cos+0x178>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	4604      	mov	r4, r0
 8008db8:	460d      	mov	r5, r1
 8008dba:	f7f7 fc25 	bl	8000608 <__aeabi_dmul>
 8008dbe:	a340      	add	r3, pc, #256	; (adr r3, 8008ec0 <__kernel_cos+0x140>)
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	4682      	mov	sl, r0
 8008dc6:	468b      	mov	fp, r1
 8008dc8:	4620      	mov	r0, r4
 8008dca:	4629      	mov	r1, r5
 8008dcc:	f7f7 fc1c 	bl	8000608 <__aeabi_dmul>
 8008dd0:	a33d      	add	r3, pc, #244	; (adr r3, 8008ec8 <__kernel_cos+0x148>)
 8008dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd6:	f7f7 fa61 	bl	800029c <__adddf3>
 8008dda:	4622      	mov	r2, r4
 8008ddc:	462b      	mov	r3, r5
 8008dde:	f7f7 fc13 	bl	8000608 <__aeabi_dmul>
 8008de2:	a33b      	add	r3, pc, #236	; (adr r3, 8008ed0 <__kernel_cos+0x150>)
 8008de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de8:	f7f7 fa56 	bl	8000298 <__aeabi_dsub>
 8008dec:	4622      	mov	r2, r4
 8008dee:	462b      	mov	r3, r5
 8008df0:	f7f7 fc0a 	bl	8000608 <__aeabi_dmul>
 8008df4:	a338      	add	r3, pc, #224	; (adr r3, 8008ed8 <__kernel_cos+0x158>)
 8008df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfa:	f7f7 fa4f 	bl	800029c <__adddf3>
 8008dfe:	4622      	mov	r2, r4
 8008e00:	462b      	mov	r3, r5
 8008e02:	f7f7 fc01 	bl	8000608 <__aeabi_dmul>
 8008e06:	a336      	add	r3, pc, #216	; (adr r3, 8008ee0 <__kernel_cos+0x160>)
 8008e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0c:	f7f7 fa44 	bl	8000298 <__aeabi_dsub>
 8008e10:	4622      	mov	r2, r4
 8008e12:	462b      	mov	r3, r5
 8008e14:	f7f7 fbf8 	bl	8000608 <__aeabi_dmul>
 8008e18:	a333      	add	r3, pc, #204	; (adr r3, 8008ee8 <__kernel_cos+0x168>)
 8008e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1e:	f7f7 fa3d 	bl	800029c <__adddf3>
 8008e22:	4622      	mov	r2, r4
 8008e24:	462b      	mov	r3, r5
 8008e26:	f7f7 fbef 	bl	8000608 <__aeabi_dmul>
 8008e2a:	4622      	mov	r2, r4
 8008e2c:	462b      	mov	r3, r5
 8008e2e:	f7f7 fbeb 	bl	8000608 <__aeabi_dmul>
 8008e32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e36:	4604      	mov	r4, r0
 8008e38:	460d      	mov	r5, r1
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	4639      	mov	r1, r7
 8008e3e:	f7f7 fbe3 	bl	8000608 <__aeabi_dmul>
 8008e42:	460b      	mov	r3, r1
 8008e44:	4602      	mov	r2, r0
 8008e46:	4629      	mov	r1, r5
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f7f7 fa25 	bl	8000298 <__aeabi_dsub>
 8008e4e:	4b2b      	ldr	r3, [pc, #172]	; (8008efc <__kernel_cos+0x17c>)
 8008e50:	4598      	cmp	r8, r3
 8008e52:	4606      	mov	r6, r0
 8008e54:	460f      	mov	r7, r1
 8008e56:	dc10      	bgt.n	8008e7a <__kernel_cos+0xfa>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4650      	mov	r0, sl
 8008e5e:	4659      	mov	r1, fp
 8008e60:	f7f7 fa1a 	bl	8000298 <__aeabi_dsub>
 8008e64:	460b      	mov	r3, r1
 8008e66:	4926      	ldr	r1, [pc, #152]	; (8008f00 <__kernel_cos+0x180>)
 8008e68:	4602      	mov	r2, r0
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	f7f7 fa14 	bl	8000298 <__aeabi_dsub>
 8008e70:	ec41 0b10 	vmov	d0, r0, r1
 8008e74:	b003      	add	sp, #12
 8008e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7a:	4b22      	ldr	r3, [pc, #136]	; (8008f04 <__kernel_cos+0x184>)
 8008e7c:	4920      	ldr	r1, [pc, #128]	; (8008f00 <__kernel_cos+0x180>)
 8008e7e:	4598      	cmp	r8, r3
 8008e80:	bfcc      	ite	gt
 8008e82:	4d21      	ldrgt	r5, [pc, #132]	; (8008f08 <__kernel_cos+0x188>)
 8008e84:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008e88:	2400      	movs	r4, #0
 8008e8a:	4622      	mov	r2, r4
 8008e8c:	462b      	mov	r3, r5
 8008e8e:	2000      	movs	r0, #0
 8008e90:	f7f7 fa02 	bl	8000298 <__aeabi_dsub>
 8008e94:	4622      	mov	r2, r4
 8008e96:	4680      	mov	r8, r0
 8008e98:	4689      	mov	r9, r1
 8008e9a:	462b      	mov	r3, r5
 8008e9c:	4650      	mov	r0, sl
 8008e9e:	4659      	mov	r1, fp
 8008ea0:	f7f7 f9fa 	bl	8000298 <__aeabi_dsub>
 8008ea4:	4632      	mov	r2, r6
 8008ea6:	463b      	mov	r3, r7
 8008ea8:	f7f7 f9f6 	bl	8000298 <__aeabi_dsub>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	4649      	mov	r1, r9
 8008eb4:	e7da      	b.n	8008e6c <__kernel_cos+0xec>
 8008eb6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008ef0 <__kernel_cos+0x170>
 8008eba:	e7db      	b.n	8008e74 <__kernel_cos+0xf4>
 8008ebc:	f3af 8000 	nop.w
 8008ec0:	be8838d4 	.word	0xbe8838d4
 8008ec4:	bda8fae9 	.word	0xbda8fae9
 8008ec8:	bdb4b1c4 	.word	0xbdb4b1c4
 8008ecc:	3e21ee9e 	.word	0x3e21ee9e
 8008ed0:	809c52ad 	.word	0x809c52ad
 8008ed4:	3e927e4f 	.word	0x3e927e4f
 8008ed8:	19cb1590 	.word	0x19cb1590
 8008edc:	3efa01a0 	.word	0x3efa01a0
 8008ee0:	16c15177 	.word	0x16c15177
 8008ee4:	3f56c16c 	.word	0x3f56c16c
 8008ee8:	5555554c 	.word	0x5555554c
 8008eec:	3fa55555 	.word	0x3fa55555
 8008ef0:	00000000 	.word	0x00000000
 8008ef4:	3ff00000 	.word	0x3ff00000
 8008ef8:	3fe00000 	.word	0x3fe00000
 8008efc:	3fd33332 	.word	0x3fd33332
 8008f00:	3ff00000 	.word	0x3ff00000
 8008f04:	3fe90000 	.word	0x3fe90000
 8008f08:	3fd20000 	.word	0x3fd20000
 8008f0c:	00000000 	.word	0x00000000

08008f10 <__kernel_rem_pio2>:
 8008f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	ed2d 8b02 	vpush	{d8}
 8008f18:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008f1c:	f112 0f14 	cmn.w	r2, #20
 8008f20:	9308      	str	r3, [sp, #32]
 8008f22:	9101      	str	r1, [sp, #4]
 8008f24:	4bc6      	ldr	r3, [pc, #792]	; (8009240 <__kernel_rem_pio2+0x330>)
 8008f26:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008f28:	9009      	str	r0, [sp, #36]	; 0x24
 8008f2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f2e:	9304      	str	r3, [sp, #16]
 8008f30:	9b08      	ldr	r3, [sp, #32]
 8008f32:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f36:	bfa8      	it	ge
 8008f38:	1ed4      	subge	r4, r2, #3
 8008f3a:	9306      	str	r3, [sp, #24]
 8008f3c:	bfb2      	itee	lt
 8008f3e:	2400      	movlt	r4, #0
 8008f40:	2318      	movge	r3, #24
 8008f42:	fb94 f4f3 	sdivge	r4, r4, r3
 8008f46:	f06f 0317 	mvn.w	r3, #23
 8008f4a:	fb04 3303 	mla	r3, r4, r3, r3
 8008f4e:	eb03 0a02 	add.w	sl, r3, r2
 8008f52:	9b04      	ldr	r3, [sp, #16]
 8008f54:	9a06      	ldr	r2, [sp, #24]
 8008f56:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009230 <__kernel_rem_pio2+0x320>
 8008f5a:	eb03 0802 	add.w	r8, r3, r2
 8008f5e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008f60:	1aa7      	subs	r7, r4, r2
 8008f62:	ae20      	add	r6, sp, #128	; 0x80
 8008f64:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008f68:	2500      	movs	r5, #0
 8008f6a:	4545      	cmp	r5, r8
 8008f6c:	dd18      	ble.n	8008fa0 <__kernel_rem_pio2+0x90>
 8008f6e:	9b08      	ldr	r3, [sp, #32]
 8008f70:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008f74:	aa20      	add	r2, sp, #128	; 0x80
 8008f76:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009230 <__kernel_rem_pio2+0x320>
 8008f7a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008f7e:	f1c3 0301 	rsb	r3, r3, #1
 8008f82:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008f86:	9307      	str	r3, [sp, #28]
 8008f88:	9b07      	ldr	r3, [sp, #28]
 8008f8a:	9a04      	ldr	r2, [sp, #16]
 8008f8c:	4443      	add	r3, r8
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	db2f      	blt.n	8008ff2 <__kernel_rem_pio2+0xe2>
 8008f92:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008f96:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008f9a:	462f      	mov	r7, r5
 8008f9c:	2600      	movs	r6, #0
 8008f9e:	e01b      	b.n	8008fd8 <__kernel_rem_pio2+0xc8>
 8008fa0:	42ef      	cmn	r7, r5
 8008fa2:	d407      	bmi.n	8008fb4 <__kernel_rem_pio2+0xa4>
 8008fa4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008fa8:	f7f7 fac4 	bl	8000534 <__aeabi_i2d>
 8008fac:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008fb0:	3501      	adds	r5, #1
 8008fb2:	e7da      	b.n	8008f6a <__kernel_rem_pio2+0x5a>
 8008fb4:	ec51 0b18 	vmov	r0, r1, d8
 8008fb8:	e7f8      	b.n	8008fac <__kernel_rem_pio2+0x9c>
 8008fba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fbe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008fc2:	f7f7 fb21 	bl	8000608 <__aeabi_dmul>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fce:	f7f7 f965 	bl	800029c <__adddf3>
 8008fd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fd6:	3601      	adds	r6, #1
 8008fd8:	9b06      	ldr	r3, [sp, #24]
 8008fda:	429e      	cmp	r6, r3
 8008fdc:	f1a7 0708 	sub.w	r7, r7, #8
 8008fe0:	ddeb      	ble.n	8008fba <__kernel_rem_pio2+0xaa>
 8008fe2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fe6:	3508      	adds	r5, #8
 8008fe8:	ecab 7b02 	vstmia	fp!, {d7}
 8008fec:	f108 0801 	add.w	r8, r8, #1
 8008ff0:	e7ca      	b.n	8008f88 <__kernel_rem_pio2+0x78>
 8008ff2:	9b04      	ldr	r3, [sp, #16]
 8008ff4:	aa0c      	add	r2, sp, #48	; 0x30
 8008ff6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ffa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ffc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008ffe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009002:	9c04      	ldr	r4, [sp, #16]
 8009004:	930a      	str	r3, [sp, #40]	; 0x28
 8009006:	ab98      	add	r3, sp, #608	; 0x260
 8009008:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800900c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009010:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009014:	f8cd b008 	str.w	fp, [sp, #8]
 8009018:	4625      	mov	r5, r4
 800901a:	2d00      	cmp	r5, #0
 800901c:	dc78      	bgt.n	8009110 <__kernel_rem_pio2+0x200>
 800901e:	ec47 6b10 	vmov	d0, r6, r7
 8009022:	4650      	mov	r0, sl
 8009024:	f000 fbfc 	bl	8009820 <scalbn>
 8009028:	ec57 6b10 	vmov	r6, r7, d0
 800902c:	2200      	movs	r2, #0
 800902e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009032:	ee10 0a10 	vmov	r0, s0
 8009036:	4639      	mov	r1, r7
 8009038:	f7f7 fae6 	bl	8000608 <__aeabi_dmul>
 800903c:	ec41 0b10 	vmov	d0, r0, r1
 8009040:	f000 fb6e 	bl	8009720 <floor>
 8009044:	4b7f      	ldr	r3, [pc, #508]	; (8009244 <__kernel_rem_pio2+0x334>)
 8009046:	ec51 0b10 	vmov	r0, r1, d0
 800904a:	2200      	movs	r2, #0
 800904c:	f7f7 fadc 	bl	8000608 <__aeabi_dmul>
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	4630      	mov	r0, r6
 8009056:	4639      	mov	r1, r7
 8009058:	f7f7 f91e 	bl	8000298 <__aeabi_dsub>
 800905c:	460f      	mov	r7, r1
 800905e:	4606      	mov	r6, r0
 8009060:	f7f7 fd6c 	bl	8000b3c <__aeabi_d2iz>
 8009064:	9007      	str	r0, [sp, #28]
 8009066:	f7f7 fa65 	bl	8000534 <__aeabi_i2d>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	4630      	mov	r0, r6
 8009070:	4639      	mov	r1, r7
 8009072:	f7f7 f911 	bl	8000298 <__aeabi_dsub>
 8009076:	f1ba 0f00 	cmp.w	sl, #0
 800907a:	4606      	mov	r6, r0
 800907c:	460f      	mov	r7, r1
 800907e:	dd70      	ble.n	8009162 <__kernel_rem_pio2+0x252>
 8009080:	1e62      	subs	r2, r4, #1
 8009082:	ab0c      	add	r3, sp, #48	; 0x30
 8009084:	9d07      	ldr	r5, [sp, #28]
 8009086:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800908a:	f1ca 0118 	rsb	r1, sl, #24
 800908e:	fa40 f301 	asr.w	r3, r0, r1
 8009092:	441d      	add	r5, r3
 8009094:	408b      	lsls	r3, r1
 8009096:	1ac0      	subs	r0, r0, r3
 8009098:	ab0c      	add	r3, sp, #48	; 0x30
 800909a:	9507      	str	r5, [sp, #28]
 800909c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80090a0:	f1ca 0317 	rsb	r3, sl, #23
 80090a4:	fa40 f303 	asr.w	r3, r0, r3
 80090a8:	9302      	str	r3, [sp, #8]
 80090aa:	9b02      	ldr	r3, [sp, #8]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	dd66      	ble.n	800917e <__kernel_rem_pio2+0x26e>
 80090b0:	9b07      	ldr	r3, [sp, #28]
 80090b2:	2200      	movs	r2, #0
 80090b4:	3301      	adds	r3, #1
 80090b6:	9307      	str	r3, [sp, #28]
 80090b8:	4615      	mov	r5, r2
 80090ba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80090be:	4294      	cmp	r4, r2
 80090c0:	f300 8099 	bgt.w	80091f6 <__kernel_rem_pio2+0x2e6>
 80090c4:	f1ba 0f00 	cmp.w	sl, #0
 80090c8:	dd07      	ble.n	80090da <__kernel_rem_pio2+0x1ca>
 80090ca:	f1ba 0f01 	cmp.w	sl, #1
 80090ce:	f000 80a5 	beq.w	800921c <__kernel_rem_pio2+0x30c>
 80090d2:	f1ba 0f02 	cmp.w	sl, #2
 80090d6:	f000 80c1 	beq.w	800925c <__kernel_rem_pio2+0x34c>
 80090da:	9b02      	ldr	r3, [sp, #8]
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d14e      	bne.n	800917e <__kernel_rem_pio2+0x26e>
 80090e0:	4632      	mov	r2, r6
 80090e2:	463b      	mov	r3, r7
 80090e4:	4958      	ldr	r1, [pc, #352]	; (8009248 <__kernel_rem_pio2+0x338>)
 80090e6:	2000      	movs	r0, #0
 80090e8:	f7f7 f8d6 	bl	8000298 <__aeabi_dsub>
 80090ec:	4606      	mov	r6, r0
 80090ee:	460f      	mov	r7, r1
 80090f0:	2d00      	cmp	r5, #0
 80090f2:	d044      	beq.n	800917e <__kernel_rem_pio2+0x26e>
 80090f4:	4650      	mov	r0, sl
 80090f6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009238 <__kernel_rem_pio2+0x328>
 80090fa:	f000 fb91 	bl	8009820 <scalbn>
 80090fe:	4630      	mov	r0, r6
 8009100:	4639      	mov	r1, r7
 8009102:	ec53 2b10 	vmov	r2, r3, d0
 8009106:	f7f7 f8c7 	bl	8000298 <__aeabi_dsub>
 800910a:	4606      	mov	r6, r0
 800910c:	460f      	mov	r7, r1
 800910e:	e036      	b.n	800917e <__kernel_rem_pio2+0x26e>
 8009110:	4b4e      	ldr	r3, [pc, #312]	; (800924c <__kernel_rem_pio2+0x33c>)
 8009112:	2200      	movs	r2, #0
 8009114:	4630      	mov	r0, r6
 8009116:	4639      	mov	r1, r7
 8009118:	f7f7 fa76 	bl	8000608 <__aeabi_dmul>
 800911c:	f7f7 fd0e 	bl	8000b3c <__aeabi_d2iz>
 8009120:	f7f7 fa08 	bl	8000534 <__aeabi_i2d>
 8009124:	4b4a      	ldr	r3, [pc, #296]	; (8009250 <__kernel_rem_pio2+0x340>)
 8009126:	2200      	movs	r2, #0
 8009128:	4680      	mov	r8, r0
 800912a:	4689      	mov	r9, r1
 800912c:	f7f7 fa6c 	bl	8000608 <__aeabi_dmul>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4630      	mov	r0, r6
 8009136:	4639      	mov	r1, r7
 8009138:	f7f7 f8ae 	bl	8000298 <__aeabi_dsub>
 800913c:	f7f7 fcfe 	bl	8000b3c <__aeabi_d2iz>
 8009140:	9b02      	ldr	r3, [sp, #8]
 8009142:	f843 0b04 	str.w	r0, [r3], #4
 8009146:	3d01      	subs	r5, #1
 8009148:	9302      	str	r3, [sp, #8]
 800914a:	ab70      	add	r3, sp, #448	; 0x1c0
 800914c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009154:	4640      	mov	r0, r8
 8009156:	4649      	mov	r1, r9
 8009158:	f7f7 f8a0 	bl	800029c <__adddf3>
 800915c:	4606      	mov	r6, r0
 800915e:	460f      	mov	r7, r1
 8009160:	e75b      	b.n	800901a <__kernel_rem_pio2+0x10a>
 8009162:	d105      	bne.n	8009170 <__kernel_rem_pio2+0x260>
 8009164:	1e63      	subs	r3, r4, #1
 8009166:	aa0c      	add	r2, sp, #48	; 0x30
 8009168:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800916c:	15c3      	asrs	r3, r0, #23
 800916e:	e79b      	b.n	80090a8 <__kernel_rem_pio2+0x198>
 8009170:	4b38      	ldr	r3, [pc, #224]	; (8009254 <__kernel_rem_pio2+0x344>)
 8009172:	2200      	movs	r2, #0
 8009174:	f7f7 fcce 	bl	8000b14 <__aeabi_dcmpge>
 8009178:	2800      	cmp	r0, #0
 800917a:	d139      	bne.n	80091f0 <__kernel_rem_pio2+0x2e0>
 800917c:	9002      	str	r0, [sp, #8]
 800917e:	2200      	movs	r2, #0
 8009180:	2300      	movs	r3, #0
 8009182:	4630      	mov	r0, r6
 8009184:	4639      	mov	r1, r7
 8009186:	f7f7 fca7 	bl	8000ad8 <__aeabi_dcmpeq>
 800918a:	2800      	cmp	r0, #0
 800918c:	f000 80b4 	beq.w	80092f8 <__kernel_rem_pio2+0x3e8>
 8009190:	f104 3bff 	add.w	fp, r4, #4294967295
 8009194:	465b      	mov	r3, fp
 8009196:	2200      	movs	r2, #0
 8009198:	9904      	ldr	r1, [sp, #16]
 800919a:	428b      	cmp	r3, r1
 800919c:	da65      	bge.n	800926a <__kernel_rem_pio2+0x35a>
 800919e:	2a00      	cmp	r2, #0
 80091a0:	d07b      	beq.n	800929a <__kernel_rem_pio2+0x38a>
 80091a2:	ab0c      	add	r3, sp, #48	; 0x30
 80091a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80091a8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 80a0 	beq.w	80092f2 <__kernel_rem_pio2+0x3e2>
 80091b2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009238 <__kernel_rem_pio2+0x328>
 80091b6:	4650      	mov	r0, sl
 80091b8:	f000 fb32 	bl	8009820 <scalbn>
 80091bc:	4f23      	ldr	r7, [pc, #140]	; (800924c <__kernel_rem_pio2+0x33c>)
 80091be:	ec55 4b10 	vmov	r4, r5, d0
 80091c2:	46d8      	mov	r8, fp
 80091c4:	2600      	movs	r6, #0
 80091c6:	f1b8 0f00 	cmp.w	r8, #0
 80091ca:	f280 80cf 	bge.w	800936c <__kernel_rem_pio2+0x45c>
 80091ce:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009230 <__kernel_rem_pio2+0x320>
 80091d2:	465f      	mov	r7, fp
 80091d4:	f04f 0800 	mov.w	r8, #0
 80091d8:	2f00      	cmp	r7, #0
 80091da:	f2c0 80fd 	blt.w	80093d8 <__kernel_rem_pio2+0x4c8>
 80091de:	ab70      	add	r3, sp, #448	; 0x1c0
 80091e0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009258 <__kernel_rem_pio2+0x348>
 80091e4:	ec55 4b18 	vmov	r4, r5, d8
 80091e8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80091ec:	2600      	movs	r6, #0
 80091ee:	e0e5      	b.n	80093bc <__kernel_rem_pio2+0x4ac>
 80091f0:	2302      	movs	r3, #2
 80091f2:	9302      	str	r3, [sp, #8]
 80091f4:	e75c      	b.n	80090b0 <__kernel_rem_pio2+0x1a0>
 80091f6:	f8db 3000 	ldr.w	r3, [fp]
 80091fa:	b955      	cbnz	r5, 8009212 <__kernel_rem_pio2+0x302>
 80091fc:	b123      	cbz	r3, 8009208 <__kernel_rem_pio2+0x2f8>
 80091fe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009202:	f8cb 3000 	str.w	r3, [fp]
 8009206:	2301      	movs	r3, #1
 8009208:	3201      	adds	r2, #1
 800920a:	f10b 0b04 	add.w	fp, fp, #4
 800920e:	461d      	mov	r5, r3
 8009210:	e755      	b.n	80090be <__kernel_rem_pio2+0x1ae>
 8009212:	1acb      	subs	r3, r1, r3
 8009214:	f8cb 3000 	str.w	r3, [fp]
 8009218:	462b      	mov	r3, r5
 800921a:	e7f5      	b.n	8009208 <__kernel_rem_pio2+0x2f8>
 800921c:	1e62      	subs	r2, r4, #1
 800921e:	ab0c      	add	r3, sp, #48	; 0x30
 8009220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009224:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009228:	a90c      	add	r1, sp, #48	; 0x30
 800922a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800922e:	e754      	b.n	80090da <__kernel_rem_pio2+0x1ca>
	...
 800923c:	3ff00000 	.word	0x3ff00000
 8009240:	08009e80 	.word	0x08009e80
 8009244:	40200000 	.word	0x40200000
 8009248:	3ff00000 	.word	0x3ff00000
 800924c:	3e700000 	.word	0x3e700000
 8009250:	41700000 	.word	0x41700000
 8009254:	3fe00000 	.word	0x3fe00000
 8009258:	08009e40 	.word	0x08009e40
 800925c:	1e62      	subs	r2, r4, #1
 800925e:	ab0c      	add	r3, sp, #48	; 0x30
 8009260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009264:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009268:	e7de      	b.n	8009228 <__kernel_rem_pio2+0x318>
 800926a:	a90c      	add	r1, sp, #48	; 0x30
 800926c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009270:	3b01      	subs	r3, #1
 8009272:	430a      	orrs	r2, r1
 8009274:	e790      	b.n	8009198 <__kernel_rem_pio2+0x288>
 8009276:	3301      	adds	r3, #1
 8009278:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800927c:	2900      	cmp	r1, #0
 800927e:	d0fa      	beq.n	8009276 <__kernel_rem_pio2+0x366>
 8009280:	9a08      	ldr	r2, [sp, #32]
 8009282:	18e3      	adds	r3, r4, r3
 8009284:	18a6      	adds	r6, r4, r2
 8009286:	aa20      	add	r2, sp, #128	; 0x80
 8009288:	1c65      	adds	r5, r4, #1
 800928a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800928e:	9302      	str	r3, [sp, #8]
 8009290:	9b02      	ldr	r3, [sp, #8]
 8009292:	42ab      	cmp	r3, r5
 8009294:	da04      	bge.n	80092a0 <__kernel_rem_pio2+0x390>
 8009296:	461c      	mov	r4, r3
 8009298:	e6b5      	b.n	8009006 <__kernel_rem_pio2+0xf6>
 800929a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800929c:	2301      	movs	r3, #1
 800929e:	e7eb      	b.n	8009278 <__kernel_rem_pio2+0x368>
 80092a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092a6:	f7f7 f945 	bl	8000534 <__aeabi_i2d>
 80092aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80092ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b0:	46b3      	mov	fp, r6
 80092b2:	461c      	mov	r4, r3
 80092b4:	2700      	movs	r7, #0
 80092b6:	f04f 0800 	mov.w	r8, #0
 80092ba:	f04f 0900 	mov.w	r9, #0
 80092be:	9b06      	ldr	r3, [sp, #24]
 80092c0:	429f      	cmp	r7, r3
 80092c2:	dd06      	ble.n	80092d2 <__kernel_rem_pio2+0x3c2>
 80092c4:	ab70      	add	r3, sp, #448	; 0x1c0
 80092c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80092ca:	e9c3 8900 	strd	r8, r9, [r3]
 80092ce:	3501      	adds	r5, #1
 80092d0:	e7de      	b.n	8009290 <__kernel_rem_pio2+0x380>
 80092d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80092d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80092da:	f7f7 f995 	bl	8000608 <__aeabi_dmul>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	4640      	mov	r0, r8
 80092e4:	4649      	mov	r1, r9
 80092e6:	f7f6 ffd9 	bl	800029c <__adddf3>
 80092ea:	3701      	adds	r7, #1
 80092ec:	4680      	mov	r8, r0
 80092ee:	4689      	mov	r9, r1
 80092f0:	e7e5      	b.n	80092be <__kernel_rem_pio2+0x3ae>
 80092f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092f6:	e754      	b.n	80091a2 <__kernel_rem_pio2+0x292>
 80092f8:	ec47 6b10 	vmov	d0, r6, r7
 80092fc:	f1ca 0000 	rsb	r0, sl, #0
 8009300:	f000 fa8e 	bl	8009820 <scalbn>
 8009304:	ec57 6b10 	vmov	r6, r7, d0
 8009308:	4b9f      	ldr	r3, [pc, #636]	; (8009588 <__kernel_rem_pio2+0x678>)
 800930a:	ee10 0a10 	vmov	r0, s0
 800930e:	2200      	movs	r2, #0
 8009310:	4639      	mov	r1, r7
 8009312:	f7f7 fbff 	bl	8000b14 <__aeabi_dcmpge>
 8009316:	b300      	cbz	r0, 800935a <__kernel_rem_pio2+0x44a>
 8009318:	4b9c      	ldr	r3, [pc, #624]	; (800958c <__kernel_rem_pio2+0x67c>)
 800931a:	2200      	movs	r2, #0
 800931c:	4630      	mov	r0, r6
 800931e:	4639      	mov	r1, r7
 8009320:	f7f7 f972 	bl	8000608 <__aeabi_dmul>
 8009324:	f7f7 fc0a 	bl	8000b3c <__aeabi_d2iz>
 8009328:	4605      	mov	r5, r0
 800932a:	f7f7 f903 	bl	8000534 <__aeabi_i2d>
 800932e:	4b96      	ldr	r3, [pc, #600]	; (8009588 <__kernel_rem_pio2+0x678>)
 8009330:	2200      	movs	r2, #0
 8009332:	f7f7 f969 	bl	8000608 <__aeabi_dmul>
 8009336:	460b      	mov	r3, r1
 8009338:	4602      	mov	r2, r0
 800933a:	4639      	mov	r1, r7
 800933c:	4630      	mov	r0, r6
 800933e:	f7f6 ffab 	bl	8000298 <__aeabi_dsub>
 8009342:	f7f7 fbfb 	bl	8000b3c <__aeabi_d2iz>
 8009346:	f104 0b01 	add.w	fp, r4, #1
 800934a:	ab0c      	add	r3, sp, #48	; 0x30
 800934c:	f10a 0a18 	add.w	sl, sl, #24
 8009350:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009354:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009358:	e72b      	b.n	80091b2 <__kernel_rem_pio2+0x2a2>
 800935a:	4630      	mov	r0, r6
 800935c:	4639      	mov	r1, r7
 800935e:	f7f7 fbed 	bl	8000b3c <__aeabi_d2iz>
 8009362:	ab0c      	add	r3, sp, #48	; 0x30
 8009364:	46a3      	mov	fp, r4
 8009366:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800936a:	e722      	b.n	80091b2 <__kernel_rem_pio2+0x2a2>
 800936c:	ab70      	add	r3, sp, #448	; 0x1c0
 800936e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8009372:	ab0c      	add	r3, sp, #48	; 0x30
 8009374:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009378:	f7f7 f8dc 	bl	8000534 <__aeabi_i2d>
 800937c:	4622      	mov	r2, r4
 800937e:	462b      	mov	r3, r5
 8009380:	f7f7 f942 	bl	8000608 <__aeabi_dmul>
 8009384:	4632      	mov	r2, r6
 8009386:	e9c9 0100 	strd	r0, r1, [r9]
 800938a:	463b      	mov	r3, r7
 800938c:	4620      	mov	r0, r4
 800938e:	4629      	mov	r1, r5
 8009390:	f7f7 f93a 	bl	8000608 <__aeabi_dmul>
 8009394:	f108 38ff 	add.w	r8, r8, #4294967295
 8009398:	4604      	mov	r4, r0
 800939a:	460d      	mov	r5, r1
 800939c:	e713      	b.n	80091c6 <__kernel_rem_pio2+0x2b6>
 800939e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80093a2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80093a6:	f7f7 f92f 	bl	8000608 <__aeabi_dmul>
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	4620      	mov	r0, r4
 80093b0:	4629      	mov	r1, r5
 80093b2:	f7f6 ff73 	bl	800029c <__adddf3>
 80093b6:	3601      	adds	r6, #1
 80093b8:	4604      	mov	r4, r0
 80093ba:	460d      	mov	r5, r1
 80093bc:	9b04      	ldr	r3, [sp, #16]
 80093be:	429e      	cmp	r6, r3
 80093c0:	dc01      	bgt.n	80093c6 <__kernel_rem_pio2+0x4b6>
 80093c2:	45b0      	cmp	r8, r6
 80093c4:	daeb      	bge.n	800939e <__kernel_rem_pio2+0x48e>
 80093c6:	ab48      	add	r3, sp, #288	; 0x120
 80093c8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80093cc:	e9c3 4500 	strd	r4, r5, [r3]
 80093d0:	3f01      	subs	r7, #1
 80093d2:	f108 0801 	add.w	r8, r8, #1
 80093d6:	e6ff      	b.n	80091d8 <__kernel_rem_pio2+0x2c8>
 80093d8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80093da:	2b02      	cmp	r3, #2
 80093dc:	dc0b      	bgt.n	80093f6 <__kernel_rem_pio2+0x4e6>
 80093de:	2b00      	cmp	r3, #0
 80093e0:	dc6e      	bgt.n	80094c0 <__kernel_rem_pio2+0x5b0>
 80093e2:	d045      	beq.n	8009470 <__kernel_rem_pio2+0x560>
 80093e4:	9b07      	ldr	r3, [sp, #28]
 80093e6:	f003 0007 	and.w	r0, r3, #7
 80093ea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80093ee:	ecbd 8b02 	vpop	{d8}
 80093f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80093f8:	2b03      	cmp	r3, #3
 80093fa:	d1f3      	bne.n	80093e4 <__kernel_rem_pio2+0x4d4>
 80093fc:	ab48      	add	r3, sp, #288	; 0x120
 80093fe:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8009402:	46d0      	mov	r8, sl
 8009404:	46d9      	mov	r9, fp
 8009406:	f1b9 0f00 	cmp.w	r9, #0
 800940a:	f1a8 0808 	sub.w	r8, r8, #8
 800940e:	dc64      	bgt.n	80094da <__kernel_rem_pio2+0x5ca>
 8009410:	465c      	mov	r4, fp
 8009412:	2c01      	cmp	r4, #1
 8009414:	f1aa 0a08 	sub.w	sl, sl, #8
 8009418:	dc7e      	bgt.n	8009518 <__kernel_rem_pio2+0x608>
 800941a:	2000      	movs	r0, #0
 800941c:	2100      	movs	r1, #0
 800941e:	f1bb 0f01 	cmp.w	fp, #1
 8009422:	f300 8097 	bgt.w	8009554 <__kernel_rem_pio2+0x644>
 8009426:	9b02      	ldr	r3, [sp, #8]
 8009428:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800942c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009430:	2b00      	cmp	r3, #0
 8009432:	f040 8099 	bne.w	8009568 <__kernel_rem_pio2+0x658>
 8009436:	9b01      	ldr	r3, [sp, #4]
 8009438:	e9c3 5600 	strd	r5, r6, [r3]
 800943c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009440:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009444:	e7ce      	b.n	80093e4 <__kernel_rem_pio2+0x4d4>
 8009446:	ab48      	add	r3, sp, #288	; 0x120
 8009448:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800944c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009450:	f7f6 ff24 	bl	800029c <__adddf3>
 8009454:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009458:	f1bb 0f00 	cmp.w	fp, #0
 800945c:	daf3      	bge.n	8009446 <__kernel_rem_pio2+0x536>
 800945e:	9b02      	ldr	r3, [sp, #8]
 8009460:	b113      	cbz	r3, 8009468 <__kernel_rem_pio2+0x558>
 8009462:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009466:	4619      	mov	r1, r3
 8009468:	9b01      	ldr	r3, [sp, #4]
 800946a:	e9c3 0100 	strd	r0, r1, [r3]
 800946e:	e7b9      	b.n	80093e4 <__kernel_rem_pio2+0x4d4>
 8009470:	2000      	movs	r0, #0
 8009472:	2100      	movs	r1, #0
 8009474:	e7f0      	b.n	8009458 <__kernel_rem_pio2+0x548>
 8009476:	ab48      	add	r3, sp, #288	; 0x120
 8009478:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800947c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009480:	f7f6 ff0c 	bl	800029c <__adddf3>
 8009484:	3c01      	subs	r4, #1
 8009486:	2c00      	cmp	r4, #0
 8009488:	daf5      	bge.n	8009476 <__kernel_rem_pio2+0x566>
 800948a:	9b02      	ldr	r3, [sp, #8]
 800948c:	b1e3      	cbz	r3, 80094c8 <__kernel_rem_pio2+0x5b8>
 800948e:	4602      	mov	r2, r0
 8009490:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009494:	9c01      	ldr	r4, [sp, #4]
 8009496:	e9c4 2300 	strd	r2, r3, [r4]
 800949a:	4602      	mov	r2, r0
 800949c:	460b      	mov	r3, r1
 800949e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80094a2:	f7f6 fef9 	bl	8000298 <__aeabi_dsub>
 80094a6:	ad4a      	add	r5, sp, #296	; 0x128
 80094a8:	2401      	movs	r4, #1
 80094aa:	45a3      	cmp	fp, r4
 80094ac:	da0f      	bge.n	80094ce <__kernel_rem_pio2+0x5be>
 80094ae:	9b02      	ldr	r3, [sp, #8]
 80094b0:	b113      	cbz	r3, 80094b8 <__kernel_rem_pio2+0x5a8>
 80094b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094b6:	4619      	mov	r1, r3
 80094b8:	9b01      	ldr	r3, [sp, #4]
 80094ba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80094be:	e791      	b.n	80093e4 <__kernel_rem_pio2+0x4d4>
 80094c0:	465c      	mov	r4, fp
 80094c2:	2000      	movs	r0, #0
 80094c4:	2100      	movs	r1, #0
 80094c6:	e7de      	b.n	8009486 <__kernel_rem_pio2+0x576>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	e7e2      	b.n	8009494 <__kernel_rem_pio2+0x584>
 80094ce:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80094d2:	f7f6 fee3 	bl	800029c <__adddf3>
 80094d6:	3401      	adds	r4, #1
 80094d8:	e7e7      	b.n	80094aa <__kernel_rem_pio2+0x59a>
 80094da:	e9d8 4500 	ldrd	r4, r5, [r8]
 80094de:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80094e2:	4620      	mov	r0, r4
 80094e4:	4632      	mov	r2, r6
 80094e6:	463b      	mov	r3, r7
 80094e8:	4629      	mov	r1, r5
 80094ea:	f7f6 fed7 	bl	800029c <__adddf3>
 80094ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	4620      	mov	r0, r4
 80094f8:	4629      	mov	r1, r5
 80094fa:	f7f6 fecd 	bl	8000298 <__aeabi_dsub>
 80094fe:	4632      	mov	r2, r6
 8009500:	463b      	mov	r3, r7
 8009502:	f7f6 fecb 	bl	800029c <__adddf3>
 8009506:	ed9d 7b04 	vldr	d7, [sp, #16]
 800950a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800950e:	ed88 7b00 	vstr	d7, [r8]
 8009512:	f109 39ff 	add.w	r9, r9, #4294967295
 8009516:	e776      	b.n	8009406 <__kernel_rem_pio2+0x4f6>
 8009518:	e9da 8900 	ldrd	r8, r9, [sl]
 800951c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009520:	4640      	mov	r0, r8
 8009522:	4632      	mov	r2, r6
 8009524:	463b      	mov	r3, r7
 8009526:	4649      	mov	r1, r9
 8009528:	f7f6 feb8 	bl	800029c <__adddf3>
 800952c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	4640      	mov	r0, r8
 8009536:	4649      	mov	r1, r9
 8009538:	f7f6 feae 	bl	8000298 <__aeabi_dsub>
 800953c:	4632      	mov	r2, r6
 800953e:	463b      	mov	r3, r7
 8009540:	f7f6 feac 	bl	800029c <__adddf3>
 8009544:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009548:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800954c:	ed8a 7b00 	vstr	d7, [sl]
 8009550:	3c01      	subs	r4, #1
 8009552:	e75e      	b.n	8009412 <__kernel_rem_pio2+0x502>
 8009554:	ab48      	add	r3, sp, #288	; 0x120
 8009556:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800955a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955e:	f7f6 fe9d 	bl	800029c <__adddf3>
 8009562:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009566:	e75a      	b.n	800941e <__kernel_rem_pio2+0x50e>
 8009568:	9b01      	ldr	r3, [sp, #4]
 800956a:	9a01      	ldr	r2, [sp, #4]
 800956c:	601d      	str	r5, [r3, #0]
 800956e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009572:	605c      	str	r4, [r3, #4]
 8009574:	609f      	str	r7, [r3, #8]
 8009576:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800957a:	60d3      	str	r3, [r2, #12]
 800957c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009580:	6110      	str	r0, [r2, #16]
 8009582:	6153      	str	r3, [r2, #20]
 8009584:	e72e      	b.n	80093e4 <__kernel_rem_pio2+0x4d4>
 8009586:	bf00      	nop
 8009588:	41700000 	.word	0x41700000
 800958c:	3e700000 	.word	0x3e700000

08009590 <__kernel_sin>:
 8009590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009594:	ed2d 8b04 	vpush	{d8-d9}
 8009598:	eeb0 8a41 	vmov.f32	s16, s2
 800959c:	eef0 8a61 	vmov.f32	s17, s3
 80095a0:	ec55 4b10 	vmov	r4, r5, d0
 80095a4:	b083      	sub	sp, #12
 80095a6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80095aa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80095ae:	9001      	str	r0, [sp, #4]
 80095b0:	da06      	bge.n	80095c0 <__kernel_sin+0x30>
 80095b2:	ee10 0a10 	vmov	r0, s0
 80095b6:	4629      	mov	r1, r5
 80095b8:	f7f7 fac0 	bl	8000b3c <__aeabi_d2iz>
 80095bc:	2800      	cmp	r0, #0
 80095be:	d051      	beq.n	8009664 <__kernel_sin+0xd4>
 80095c0:	4622      	mov	r2, r4
 80095c2:	462b      	mov	r3, r5
 80095c4:	4620      	mov	r0, r4
 80095c6:	4629      	mov	r1, r5
 80095c8:	f7f7 f81e 	bl	8000608 <__aeabi_dmul>
 80095cc:	4682      	mov	sl, r0
 80095ce:	468b      	mov	fp, r1
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4620      	mov	r0, r4
 80095d6:	4629      	mov	r1, r5
 80095d8:	f7f7 f816 	bl	8000608 <__aeabi_dmul>
 80095dc:	a341      	add	r3, pc, #260	; (adr r3, 80096e4 <__kernel_sin+0x154>)
 80095de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e2:	4680      	mov	r8, r0
 80095e4:	4689      	mov	r9, r1
 80095e6:	4650      	mov	r0, sl
 80095e8:	4659      	mov	r1, fp
 80095ea:	f7f7 f80d 	bl	8000608 <__aeabi_dmul>
 80095ee:	a33f      	add	r3, pc, #252	; (adr r3, 80096ec <__kernel_sin+0x15c>)
 80095f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f4:	f7f6 fe50 	bl	8000298 <__aeabi_dsub>
 80095f8:	4652      	mov	r2, sl
 80095fa:	465b      	mov	r3, fp
 80095fc:	f7f7 f804 	bl	8000608 <__aeabi_dmul>
 8009600:	a33c      	add	r3, pc, #240	; (adr r3, 80096f4 <__kernel_sin+0x164>)
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	f7f6 fe49 	bl	800029c <__adddf3>
 800960a:	4652      	mov	r2, sl
 800960c:	465b      	mov	r3, fp
 800960e:	f7f6 fffb 	bl	8000608 <__aeabi_dmul>
 8009612:	a33a      	add	r3, pc, #232	; (adr r3, 80096fc <__kernel_sin+0x16c>)
 8009614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009618:	f7f6 fe3e 	bl	8000298 <__aeabi_dsub>
 800961c:	4652      	mov	r2, sl
 800961e:	465b      	mov	r3, fp
 8009620:	f7f6 fff2 	bl	8000608 <__aeabi_dmul>
 8009624:	a337      	add	r3, pc, #220	; (adr r3, 8009704 <__kernel_sin+0x174>)
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	f7f6 fe37 	bl	800029c <__adddf3>
 800962e:	9b01      	ldr	r3, [sp, #4]
 8009630:	4606      	mov	r6, r0
 8009632:	460f      	mov	r7, r1
 8009634:	b9eb      	cbnz	r3, 8009672 <__kernel_sin+0xe2>
 8009636:	4602      	mov	r2, r0
 8009638:	460b      	mov	r3, r1
 800963a:	4650      	mov	r0, sl
 800963c:	4659      	mov	r1, fp
 800963e:	f7f6 ffe3 	bl	8000608 <__aeabi_dmul>
 8009642:	a325      	add	r3, pc, #148	; (adr r3, 80096d8 <__kernel_sin+0x148>)
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	f7f6 fe26 	bl	8000298 <__aeabi_dsub>
 800964c:	4642      	mov	r2, r8
 800964e:	464b      	mov	r3, r9
 8009650:	f7f6 ffda 	bl	8000608 <__aeabi_dmul>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4620      	mov	r0, r4
 800965a:	4629      	mov	r1, r5
 800965c:	f7f6 fe1e 	bl	800029c <__adddf3>
 8009660:	4604      	mov	r4, r0
 8009662:	460d      	mov	r5, r1
 8009664:	ec45 4b10 	vmov	d0, r4, r5
 8009668:	b003      	add	sp, #12
 800966a:	ecbd 8b04 	vpop	{d8-d9}
 800966e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009672:	4b1b      	ldr	r3, [pc, #108]	; (80096e0 <__kernel_sin+0x150>)
 8009674:	ec51 0b18 	vmov	r0, r1, d8
 8009678:	2200      	movs	r2, #0
 800967a:	f7f6 ffc5 	bl	8000608 <__aeabi_dmul>
 800967e:	4632      	mov	r2, r6
 8009680:	ec41 0b19 	vmov	d9, r0, r1
 8009684:	463b      	mov	r3, r7
 8009686:	4640      	mov	r0, r8
 8009688:	4649      	mov	r1, r9
 800968a:	f7f6 ffbd 	bl	8000608 <__aeabi_dmul>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	ec51 0b19 	vmov	r0, r1, d9
 8009696:	f7f6 fdff 	bl	8000298 <__aeabi_dsub>
 800969a:	4652      	mov	r2, sl
 800969c:	465b      	mov	r3, fp
 800969e:	f7f6 ffb3 	bl	8000608 <__aeabi_dmul>
 80096a2:	ec53 2b18 	vmov	r2, r3, d8
 80096a6:	f7f6 fdf7 	bl	8000298 <__aeabi_dsub>
 80096aa:	a30b      	add	r3, pc, #44	; (adr r3, 80096d8 <__kernel_sin+0x148>)
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	4606      	mov	r6, r0
 80096b2:	460f      	mov	r7, r1
 80096b4:	4640      	mov	r0, r8
 80096b6:	4649      	mov	r1, r9
 80096b8:	f7f6 ffa6 	bl	8000608 <__aeabi_dmul>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4630      	mov	r0, r6
 80096c2:	4639      	mov	r1, r7
 80096c4:	f7f6 fdea 	bl	800029c <__adddf3>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4620      	mov	r0, r4
 80096ce:	4629      	mov	r1, r5
 80096d0:	f7f6 fde2 	bl	8000298 <__aeabi_dsub>
 80096d4:	e7c4      	b.n	8009660 <__kernel_sin+0xd0>
 80096d6:	bf00      	nop
 80096d8:	55555549 	.word	0x55555549
 80096dc:	3fc55555 	.word	0x3fc55555
 80096e0:	3fe00000 	.word	0x3fe00000
 80096e4:	5acfd57c 	.word	0x5acfd57c
 80096e8:	3de5d93a 	.word	0x3de5d93a
 80096ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80096f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80096f4:	57b1fe7d 	.word	0x57b1fe7d
 80096f8:	3ec71de3 	.word	0x3ec71de3
 80096fc:	19c161d5 	.word	0x19c161d5
 8009700:	3f2a01a0 	.word	0x3f2a01a0
 8009704:	1110f8a6 	.word	0x1110f8a6
 8009708:	3f811111 	.word	0x3f811111

0800970c <fabs>:
 800970c:	ec51 0b10 	vmov	r0, r1, d0
 8009710:	ee10 2a10 	vmov	r2, s0
 8009714:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009718:	ec43 2b10 	vmov	d0, r2, r3
 800971c:	4770      	bx	lr
	...

08009720 <floor>:
 8009720:	ec51 0b10 	vmov	r0, r1, d0
 8009724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009728:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800972c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009730:	2e13      	cmp	r6, #19
 8009732:	ee10 5a10 	vmov	r5, s0
 8009736:	ee10 8a10 	vmov	r8, s0
 800973a:	460c      	mov	r4, r1
 800973c:	dc32      	bgt.n	80097a4 <floor+0x84>
 800973e:	2e00      	cmp	r6, #0
 8009740:	da14      	bge.n	800976c <floor+0x4c>
 8009742:	a333      	add	r3, pc, #204	; (adr r3, 8009810 <floor+0xf0>)
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	f7f6 fda8 	bl	800029c <__adddf3>
 800974c:	2200      	movs	r2, #0
 800974e:	2300      	movs	r3, #0
 8009750:	f7f7 f9ea 	bl	8000b28 <__aeabi_dcmpgt>
 8009754:	b138      	cbz	r0, 8009766 <floor+0x46>
 8009756:	2c00      	cmp	r4, #0
 8009758:	da57      	bge.n	800980a <floor+0xea>
 800975a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800975e:	431d      	orrs	r5, r3
 8009760:	d001      	beq.n	8009766 <floor+0x46>
 8009762:	4c2d      	ldr	r4, [pc, #180]	; (8009818 <floor+0xf8>)
 8009764:	2500      	movs	r5, #0
 8009766:	4621      	mov	r1, r4
 8009768:	4628      	mov	r0, r5
 800976a:	e025      	b.n	80097b8 <floor+0x98>
 800976c:	4f2b      	ldr	r7, [pc, #172]	; (800981c <floor+0xfc>)
 800976e:	4137      	asrs	r7, r6
 8009770:	ea01 0307 	and.w	r3, r1, r7
 8009774:	4303      	orrs	r3, r0
 8009776:	d01f      	beq.n	80097b8 <floor+0x98>
 8009778:	a325      	add	r3, pc, #148	; (adr r3, 8009810 <floor+0xf0>)
 800977a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977e:	f7f6 fd8d 	bl	800029c <__adddf3>
 8009782:	2200      	movs	r2, #0
 8009784:	2300      	movs	r3, #0
 8009786:	f7f7 f9cf 	bl	8000b28 <__aeabi_dcmpgt>
 800978a:	2800      	cmp	r0, #0
 800978c:	d0eb      	beq.n	8009766 <floor+0x46>
 800978e:	2c00      	cmp	r4, #0
 8009790:	bfbe      	ittt	lt
 8009792:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009796:	fa43 f606 	asrlt.w	r6, r3, r6
 800979a:	19a4      	addlt	r4, r4, r6
 800979c:	ea24 0407 	bic.w	r4, r4, r7
 80097a0:	2500      	movs	r5, #0
 80097a2:	e7e0      	b.n	8009766 <floor+0x46>
 80097a4:	2e33      	cmp	r6, #51	; 0x33
 80097a6:	dd0b      	ble.n	80097c0 <floor+0xa0>
 80097a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80097ac:	d104      	bne.n	80097b8 <floor+0x98>
 80097ae:	ee10 2a10 	vmov	r2, s0
 80097b2:	460b      	mov	r3, r1
 80097b4:	f7f6 fd72 	bl	800029c <__adddf3>
 80097b8:	ec41 0b10 	vmov	d0, r0, r1
 80097bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80097c4:	f04f 33ff 	mov.w	r3, #4294967295
 80097c8:	fa23 f707 	lsr.w	r7, r3, r7
 80097cc:	4207      	tst	r7, r0
 80097ce:	d0f3      	beq.n	80097b8 <floor+0x98>
 80097d0:	a30f      	add	r3, pc, #60	; (adr r3, 8009810 <floor+0xf0>)
 80097d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d6:	f7f6 fd61 	bl	800029c <__adddf3>
 80097da:	2200      	movs	r2, #0
 80097dc:	2300      	movs	r3, #0
 80097de:	f7f7 f9a3 	bl	8000b28 <__aeabi_dcmpgt>
 80097e2:	2800      	cmp	r0, #0
 80097e4:	d0bf      	beq.n	8009766 <floor+0x46>
 80097e6:	2c00      	cmp	r4, #0
 80097e8:	da02      	bge.n	80097f0 <floor+0xd0>
 80097ea:	2e14      	cmp	r6, #20
 80097ec:	d103      	bne.n	80097f6 <floor+0xd6>
 80097ee:	3401      	adds	r4, #1
 80097f0:	ea25 0507 	bic.w	r5, r5, r7
 80097f4:	e7b7      	b.n	8009766 <floor+0x46>
 80097f6:	2301      	movs	r3, #1
 80097f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80097fc:	fa03 f606 	lsl.w	r6, r3, r6
 8009800:	4435      	add	r5, r6
 8009802:	4545      	cmp	r5, r8
 8009804:	bf38      	it	cc
 8009806:	18e4      	addcc	r4, r4, r3
 8009808:	e7f2      	b.n	80097f0 <floor+0xd0>
 800980a:	2500      	movs	r5, #0
 800980c:	462c      	mov	r4, r5
 800980e:	e7aa      	b.n	8009766 <floor+0x46>
 8009810:	8800759c 	.word	0x8800759c
 8009814:	7e37e43c 	.word	0x7e37e43c
 8009818:	bff00000 	.word	0xbff00000
 800981c:	000fffff 	.word	0x000fffff

08009820 <scalbn>:
 8009820:	b570      	push	{r4, r5, r6, lr}
 8009822:	ec55 4b10 	vmov	r4, r5, d0
 8009826:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800982a:	4606      	mov	r6, r0
 800982c:	462b      	mov	r3, r5
 800982e:	b99a      	cbnz	r2, 8009858 <scalbn+0x38>
 8009830:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009834:	4323      	orrs	r3, r4
 8009836:	d036      	beq.n	80098a6 <scalbn+0x86>
 8009838:	4b39      	ldr	r3, [pc, #228]	; (8009920 <scalbn+0x100>)
 800983a:	4629      	mov	r1, r5
 800983c:	ee10 0a10 	vmov	r0, s0
 8009840:	2200      	movs	r2, #0
 8009842:	f7f6 fee1 	bl	8000608 <__aeabi_dmul>
 8009846:	4b37      	ldr	r3, [pc, #220]	; (8009924 <scalbn+0x104>)
 8009848:	429e      	cmp	r6, r3
 800984a:	4604      	mov	r4, r0
 800984c:	460d      	mov	r5, r1
 800984e:	da10      	bge.n	8009872 <scalbn+0x52>
 8009850:	a32b      	add	r3, pc, #172	; (adr r3, 8009900 <scalbn+0xe0>)
 8009852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009856:	e03a      	b.n	80098ce <scalbn+0xae>
 8009858:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800985c:	428a      	cmp	r2, r1
 800985e:	d10c      	bne.n	800987a <scalbn+0x5a>
 8009860:	ee10 2a10 	vmov	r2, s0
 8009864:	4620      	mov	r0, r4
 8009866:	4629      	mov	r1, r5
 8009868:	f7f6 fd18 	bl	800029c <__adddf3>
 800986c:	4604      	mov	r4, r0
 800986e:	460d      	mov	r5, r1
 8009870:	e019      	b.n	80098a6 <scalbn+0x86>
 8009872:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009876:	460b      	mov	r3, r1
 8009878:	3a36      	subs	r2, #54	; 0x36
 800987a:	4432      	add	r2, r6
 800987c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009880:	428a      	cmp	r2, r1
 8009882:	dd08      	ble.n	8009896 <scalbn+0x76>
 8009884:	2d00      	cmp	r5, #0
 8009886:	a120      	add	r1, pc, #128	; (adr r1, 8009908 <scalbn+0xe8>)
 8009888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800988c:	da1c      	bge.n	80098c8 <scalbn+0xa8>
 800988e:	a120      	add	r1, pc, #128	; (adr r1, 8009910 <scalbn+0xf0>)
 8009890:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009894:	e018      	b.n	80098c8 <scalbn+0xa8>
 8009896:	2a00      	cmp	r2, #0
 8009898:	dd08      	ble.n	80098ac <scalbn+0x8c>
 800989a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800989e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80098a6:	ec45 4b10 	vmov	d0, r4, r5
 80098aa:	bd70      	pop	{r4, r5, r6, pc}
 80098ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80098b0:	da19      	bge.n	80098e6 <scalbn+0xc6>
 80098b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80098b6:	429e      	cmp	r6, r3
 80098b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80098bc:	dd0a      	ble.n	80098d4 <scalbn+0xb4>
 80098be:	a112      	add	r1, pc, #72	; (adr r1, 8009908 <scalbn+0xe8>)
 80098c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1e2      	bne.n	800988e <scalbn+0x6e>
 80098c8:	a30f      	add	r3, pc, #60	; (adr r3, 8009908 <scalbn+0xe8>)
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	f7f6 fe9b 	bl	8000608 <__aeabi_dmul>
 80098d2:	e7cb      	b.n	800986c <scalbn+0x4c>
 80098d4:	a10a      	add	r1, pc, #40	; (adr r1, 8009900 <scalbn+0xe0>)
 80098d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d0b8      	beq.n	8009850 <scalbn+0x30>
 80098de:	a10e      	add	r1, pc, #56	; (adr r1, 8009918 <scalbn+0xf8>)
 80098e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098e4:	e7b4      	b.n	8009850 <scalbn+0x30>
 80098e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098ea:	3236      	adds	r2, #54	; 0x36
 80098ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80098f4:	4620      	mov	r0, r4
 80098f6:	4b0c      	ldr	r3, [pc, #48]	; (8009928 <scalbn+0x108>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	e7e8      	b.n	80098ce <scalbn+0xae>
 80098fc:	f3af 8000 	nop.w
 8009900:	c2f8f359 	.word	0xc2f8f359
 8009904:	01a56e1f 	.word	0x01a56e1f
 8009908:	8800759c 	.word	0x8800759c
 800990c:	7e37e43c 	.word	0x7e37e43c
 8009910:	8800759c 	.word	0x8800759c
 8009914:	fe37e43c 	.word	0xfe37e43c
 8009918:	c2f8f359 	.word	0xc2f8f359
 800991c:	81a56e1f 	.word	0x81a56e1f
 8009920:	43500000 	.word	0x43500000
 8009924:	ffff3cb0 	.word	0xffff3cb0
 8009928:	3c900000 	.word	0x3c900000

0800992c <_init>:
 800992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992e:	bf00      	nop
 8009930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009932:	bc08      	pop	{r3}
 8009934:	469e      	mov	lr, r3
 8009936:	4770      	bx	lr

08009938 <_fini>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	bf00      	nop
 800993c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993e:	bc08      	pop	{r3}
 8009940:	469e      	mov	lr, r3
 8009942:	4770      	bx	lr
